
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model order_data
 * 
 */
export type order_data = {
  order_id: number
  order_date: Date | null
  transaction_status: string | null
  quantity: number | null
  total_price: number | null
  product_id: number | null
  shipper_id: number | null
  seller_id: number | null
  user_id: number | null
}

/**
 * Model product_data
 * 
 */
export type product_data = {
  product_id: number
  name: string | null
  price: number | null
  discount: number | null
  quantityAvailable: number | null
  category: string | null
  currentPrice: number | null
  size: product_data_size | null
  productColor: product_data_productColor | null
}

/**
 * Model product_image
 * 
 */
export type product_image = {
  product_id: number
  image_id: number | null
  url: string | null
}

/**
 * Model product_review
 * 
 */
export type product_review = {
  review_id: number
  rate: number | null
  comment: string | null
  product_id: number | null
  user_id: number | null
}

/**
 * Model seller_data
 * 
 */
export type seller_data = {
  brand_id: number
  product_brand: string | null
  access_name: string | null
  access_pass: string | null
}

/**
 * Model shipper_data
 * 
 */
export type shipper_data = {
  shipper_id: number
  shipper_company: string | null
  service_type: string | null
}

/**
 * Model user_address
 * 
 */
export type user_address = {
  user_id: number
  recipient_firstName: string | null
  recipient_lastName: string | null
  recipient_phone: string | null
  recipient_address: string | null
  recipient_postal: string | null
  recipient_country: string | null
}

/**
 * Model user_data
 * 
 */
export type user_data = {
  user_id: number
  user_firstName: string | null
  user_email: string | null
  user_pass: string | null
  user_lastName: string | null
}


/**
 * Enums
 */

export const product_data_productColor: {
  Black: 'Black',
  White: 'White',
  Grey: 'Grey'
};

export type product_data_productColor = (typeof product_data_productColor)[keyof typeof product_data_productColor]


export const product_data_size: {
  S: 'S',
  M: 'M',
  L: 'L',
  XL: 'XL'
};

export type product_data_size = (typeof product_data_size)[keyof typeof product_data_size]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Order_data
 * const order_data = await prisma.order_data.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Order_data
   * const order_data = await prisma.order_data.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.order_data`: Exposes CRUD operations for the **order_data** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Order_data
    * const order_data = await prisma.order_data.findMany()
    * ```
    */
  get order_data(): Prisma.order_dataDelegate<GlobalReject>;

  /**
   * `prisma.product_data`: Exposes CRUD operations for the **product_data** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_data
    * const product_data = await prisma.product_data.findMany()
    * ```
    */
  get product_data(): Prisma.product_dataDelegate<GlobalReject>;

  /**
   * `prisma.product_image`: Exposes CRUD operations for the **product_image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_images
    * const product_images = await prisma.product_image.findMany()
    * ```
    */
  get product_image(): Prisma.product_imageDelegate<GlobalReject>;

  /**
   * `prisma.product_review`: Exposes CRUD operations for the **product_review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_reviews
    * const product_reviews = await prisma.product_review.findMany()
    * ```
    */
  get product_review(): Prisma.product_reviewDelegate<GlobalReject>;

  /**
   * `prisma.seller_data`: Exposes CRUD operations for the **seller_data** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seller_data
    * const seller_data = await prisma.seller_data.findMany()
    * ```
    */
  get seller_data(): Prisma.seller_dataDelegate<GlobalReject>;

  /**
   * `prisma.shipper_data`: Exposes CRUD operations for the **shipper_data** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shipper_data
    * const shipper_data = await prisma.shipper_data.findMany()
    * ```
    */
  get shipper_data(): Prisma.shipper_dataDelegate<GlobalReject>;

  /**
   * `prisma.user_address`: Exposes CRUD operations for the **user_address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_addresses
    * const user_addresses = await prisma.user_address.findMany()
    * ```
    */
  get user_address(): Prisma.user_addressDelegate<GlobalReject>;

  /**
   * `prisma.user_data`: Exposes CRUD operations for the **user_data** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_data
    * const user_data = await prisma.user_data.findMany()
    * ```
    */
  get user_data(): Prisma.user_dataDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    order_data: 'order_data',
    product_data: 'product_data',
    product_image: 'product_image',
    product_review: 'product_review',
    seller_data: 'seller_data',
    shipper_data: 'shipper_data',
    user_address: 'user_address',
    user_data: 'user_data'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Product_dataCountOutputType
   */


  export type Product_dataCountOutputType = {
    order_data: number
    product_review: number
  }

  export type Product_dataCountOutputTypeSelect = {
    order_data?: boolean
    product_review?: boolean
  }

  export type Product_dataCountOutputTypeGetPayload<S extends boolean | null | undefined | Product_dataCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Product_dataCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (Product_dataCountOutputTypeArgs)
    ? Product_dataCountOutputType 
    : S extends { select: any } & (Product_dataCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Product_dataCountOutputType ? Product_dataCountOutputType[P] : never
  } 
      : Product_dataCountOutputType




  // Custom InputTypes

  /**
   * Product_dataCountOutputType without action
   */
  export type Product_dataCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Product_dataCountOutputType
     */
    select?: Product_dataCountOutputTypeSelect | null
  }



  /**
   * Count Type Seller_dataCountOutputType
   */


  export type Seller_dataCountOutputType = {
    order_data: number
  }

  export type Seller_dataCountOutputTypeSelect = {
    order_data?: boolean
  }

  export type Seller_dataCountOutputTypeGetPayload<S extends boolean | null | undefined | Seller_dataCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Seller_dataCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (Seller_dataCountOutputTypeArgs)
    ? Seller_dataCountOutputType 
    : S extends { select: any } & (Seller_dataCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Seller_dataCountOutputType ? Seller_dataCountOutputType[P] : never
  } 
      : Seller_dataCountOutputType




  // Custom InputTypes

  /**
   * Seller_dataCountOutputType without action
   */
  export type Seller_dataCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Seller_dataCountOutputType
     */
    select?: Seller_dataCountOutputTypeSelect | null
  }



  /**
   * Count Type Shipper_dataCountOutputType
   */


  export type Shipper_dataCountOutputType = {
    order_data: number
  }

  export type Shipper_dataCountOutputTypeSelect = {
    order_data?: boolean
  }

  export type Shipper_dataCountOutputTypeGetPayload<S extends boolean | null | undefined | Shipper_dataCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Shipper_dataCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (Shipper_dataCountOutputTypeArgs)
    ? Shipper_dataCountOutputType 
    : S extends { select: any } & (Shipper_dataCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Shipper_dataCountOutputType ? Shipper_dataCountOutputType[P] : never
  } 
      : Shipper_dataCountOutputType




  // Custom InputTypes

  /**
   * Shipper_dataCountOutputType without action
   */
  export type Shipper_dataCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Shipper_dataCountOutputType
     */
    select?: Shipper_dataCountOutputTypeSelect | null
  }



  /**
   * Count Type User_dataCountOutputType
   */


  export type User_dataCountOutputType = {
    order_data: number
    product_review: number
  }

  export type User_dataCountOutputTypeSelect = {
    order_data?: boolean
    product_review?: boolean
  }

  export type User_dataCountOutputTypeGetPayload<S extends boolean | null | undefined | User_dataCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User_dataCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (User_dataCountOutputTypeArgs)
    ? User_dataCountOutputType 
    : S extends { select: any } & (User_dataCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof User_dataCountOutputType ? User_dataCountOutputType[P] : never
  } 
      : User_dataCountOutputType




  // Custom InputTypes

  /**
   * User_dataCountOutputType without action
   */
  export type User_dataCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the User_dataCountOutputType
     */
    select?: User_dataCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model order_data
   */


  export type AggregateOrder_data = {
    _count: Order_dataCountAggregateOutputType | null
    _avg: Order_dataAvgAggregateOutputType | null
    _sum: Order_dataSumAggregateOutputType | null
    _min: Order_dataMinAggregateOutputType | null
    _max: Order_dataMaxAggregateOutputType | null
  }

  export type Order_dataAvgAggregateOutputType = {
    order_id: number | null
    quantity: number | null
    total_price: number | null
    product_id: number | null
    shipper_id: number | null
    seller_id: number | null
    user_id: number | null
  }

  export type Order_dataSumAggregateOutputType = {
    order_id: number | null
    quantity: number | null
    total_price: number | null
    product_id: number | null
    shipper_id: number | null
    seller_id: number | null
    user_id: number | null
  }

  export type Order_dataMinAggregateOutputType = {
    order_id: number | null
    order_date: Date | null
    transaction_status: string | null
    quantity: number | null
    total_price: number | null
    product_id: number | null
    shipper_id: number | null
    seller_id: number | null
    user_id: number | null
  }

  export type Order_dataMaxAggregateOutputType = {
    order_id: number | null
    order_date: Date | null
    transaction_status: string | null
    quantity: number | null
    total_price: number | null
    product_id: number | null
    shipper_id: number | null
    seller_id: number | null
    user_id: number | null
  }

  export type Order_dataCountAggregateOutputType = {
    order_id: number
    order_date: number
    transaction_status: number
    quantity: number
    total_price: number
    product_id: number
    shipper_id: number
    seller_id: number
    user_id: number
    _all: number
  }


  export type Order_dataAvgAggregateInputType = {
    order_id?: true
    quantity?: true
    total_price?: true
    product_id?: true
    shipper_id?: true
    seller_id?: true
    user_id?: true
  }

  export type Order_dataSumAggregateInputType = {
    order_id?: true
    quantity?: true
    total_price?: true
    product_id?: true
    shipper_id?: true
    seller_id?: true
    user_id?: true
  }

  export type Order_dataMinAggregateInputType = {
    order_id?: true
    order_date?: true
    transaction_status?: true
    quantity?: true
    total_price?: true
    product_id?: true
    shipper_id?: true
    seller_id?: true
    user_id?: true
  }

  export type Order_dataMaxAggregateInputType = {
    order_id?: true
    order_date?: true
    transaction_status?: true
    quantity?: true
    total_price?: true
    product_id?: true
    shipper_id?: true
    seller_id?: true
    user_id?: true
  }

  export type Order_dataCountAggregateInputType = {
    order_id?: true
    order_date?: true
    transaction_status?: true
    quantity?: true
    total_price?: true
    product_id?: true
    shipper_id?: true
    seller_id?: true
    user_id?: true
    _all?: true
  }

  export type Order_dataAggregateArgs = {
    /**
     * Filter which order_data to aggregate.
     */
    where?: order_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_data to fetch.
     */
    orderBy?: Enumerable<order_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: order_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned order_data
    **/
    _count?: true | Order_dataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Order_dataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Order_dataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Order_dataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Order_dataMaxAggregateInputType
  }

  export type GetOrder_dataAggregateType<T extends Order_dataAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder_data]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder_data[P]>
      : GetScalarType<T[P], AggregateOrder_data[P]>
  }




  export type Order_dataGroupByArgs = {
    where?: order_dataWhereInput
    orderBy?: Enumerable<order_dataOrderByWithAggregationInput>
    by: Order_dataScalarFieldEnum[]
    having?: order_dataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Order_dataCountAggregateInputType | true
    _avg?: Order_dataAvgAggregateInputType
    _sum?: Order_dataSumAggregateInputType
    _min?: Order_dataMinAggregateInputType
    _max?: Order_dataMaxAggregateInputType
  }


  export type Order_dataGroupByOutputType = {
    order_id: number
    order_date: Date | null
    transaction_status: string | null
    quantity: number | null
    total_price: number | null
    product_id: number | null
    shipper_id: number | null
    seller_id: number | null
    user_id: number | null
    _count: Order_dataCountAggregateOutputType | null
    _avg: Order_dataAvgAggregateOutputType | null
    _sum: Order_dataSumAggregateOutputType | null
    _min: Order_dataMinAggregateOutputType | null
    _max: Order_dataMaxAggregateOutputType | null
  }

  type GetOrder_dataGroupByPayload<T extends Order_dataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Order_dataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Order_dataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Order_dataGroupByOutputType[P]>
            : GetScalarType<T[P], Order_dataGroupByOutputType[P]>
        }
      >
    >


  export type order_dataSelect = {
    order_id?: boolean
    order_date?: boolean
    transaction_status?: boolean
    quantity?: boolean
    total_price?: boolean
    product_id?: boolean
    shipper_id?: boolean
    seller_id?: boolean
    user_id?: boolean
    product_data?: boolean | product_dataArgs
    shipper_data?: boolean | shipper_dataArgs
    seller_data?: boolean | seller_dataArgs
    user_data?: boolean | user_dataArgs
  }


  export type order_dataInclude = {
    product_data?: boolean | product_dataArgs
    shipper_data?: boolean | shipper_dataArgs
    seller_data?: boolean | seller_dataArgs
    user_data?: boolean | user_dataArgs
  }

  export type order_dataGetPayload<S extends boolean | null | undefined | order_dataArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? order_data :
    S extends undefined ? never :
    S extends { include: any } & (order_dataArgs | order_dataFindManyArgs)
    ? order_data  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'product_data' ? product_dataGetPayload<S['include'][P]> | null :
        P extends 'shipper_data' ? shipper_dataGetPayload<S['include'][P]> | null :
        P extends 'seller_data' ? seller_dataGetPayload<S['include'][P]> | null :
        P extends 'user_data' ? user_dataGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (order_dataArgs | order_dataFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'product_data' ? product_dataGetPayload<S['select'][P]> | null :
        P extends 'shipper_data' ? shipper_dataGetPayload<S['select'][P]> | null :
        P extends 'seller_data' ? seller_dataGetPayload<S['select'][P]> | null :
        P extends 'user_data' ? user_dataGetPayload<S['select'][P]> | null :  P extends keyof order_data ? order_data[P] : never
  } 
      : order_data


  type order_dataCountArgs = 
    Omit<order_dataFindManyArgs, 'select' | 'include'> & {
      select?: Order_dataCountAggregateInputType | true
    }

  export interface order_dataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Order_data that matches the filter.
     * @param {order_dataFindUniqueArgs} args - Arguments to find a Order_data
     * @example
     * // Get one Order_data
     * const order_data = await prisma.order_data.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends order_dataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, order_dataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'order_data'> extends True ? Prisma__order_dataClient<order_dataGetPayload<T>> : Prisma__order_dataClient<order_dataGetPayload<T> | null, null>

    /**
     * Find one Order_data that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {order_dataFindUniqueOrThrowArgs} args - Arguments to find a Order_data
     * @example
     * // Get one Order_data
     * const order_data = await prisma.order_data.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends order_dataFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, order_dataFindUniqueOrThrowArgs>
    ): Prisma__order_dataClient<order_dataGetPayload<T>>

    /**
     * Find the first Order_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_dataFindFirstArgs} args - Arguments to find a Order_data
     * @example
     * // Get one Order_data
     * const order_data = await prisma.order_data.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends order_dataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, order_dataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'order_data'> extends True ? Prisma__order_dataClient<order_dataGetPayload<T>> : Prisma__order_dataClient<order_dataGetPayload<T> | null, null>

    /**
     * Find the first Order_data that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_dataFindFirstOrThrowArgs} args - Arguments to find a Order_data
     * @example
     * // Get one Order_data
     * const order_data = await prisma.order_data.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends order_dataFindFirstOrThrowArgs>(
      args?: SelectSubset<T, order_dataFindFirstOrThrowArgs>
    ): Prisma__order_dataClient<order_dataGetPayload<T>>

    /**
     * Find zero or more Order_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_dataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Order_data
     * const order_data = await prisma.order_data.findMany()
     * 
     * // Get first 10 Order_data
     * const order_data = await prisma.order_data.findMany({ take: 10 })
     * 
     * // Only select the `order_id`
     * const order_dataWithOrder_idOnly = await prisma.order_data.findMany({ select: { order_id: true } })
     * 
    **/
    findMany<T extends order_dataFindManyArgs>(
      args?: SelectSubset<T, order_dataFindManyArgs>
    ): Prisma.PrismaPromise<Array<order_dataGetPayload<T>>>

    /**
     * Create a Order_data.
     * @param {order_dataCreateArgs} args - Arguments to create a Order_data.
     * @example
     * // Create one Order_data
     * const Order_data = await prisma.order_data.create({
     *   data: {
     *     // ... data to create a Order_data
     *   }
     * })
     * 
    **/
    create<T extends order_dataCreateArgs>(
      args: SelectSubset<T, order_dataCreateArgs>
    ): Prisma__order_dataClient<order_dataGetPayload<T>>

    /**
     * Create many Order_data.
     *     @param {order_dataCreateManyArgs} args - Arguments to create many Order_data.
     *     @example
     *     // Create many Order_data
     *     const order_data = await prisma.order_data.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends order_dataCreateManyArgs>(
      args?: SelectSubset<T, order_dataCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order_data.
     * @param {order_dataDeleteArgs} args - Arguments to delete one Order_data.
     * @example
     * // Delete one Order_data
     * const Order_data = await prisma.order_data.delete({
     *   where: {
     *     // ... filter to delete one Order_data
     *   }
     * })
     * 
    **/
    delete<T extends order_dataDeleteArgs>(
      args: SelectSubset<T, order_dataDeleteArgs>
    ): Prisma__order_dataClient<order_dataGetPayload<T>>

    /**
     * Update one Order_data.
     * @param {order_dataUpdateArgs} args - Arguments to update one Order_data.
     * @example
     * // Update one Order_data
     * const order_data = await prisma.order_data.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends order_dataUpdateArgs>(
      args: SelectSubset<T, order_dataUpdateArgs>
    ): Prisma__order_dataClient<order_dataGetPayload<T>>

    /**
     * Delete zero or more Order_data.
     * @param {order_dataDeleteManyArgs} args - Arguments to filter Order_data to delete.
     * @example
     * // Delete a few Order_data
     * const { count } = await prisma.order_data.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends order_dataDeleteManyArgs>(
      args?: SelectSubset<T, order_dataDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Order_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_dataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Order_data
     * const order_data = await prisma.order_data.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends order_dataUpdateManyArgs>(
      args: SelectSubset<T, order_dataUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order_data.
     * @param {order_dataUpsertArgs} args - Arguments to update or create a Order_data.
     * @example
     * // Update or create a Order_data
     * const order_data = await prisma.order_data.upsert({
     *   create: {
     *     // ... data to create a Order_data
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order_data we want to update
     *   }
     * })
    **/
    upsert<T extends order_dataUpsertArgs>(
      args: SelectSubset<T, order_dataUpsertArgs>
    ): Prisma__order_dataClient<order_dataGetPayload<T>>

    /**
     * Count the number of Order_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_dataCountArgs} args - Arguments to filter Order_data to count.
     * @example
     * // Count the number of Order_data
     * const count = await prisma.order_data.count({
     *   where: {
     *     // ... the filter for the Order_data we want to count
     *   }
     * })
    **/
    count<T extends order_dataCountArgs>(
      args?: Subset<T, order_dataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Order_dataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_dataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Order_dataAggregateArgs>(args: Subset<T, Order_dataAggregateArgs>): Prisma.PrismaPromise<GetOrder_dataAggregateType<T>>

    /**
     * Group by Order_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_dataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Order_dataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Order_dataGroupByArgs['orderBy'] }
        : { orderBy?: Order_dataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Order_dataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrder_dataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for order_data.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__order_dataClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product_data<T extends product_dataArgs= {}>(args?: Subset<T, product_dataArgs>): Prisma__product_dataClient<product_dataGetPayload<T> | Null>;

    shipper_data<T extends shipper_dataArgs= {}>(args?: Subset<T, shipper_dataArgs>): Prisma__shipper_dataClient<shipper_dataGetPayload<T> | Null>;

    seller_data<T extends seller_dataArgs= {}>(args?: Subset<T, seller_dataArgs>): Prisma__seller_dataClient<seller_dataGetPayload<T> | Null>;

    user_data<T extends user_dataArgs= {}>(args?: Subset<T, user_dataArgs>): Prisma__user_dataClient<user_dataGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * order_data base type for findUnique actions
   */
  export type order_dataFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the order_data
     */
    select?: order_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: order_dataInclude | null
    /**
     * Filter, which order_data to fetch.
     */
    where: order_dataWhereUniqueInput
  }

  /**
   * order_data findUnique
   */
  export interface order_dataFindUniqueArgs extends order_dataFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * order_data findUniqueOrThrow
   */
  export type order_dataFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the order_data
     */
    select?: order_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: order_dataInclude | null
    /**
     * Filter, which order_data to fetch.
     */
    where: order_dataWhereUniqueInput
  }


  /**
   * order_data base type for findFirst actions
   */
  export type order_dataFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the order_data
     */
    select?: order_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: order_dataInclude | null
    /**
     * Filter, which order_data to fetch.
     */
    where?: order_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_data to fetch.
     */
    orderBy?: Enumerable<order_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for order_data.
     */
    cursor?: order_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of order_data.
     */
    distinct?: Enumerable<Order_dataScalarFieldEnum>
  }

  /**
   * order_data findFirst
   */
  export interface order_dataFindFirstArgs extends order_dataFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * order_data findFirstOrThrow
   */
  export type order_dataFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the order_data
     */
    select?: order_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: order_dataInclude | null
    /**
     * Filter, which order_data to fetch.
     */
    where?: order_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_data to fetch.
     */
    orderBy?: Enumerable<order_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for order_data.
     */
    cursor?: order_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of order_data.
     */
    distinct?: Enumerable<Order_dataScalarFieldEnum>
  }


  /**
   * order_data findMany
   */
  export type order_dataFindManyArgs = {
    /**
     * Select specific fields to fetch from the order_data
     */
    select?: order_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: order_dataInclude | null
    /**
     * Filter, which order_data to fetch.
     */
    where?: order_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_data to fetch.
     */
    orderBy?: Enumerable<order_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing order_data.
     */
    cursor?: order_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_data.
     */
    skip?: number
    distinct?: Enumerable<Order_dataScalarFieldEnum>
  }


  /**
   * order_data create
   */
  export type order_dataCreateArgs = {
    /**
     * Select specific fields to fetch from the order_data
     */
    select?: order_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: order_dataInclude | null
    /**
     * The data needed to create a order_data.
     */
    data: XOR<order_dataCreateInput, order_dataUncheckedCreateInput>
  }


  /**
   * order_data createMany
   */
  export type order_dataCreateManyArgs = {
    /**
     * The data used to create many order_data.
     */
    data: Enumerable<order_dataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * order_data update
   */
  export type order_dataUpdateArgs = {
    /**
     * Select specific fields to fetch from the order_data
     */
    select?: order_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: order_dataInclude | null
    /**
     * The data needed to update a order_data.
     */
    data: XOR<order_dataUpdateInput, order_dataUncheckedUpdateInput>
    /**
     * Choose, which order_data to update.
     */
    where: order_dataWhereUniqueInput
  }


  /**
   * order_data updateMany
   */
  export type order_dataUpdateManyArgs = {
    /**
     * The data used to update order_data.
     */
    data: XOR<order_dataUpdateManyMutationInput, order_dataUncheckedUpdateManyInput>
    /**
     * Filter which order_data to update
     */
    where?: order_dataWhereInput
  }


  /**
   * order_data upsert
   */
  export type order_dataUpsertArgs = {
    /**
     * Select specific fields to fetch from the order_data
     */
    select?: order_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: order_dataInclude | null
    /**
     * The filter to search for the order_data to update in case it exists.
     */
    where: order_dataWhereUniqueInput
    /**
     * In case the order_data found by the `where` argument doesn't exist, create a new order_data with this data.
     */
    create: XOR<order_dataCreateInput, order_dataUncheckedCreateInput>
    /**
     * In case the order_data was found with the provided `where` argument, update it with this data.
     */
    update: XOR<order_dataUpdateInput, order_dataUncheckedUpdateInput>
  }


  /**
   * order_data delete
   */
  export type order_dataDeleteArgs = {
    /**
     * Select specific fields to fetch from the order_data
     */
    select?: order_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: order_dataInclude | null
    /**
     * Filter which order_data to delete.
     */
    where: order_dataWhereUniqueInput
  }


  /**
   * order_data deleteMany
   */
  export type order_dataDeleteManyArgs = {
    /**
     * Filter which order_data to delete
     */
    where?: order_dataWhereInput
  }


  /**
   * order_data without action
   */
  export type order_dataArgs = {
    /**
     * Select specific fields to fetch from the order_data
     */
    select?: order_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: order_dataInclude | null
  }



  /**
   * Model product_data
   */


  export type AggregateProduct_data = {
    _count: Product_dataCountAggregateOutputType | null
    _avg: Product_dataAvgAggregateOutputType | null
    _sum: Product_dataSumAggregateOutputType | null
    _min: Product_dataMinAggregateOutputType | null
    _max: Product_dataMaxAggregateOutputType | null
  }

  export type Product_dataAvgAggregateOutputType = {
    product_id: number | null
    price: number | null
    discount: number | null
    quantityAvailable: number | null
    currentPrice: number | null
  }

  export type Product_dataSumAggregateOutputType = {
    product_id: number | null
    price: number | null
    discount: number | null
    quantityAvailable: number | null
    currentPrice: number | null
  }

  export type Product_dataMinAggregateOutputType = {
    product_id: number | null
    name: string | null
    price: number | null
    discount: number | null
    quantityAvailable: number | null
    category: string | null
    currentPrice: number | null
    size: product_data_size | null
    productColor: product_data_productColor | null
  }

  export type Product_dataMaxAggregateOutputType = {
    product_id: number | null
    name: string | null
    price: number | null
    discount: number | null
    quantityAvailable: number | null
    category: string | null
    currentPrice: number | null
    size: product_data_size | null
    productColor: product_data_productColor | null
  }

  export type Product_dataCountAggregateOutputType = {
    product_id: number
    name: number
    price: number
    discount: number
    quantityAvailable: number
    category: number
    currentPrice: number
    size: number
    productColor: number
    _all: number
  }


  export type Product_dataAvgAggregateInputType = {
    product_id?: true
    price?: true
    discount?: true
    quantityAvailable?: true
    currentPrice?: true
  }

  export type Product_dataSumAggregateInputType = {
    product_id?: true
    price?: true
    discount?: true
    quantityAvailable?: true
    currentPrice?: true
  }

  export type Product_dataMinAggregateInputType = {
    product_id?: true
    name?: true
    price?: true
    discount?: true
    quantityAvailable?: true
    category?: true
    currentPrice?: true
    size?: true
    productColor?: true
  }

  export type Product_dataMaxAggregateInputType = {
    product_id?: true
    name?: true
    price?: true
    discount?: true
    quantityAvailable?: true
    category?: true
    currentPrice?: true
    size?: true
    productColor?: true
  }

  export type Product_dataCountAggregateInputType = {
    product_id?: true
    name?: true
    price?: true
    discount?: true
    quantityAvailable?: true
    category?: true
    currentPrice?: true
    size?: true
    productColor?: true
    _all?: true
  }

  export type Product_dataAggregateArgs = {
    /**
     * Filter which product_data to aggregate.
     */
    where?: product_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_data to fetch.
     */
    orderBy?: Enumerable<product_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: product_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_data
    **/
    _count?: true | Product_dataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_dataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_dataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_dataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_dataMaxAggregateInputType
  }

  export type GetProduct_dataAggregateType<T extends Product_dataAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_data]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_data[P]>
      : GetScalarType<T[P], AggregateProduct_data[P]>
  }




  export type Product_dataGroupByArgs = {
    where?: product_dataWhereInput
    orderBy?: Enumerable<product_dataOrderByWithAggregationInput>
    by: Product_dataScalarFieldEnum[]
    having?: product_dataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_dataCountAggregateInputType | true
    _avg?: Product_dataAvgAggregateInputType
    _sum?: Product_dataSumAggregateInputType
    _min?: Product_dataMinAggregateInputType
    _max?: Product_dataMaxAggregateInputType
  }


  export type Product_dataGroupByOutputType = {
    product_id: number
    name: string | null
    price: number | null
    discount: number | null
    quantityAvailable: number | null
    category: string | null
    currentPrice: number | null
    size: product_data_size | null
    productColor: product_data_productColor | null
    _count: Product_dataCountAggregateOutputType | null
    _avg: Product_dataAvgAggregateOutputType | null
    _sum: Product_dataSumAggregateOutputType | null
    _min: Product_dataMinAggregateOutputType | null
    _max: Product_dataMaxAggregateOutputType | null
  }

  type GetProduct_dataGroupByPayload<T extends Product_dataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Product_dataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_dataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_dataGroupByOutputType[P]>
            : GetScalarType<T[P], Product_dataGroupByOutputType[P]>
        }
      >
    >


  export type product_dataSelect = {
    product_id?: boolean
    name?: boolean
    price?: boolean
    discount?: boolean
    quantityAvailable?: boolean
    category?: boolean
    currentPrice?: boolean
    size?: boolean
    productColor?: boolean
    order_data?: boolean | product_data$order_dataArgs
    product_image?: boolean | product_imageArgs
    product_review?: boolean | product_data$product_reviewArgs
    _count?: boolean | Product_dataCountOutputTypeArgs
  }


  export type product_dataInclude = {
    order_data?: boolean | product_data$order_dataArgs
    product_image?: boolean | product_imageArgs
    product_review?: boolean | product_data$product_reviewArgs
    _count?: boolean | Product_dataCountOutputTypeArgs
  }

  export type product_dataGetPayload<S extends boolean | null | undefined | product_dataArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? product_data :
    S extends undefined ? never :
    S extends { include: any } & (product_dataArgs | product_dataFindManyArgs)
    ? product_data  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'order_data' ? Array < order_dataGetPayload<S['include'][P]>>  :
        P extends 'product_image' ? product_imageGetPayload<S['include'][P]> | null :
        P extends 'product_review' ? Array < product_reviewGetPayload<S['include'][P]>>  :
        P extends '_count' ? Product_dataCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (product_dataArgs | product_dataFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'order_data' ? Array < order_dataGetPayload<S['select'][P]>>  :
        P extends 'product_image' ? product_imageGetPayload<S['select'][P]> | null :
        P extends 'product_review' ? Array < product_reviewGetPayload<S['select'][P]>>  :
        P extends '_count' ? Product_dataCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof product_data ? product_data[P] : never
  } 
      : product_data


  type product_dataCountArgs = 
    Omit<product_dataFindManyArgs, 'select' | 'include'> & {
      select?: Product_dataCountAggregateInputType | true
    }

  export interface product_dataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Product_data that matches the filter.
     * @param {product_dataFindUniqueArgs} args - Arguments to find a Product_data
     * @example
     * // Get one Product_data
     * const product_data = await prisma.product_data.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends product_dataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, product_dataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'product_data'> extends True ? Prisma__product_dataClient<product_dataGetPayload<T>> : Prisma__product_dataClient<product_dataGetPayload<T> | null, null>

    /**
     * Find one Product_data that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {product_dataFindUniqueOrThrowArgs} args - Arguments to find a Product_data
     * @example
     * // Get one Product_data
     * const product_data = await prisma.product_data.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends product_dataFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, product_dataFindUniqueOrThrowArgs>
    ): Prisma__product_dataClient<product_dataGetPayload<T>>

    /**
     * Find the first Product_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_dataFindFirstArgs} args - Arguments to find a Product_data
     * @example
     * // Get one Product_data
     * const product_data = await prisma.product_data.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends product_dataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, product_dataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'product_data'> extends True ? Prisma__product_dataClient<product_dataGetPayload<T>> : Prisma__product_dataClient<product_dataGetPayload<T> | null, null>

    /**
     * Find the first Product_data that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_dataFindFirstOrThrowArgs} args - Arguments to find a Product_data
     * @example
     * // Get one Product_data
     * const product_data = await prisma.product_data.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends product_dataFindFirstOrThrowArgs>(
      args?: SelectSubset<T, product_dataFindFirstOrThrowArgs>
    ): Prisma__product_dataClient<product_dataGetPayload<T>>

    /**
     * Find zero or more Product_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_dataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_data
     * const product_data = await prisma.product_data.findMany()
     * 
     * // Get first 10 Product_data
     * const product_data = await prisma.product_data.findMany({ take: 10 })
     * 
     * // Only select the `product_id`
     * const product_dataWithProduct_idOnly = await prisma.product_data.findMany({ select: { product_id: true } })
     * 
    **/
    findMany<T extends product_dataFindManyArgs>(
      args?: SelectSubset<T, product_dataFindManyArgs>
    ): Prisma.PrismaPromise<Array<product_dataGetPayload<T>>>

    /**
     * Create a Product_data.
     * @param {product_dataCreateArgs} args - Arguments to create a Product_data.
     * @example
     * // Create one Product_data
     * const Product_data = await prisma.product_data.create({
     *   data: {
     *     // ... data to create a Product_data
     *   }
     * })
     * 
    **/
    create<T extends product_dataCreateArgs>(
      args: SelectSubset<T, product_dataCreateArgs>
    ): Prisma__product_dataClient<product_dataGetPayload<T>>

    /**
     * Create many Product_data.
     *     @param {product_dataCreateManyArgs} args - Arguments to create many Product_data.
     *     @example
     *     // Create many Product_data
     *     const product_data = await prisma.product_data.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends product_dataCreateManyArgs>(
      args?: SelectSubset<T, product_dataCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product_data.
     * @param {product_dataDeleteArgs} args - Arguments to delete one Product_data.
     * @example
     * // Delete one Product_data
     * const Product_data = await prisma.product_data.delete({
     *   where: {
     *     // ... filter to delete one Product_data
     *   }
     * })
     * 
    **/
    delete<T extends product_dataDeleteArgs>(
      args: SelectSubset<T, product_dataDeleteArgs>
    ): Prisma__product_dataClient<product_dataGetPayload<T>>

    /**
     * Update one Product_data.
     * @param {product_dataUpdateArgs} args - Arguments to update one Product_data.
     * @example
     * // Update one Product_data
     * const product_data = await prisma.product_data.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends product_dataUpdateArgs>(
      args: SelectSubset<T, product_dataUpdateArgs>
    ): Prisma__product_dataClient<product_dataGetPayload<T>>

    /**
     * Delete zero or more Product_data.
     * @param {product_dataDeleteManyArgs} args - Arguments to filter Product_data to delete.
     * @example
     * // Delete a few Product_data
     * const { count } = await prisma.product_data.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends product_dataDeleteManyArgs>(
      args?: SelectSubset<T, product_dataDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_dataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_data
     * const product_data = await prisma.product_data.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends product_dataUpdateManyArgs>(
      args: SelectSubset<T, product_dataUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_data.
     * @param {product_dataUpsertArgs} args - Arguments to update or create a Product_data.
     * @example
     * // Update or create a Product_data
     * const product_data = await prisma.product_data.upsert({
     *   create: {
     *     // ... data to create a Product_data
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_data we want to update
     *   }
     * })
    **/
    upsert<T extends product_dataUpsertArgs>(
      args: SelectSubset<T, product_dataUpsertArgs>
    ): Prisma__product_dataClient<product_dataGetPayload<T>>

    /**
     * Count the number of Product_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_dataCountArgs} args - Arguments to filter Product_data to count.
     * @example
     * // Count the number of Product_data
     * const count = await prisma.product_data.count({
     *   where: {
     *     // ... the filter for the Product_data we want to count
     *   }
     * })
    **/
    count<T extends product_dataCountArgs>(
      args?: Subset<T, product_dataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_dataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_dataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_dataAggregateArgs>(args: Subset<T, Product_dataAggregateArgs>): Prisma.PrismaPromise<GetProduct_dataAggregateType<T>>

    /**
     * Group by Product_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_dataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Product_dataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Product_dataGroupByArgs['orderBy'] }
        : { orderBy?: Product_dataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Product_dataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_dataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for product_data.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__product_dataClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    order_data<T extends product_data$order_dataArgs= {}>(args?: Subset<T, product_data$order_dataArgs>): Prisma.PrismaPromise<Array<order_dataGetPayload<T>>| Null>;

    product_image<T extends product_imageArgs= {}>(args?: Subset<T, product_imageArgs>): Prisma__product_imageClient<product_imageGetPayload<T> | Null>;

    product_review<T extends product_data$product_reviewArgs= {}>(args?: Subset<T, product_data$product_reviewArgs>): Prisma.PrismaPromise<Array<product_reviewGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * product_data base type for findUnique actions
   */
  export type product_dataFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the product_data
     */
    select?: product_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_dataInclude | null
    /**
     * Filter, which product_data to fetch.
     */
    where: product_dataWhereUniqueInput
  }

  /**
   * product_data findUnique
   */
  export interface product_dataFindUniqueArgs extends product_dataFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * product_data findUniqueOrThrow
   */
  export type product_dataFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the product_data
     */
    select?: product_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_dataInclude | null
    /**
     * Filter, which product_data to fetch.
     */
    where: product_dataWhereUniqueInput
  }


  /**
   * product_data base type for findFirst actions
   */
  export type product_dataFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the product_data
     */
    select?: product_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_dataInclude | null
    /**
     * Filter, which product_data to fetch.
     */
    where?: product_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_data to fetch.
     */
    orderBy?: Enumerable<product_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_data.
     */
    cursor?: product_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_data.
     */
    distinct?: Enumerable<Product_dataScalarFieldEnum>
  }

  /**
   * product_data findFirst
   */
  export interface product_dataFindFirstArgs extends product_dataFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * product_data findFirstOrThrow
   */
  export type product_dataFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the product_data
     */
    select?: product_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_dataInclude | null
    /**
     * Filter, which product_data to fetch.
     */
    where?: product_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_data to fetch.
     */
    orderBy?: Enumerable<product_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_data.
     */
    cursor?: product_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_data.
     */
    distinct?: Enumerable<Product_dataScalarFieldEnum>
  }


  /**
   * product_data findMany
   */
  export type product_dataFindManyArgs = {
    /**
     * Select specific fields to fetch from the product_data
     */
    select?: product_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_dataInclude | null
    /**
     * Filter, which product_data to fetch.
     */
    where?: product_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_data to fetch.
     */
    orderBy?: Enumerable<product_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_data.
     */
    cursor?: product_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_data.
     */
    skip?: number
    distinct?: Enumerable<Product_dataScalarFieldEnum>
  }


  /**
   * product_data create
   */
  export type product_dataCreateArgs = {
    /**
     * Select specific fields to fetch from the product_data
     */
    select?: product_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_dataInclude | null
    /**
     * The data needed to create a product_data.
     */
    data: XOR<product_dataCreateInput, product_dataUncheckedCreateInput>
  }


  /**
   * product_data createMany
   */
  export type product_dataCreateManyArgs = {
    /**
     * The data used to create many product_data.
     */
    data: Enumerable<product_dataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * product_data update
   */
  export type product_dataUpdateArgs = {
    /**
     * Select specific fields to fetch from the product_data
     */
    select?: product_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_dataInclude | null
    /**
     * The data needed to update a product_data.
     */
    data: XOR<product_dataUpdateInput, product_dataUncheckedUpdateInput>
    /**
     * Choose, which product_data to update.
     */
    where: product_dataWhereUniqueInput
  }


  /**
   * product_data updateMany
   */
  export type product_dataUpdateManyArgs = {
    /**
     * The data used to update product_data.
     */
    data: XOR<product_dataUpdateManyMutationInput, product_dataUncheckedUpdateManyInput>
    /**
     * Filter which product_data to update
     */
    where?: product_dataWhereInput
  }


  /**
   * product_data upsert
   */
  export type product_dataUpsertArgs = {
    /**
     * Select specific fields to fetch from the product_data
     */
    select?: product_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_dataInclude | null
    /**
     * The filter to search for the product_data to update in case it exists.
     */
    where: product_dataWhereUniqueInput
    /**
     * In case the product_data found by the `where` argument doesn't exist, create a new product_data with this data.
     */
    create: XOR<product_dataCreateInput, product_dataUncheckedCreateInput>
    /**
     * In case the product_data was found with the provided `where` argument, update it with this data.
     */
    update: XOR<product_dataUpdateInput, product_dataUncheckedUpdateInput>
  }


  /**
   * product_data delete
   */
  export type product_dataDeleteArgs = {
    /**
     * Select specific fields to fetch from the product_data
     */
    select?: product_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_dataInclude | null
    /**
     * Filter which product_data to delete.
     */
    where: product_dataWhereUniqueInput
  }


  /**
   * product_data deleteMany
   */
  export type product_dataDeleteManyArgs = {
    /**
     * Filter which product_data to delete
     */
    where?: product_dataWhereInput
  }


  /**
   * product_data.order_data
   */
  export type product_data$order_dataArgs = {
    /**
     * Select specific fields to fetch from the order_data
     */
    select?: order_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: order_dataInclude | null
    where?: order_dataWhereInput
    orderBy?: Enumerable<order_dataOrderByWithRelationInput>
    cursor?: order_dataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Order_dataScalarFieldEnum>
  }


  /**
   * product_data.product_review
   */
  export type product_data$product_reviewArgs = {
    /**
     * Select specific fields to fetch from the product_review
     */
    select?: product_reviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_reviewInclude | null
    where?: product_reviewWhereInput
    orderBy?: Enumerable<product_reviewOrderByWithRelationInput>
    cursor?: product_reviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Product_reviewScalarFieldEnum>
  }


  /**
   * product_data without action
   */
  export type product_dataArgs = {
    /**
     * Select specific fields to fetch from the product_data
     */
    select?: product_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_dataInclude | null
  }



  /**
   * Model product_image
   */


  export type AggregateProduct_image = {
    _count: Product_imageCountAggregateOutputType | null
    _avg: Product_imageAvgAggregateOutputType | null
    _sum: Product_imageSumAggregateOutputType | null
    _min: Product_imageMinAggregateOutputType | null
    _max: Product_imageMaxAggregateOutputType | null
  }

  export type Product_imageAvgAggregateOutputType = {
    product_id: number | null
    image_id: number | null
  }

  export type Product_imageSumAggregateOutputType = {
    product_id: number | null
    image_id: number | null
  }

  export type Product_imageMinAggregateOutputType = {
    product_id: number | null
    image_id: number | null
    url: string | null
  }

  export type Product_imageMaxAggregateOutputType = {
    product_id: number | null
    image_id: number | null
    url: string | null
  }

  export type Product_imageCountAggregateOutputType = {
    product_id: number
    image_id: number
    url: number
    _all: number
  }


  export type Product_imageAvgAggregateInputType = {
    product_id?: true
    image_id?: true
  }

  export type Product_imageSumAggregateInputType = {
    product_id?: true
    image_id?: true
  }

  export type Product_imageMinAggregateInputType = {
    product_id?: true
    image_id?: true
    url?: true
  }

  export type Product_imageMaxAggregateInputType = {
    product_id?: true
    image_id?: true
    url?: true
  }

  export type Product_imageCountAggregateInputType = {
    product_id?: true
    image_id?: true
    url?: true
    _all?: true
  }

  export type Product_imageAggregateArgs = {
    /**
     * Filter which product_image to aggregate.
     */
    where?: product_imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_images to fetch.
     */
    orderBy?: Enumerable<product_imageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: product_imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_images
    **/
    _count?: true | Product_imageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_imageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_imageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_imageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_imageMaxAggregateInputType
  }

  export type GetProduct_imageAggregateType<T extends Product_imageAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_image]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_image[P]>
      : GetScalarType<T[P], AggregateProduct_image[P]>
  }




  export type Product_imageGroupByArgs = {
    where?: product_imageWhereInput
    orderBy?: Enumerable<product_imageOrderByWithAggregationInput>
    by: Product_imageScalarFieldEnum[]
    having?: product_imageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_imageCountAggregateInputType | true
    _avg?: Product_imageAvgAggregateInputType
    _sum?: Product_imageSumAggregateInputType
    _min?: Product_imageMinAggregateInputType
    _max?: Product_imageMaxAggregateInputType
  }


  export type Product_imageGroupByOutputType = {
    product_id: number
    image_id: number | null
    url: string | null
    _count: Product_imageCountAggregateOutputType | null
    _avg: Product_imageAvgAggregateOutputType | null
    _sum: Product_imageSumAggregateOutputType | null
    _min: Product_imageMinAggregateOutputType | null
    _max: Product_imageMaxAggregateOutputType | null
  }

  type GetProduct_imageGroupByPayload<T extends Product_imageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Product_imageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_imageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_imageGroupByOutputType[P]>
            : GetScalarType<T[P], Product_imageGroupByOutputType[P]>
        }
      >
    >


  export type product_imageSelect = {
    product_id?: boolean
    image_id?: boolean
    url?: boolean
    product_data?: boolean | product_dataArgs
  }


  export type product_imageInclude = {
    product_data?: boolean | product_dataArgs
  }

  export type product_imageGetPayload<S extends boolean | null | undefined | product_imageArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? product_image :
    S extends undefined ? never :
    S extends { include: any } & (product_imageArgs | product_imageFindManyArgs)
    ? product_image  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'product_data' ? product_dataGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (product_imageArgs | product_imageFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'product_data' ? product_dataGetPayload<S['select'][P]> :  P extends keyof product_image ? product_image[P] : never
  } 
      : product_image


  type product_imageCountArgs = 
    Omit<product_imageFindManyArgs, 'select' | 'include'> & {
      select?: Product_imageCountAggregateInputType | true
    }

  export interface product_imageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Product_image that matches the filter.
     * @param {product_imageFindUniqueArgs} args - Arguments to find a Product_image
     * @example
     * // Get one Product_image
     * const product_image = await prisma.product_image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends product_imageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, product_imageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'product_image'> extends True ? Prisma__product_imageClient<product_imageGetPayload<T>> : Prisma__product_imageClient<product_imageGetPayload<T> | null, null>

    /**
     * Find one Product_image that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {product_imageFindUniqueOrThrowArgs} args - Arguments to find a Product_image
     * @example
     * // Get one Product_image
     * const product_image = await prisma.product_image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends product_imageFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, product_imageFindUniqueOrThrowArgs>
    ): Prisma__product_imageClient<product_imageGetPayload<T>>

    /**
     * Find the first Product_image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_imageFindFirstArgs} args - Arguments to find a Product_image
     * @example
     * // Get one Product_image
     * const product_image = await prisma.product_image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends product_imageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, product_imageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'product_image'> extends True ? Prisma__product_imageClient<product_imageGetPayload<T>> : Prisma__product_imageClient<product_imageGetPayload<T> | null, null>

    /**
     * Find the first Product_image that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_imageFindFirstOrThrowArgs} args - Arguments to find a Product_image
     * @example
     * // Get one Product_image
     * const product_image = await prisma.product_image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends product_imageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, product_imageFindFirstOrThrowArgs>
    ): Prisma__product_imageClient<product_imageGetPayload<T>>

    /**
     * Find zero or more Product_images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_imageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_images
     * const product_images = await prisma.product_image.findMany()
     * 
     * // Get first 10 Product_images
     * const product_images = await prisma.product_image.findMany({ take: 10 })
     * 
     * // Only select the `product_id`
     * const product_imageWithProduct_idOnly = await prisma.product_image.findMany({ select: { product_id: true } })
     * 
    **/
    findMany<T extends product_imageFindManyArgs>(
      args?: SelectSubset<T, product_imageFindManyArgs>
    ): Prisma.PrismaPromise<Array<product_imageGetPayload<T>>>

    /**
     * Create a Product_image.
     * @param {product_imageCreateArgs} args - Arguments to create a Product_image.
     * @example
     * // Create one Product_image
     * const Product_image = await prisma.product_image.create({
     *   data: {
     *     // ... data to create a Product_image
     *   }
     * })
     * 
    **/
    create<T extends product_imageCreateArgs>(
      args: SelectSubset<T, product_imageCreateArgs>
    ): Prisma__product_imageClient<product_imageGetPayload<T>>

    /**
     * Create many Product_images.
     *     @param {product_imageCreateManyArgs} args - Arguments to create many Product_images.
     *     @example
     *     // Create many Product_images
     *     const product_image = await prisma.product_image.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends product_imageCreateManyArgs>(
      args?: SelectSubset<T, product_imageCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product_image.
     * @param {product_imageDeleteArgs} args - Arguments to delete one Product_image.
     * @example
     * // Delete one Product_image
     * const Product_image = await prisma.product_image.delete({
     *   where: {
     *     // ... filter to delete one Product_image
     *   }
     * })
     * 
    **/
    delete<T extends product_imageDeleteArgs>(
      args: SelectSubset<T, product_imageDeleteArgs>
    ): Prisma__product_imageClient<product_imageGetPayload<T>>

    /**
     * Update one Product_image.
     * @param {product_imageUpdateArgs} args - Arguments to update one Product_image.
     * @example
     * // Update one Product_image
     * const product_image = await prisma.product_image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends product_imageUpdateArgs>(
      args: SelectSubset<T, product_imageUpdateArgs>
    ): Prisma__product_imageClient<product_imageGetPayload<T>>

    /**
     * Delete zero or more Product_images.
     * @param {product_imageDeleteManyArgs} args - Arguments to filter Product_images to delete.
     * @example
     * // Delete a few Product_images
     * const { count } = await prisma.product_image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends product_imageDeleteManyArgs>(
      args?: SelectSubset<T, product_imageDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_imageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_images
     * const product_image = await prisma.product_image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends product_imageUpdateManyArgs>(
      args: SelectSubset<T, product_imageUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_image.
     * @param {product_imageUpsertArgs} args - Arguments to update or create a Product_image.
     * @example
     * // Update or create a Product_image
     * const product_image = await prisma.product_image.upsert({
     *   create: {
     *     // ... data to create a Product_image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_image we want to update
     *   }
     * })
    **/
    upsert<T extends product_imageUpsertArgs>(
      args: SelectSubset<T, product_imageUpsertArgs>
    ): Prisma__product_imageClient<product_imageGetPayload<T>>

    /**
     * Count the number of Product_images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_imageCountArgs} args - Arguments to filter Product_images to count.
     * @example
     * // Count the number of Product_images
     * const count = await prisma.product_image.count({
     *   where: {
     *     // ... the filter for the Product_images we want to count
     *   }
     * })
    **/
    count<T extends product_imageCountArgs>(
      args?: Subset<T, product_imageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_imageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_imageAggregateArgs>(args: Subset<T, Product_imageAggregateArgs>): Prisma.PrismaPromise<GetProduct_imageAggregateType<T>>

    /**
     * Group by Product_image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Product_imageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Product_imageGroupByArgs['orderBy'] }
        : { orderBy?: Product_imageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Product_imageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_imageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for product_image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__product_imageClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product_data<T extends product_dataArgs= {}>(args?: Subset<T, product_dataArgs>): Prisma__product_dataClient<product_dataGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * product_image base type for findUnique actions
   */
  export type product_imageFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the product_image
     */
    select?: product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_imageInclude | null
    /**
     * Filter, which product_image to fetch.
     */
    where: product_imageWhereUniqueInput
  }

  /**
   * product_image findUnique
   */
  export interface product_imageFindUniqueArgs extends product_imageFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * product_image findUniqueOrThrow
   */
  export type product_imageFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the product_image
     */
    select?: product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_imageInclude | null
    /**
     * Filter, which product_image to fetch.
     */
    where: product_imageWhereUniqueInput
  }


  /**
   * product_image base type for findFirst actions
   */
  export type product_imageFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the product_image
     */
    select?: product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_imageInclude | null
    /**
     * Filter, which product_image to fetch.
     */
    where?: product_imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_images to fetch.
     */
    orderBy?: Enumerable<product_imageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_images.
     */
    cursor?: product_imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_images.
     */
    distinct?: Enumerable<Product_imageScalarFieldEnum>
  }

  /**
   * product_image findFirst
   */
  export interface product_imageFindFirstArgs extends product_imageFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * product_image findFirstOrThrow
   */
  export type product_imageFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the product_image
     */
    select?: product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_imageInclude | null
    /**
     * Filter, which product_image to fetch.
     */
    where?: product_imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_images to fetch.
     */
    orderBy?: Enumerable<product_imageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_images.
     */
    cursor?: product_imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_images.
     */
    distinct?: Enumerable<Product_imageScalarFieldEnum>
  }


  /**
   * product_image findMany
   */
  export type product_imageFindManyArgs = {
    /**
     * Select specific fields to fetch from the product_image
     */
    select?: product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_imageInclude | null
    /**
     * Filter, which product_images to fetch.
     */
    where?: product_imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_images to fetch.
     */
    orderBy?: Enumerable<product_imageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_images.
     */
    cursor?: product_imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_images.
     */
    skip?: number
    distinct?: Enumerable<Product_imageScalarFieldEnum>
  }


  /**
   * product_image create
   */
  export type product_imageCreateArgs = {
    /**
     * Select specific fields to fetch from the product_image
     */
    select?: product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_imageInclude | null
    /**
     * The data needed to create a product_image.
     */
    data: XOR<product_imageCreateInput, product_imageUncheckedCreateInput>
  }


  /**
   * product_image createMany
   */
  export type product_imageCreateManyArgs = {
    /**
     * The data used to create many product_images.
     */
    data: Enumerable<product_imageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * product_image update
   */
  export type product_imageUpdateArgs = {
    /**
     * Select specific fields to fetch from the product_image
     */
    select?: product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_imageInclude | null
    /**
     * The data needed to update a product_image.
     */
    data: XOR<product_imageUpdateInput, product_imageUncheckedUpdateInput>
    /**
     * Choose, which product_image to update.
     */
    where: product_imageWhereUniqueInput
  }


  /**
   * product_image updateMany
   */
  export type product_imageUpdateManyArgs = {
    /**
     * The data used to update product_images.
     */
    data: XOR<product_imageUpdateManyMutationInput, product_imageUncheckedUpdateManyInput>
    /**
     * Filter which product_images to update
     */
    where?: product_imageWhereInput
  }


  /**
   * product_image upsert
   */
  export type product_imageUpsertArgs = {
    /**
     * Select specific fields to fetch from the product_image
     */
    select?: product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_imageInclude | null
    /**
     * The filter to search for the product_image to update in case it exists.
     */
    where: product_imageWhereUniqueInput
    /**
     * In case the product_image found by the `where` argument doesn't exist, create a new product_image with this data.
     */
    create: XOR<product_imageCreateInput, product_imageUncheckedCreateInput>
    /**
     * In case the product_image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<product_imageUpdateInput, product_imageUncheckedUpdateInput>
  }


  /**
   * product_image delete
   */
  export type product_imageDeleteArgs = {
    /**
     * Select specific fields to fetch from the product_image
     */
    select?: product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_imageInclude | null
    /**
     * Filter which product_image to delete.
     */
    where: product_imageWhereUniqueInput
  }


  /**
   * product_image deleteMany
   */
  export type product_imageDeleteManyArgs = {
    /**
     * Filter which product_images to delete
     */
    where?: product_imageWhereInput
  }


  /**
   * product_image without action
   */
  export type product_imageArgs = {
    /**
     * Select specific fields to fetch from the product_image
     */
    select?: product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_imageInclude | null
  }



  /**
   * Model product_review
   */


  export type AggregateProduct_review = {
    _count: Product_reviewCountAggregateOutputType | null
    _avg: Product_reviewAvgAggregateOutputType | null
    _sum: Product_reviewSumAggregateOutputType | null
    _min: Product_reviewMinAggregateOutputType | null
    _max: Product_reviewMaxAggregateOutputType | null
  }

  export type Product_reviewAvgAggregateOutputType = {
    review_id: number | null
    rate: number | null
    product_id: number | null
    user_id: number | null
  }

  export type Product_reviewSumAggregateOutputType = {
    review_id: number | null
    rate: number | null
    product_id: number | null
    user_id: number | null
  }

  export type Product_reviewMinAggregateOutputType = {
    review_id: number | null
    rate: number | null
    comment: string | null
    product_id: number | null
    user_id: number | null
  }

  export type Product_reviewMaxAggregateOutputType = {
    review_id: number | null
    rate: number | null
    comment: string | null
    product_id: number | null
    user_id: number | null
  }

  export type Product_reviewCountAggregateOutputType = {
    review_id: number
    rate: number
    comment: number
    product_id: number
    user_id: number
    _all: number
  }


  export type Product_reviewAvgAggregateInputType = {
    review_id?: true
    rate?: true
    product_id?: true
    user_id?: true
  }

  export type Product_reviewSumAggregateInputType = {
    review_id?: true
    rate?: true
    product_id?: true
    user_id?: true
  }

  export type Product_reviewMinAggregateInputType = {
    review_id?: true
    rate?: true
    comment?: true
    product_id?: true
    user_id?: true
  }

  export type Product_reviewMaxAggregateInputType = {
    review_id?: true
    rate?: true
    comment?: true
    product_id?: true
    user_id?: true
  }

  export type Product_reviewCountAggregateInputType = {
    review_id?: true
    rate?: true
    comment?: true
    product_id?: true
    user_id?: true
    _all?: true
  }

  export type Product_reviewAggregateArgs = {
    /**
     * Filter which product_review to aggregate.
     */
    where?: product_reviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_reviews to fetch.
     */
    orderBy?: Enumerable<product_reviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: product_reviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_reviews
    **/
    _count?: true | Product_reviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_reviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_reviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_reviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_reviewMaxAggregateInputType
  }

  export type GetProduct_reviewAggregateType<T extends Product_reviewAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_review]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_review[P]>
      : GetScalarType<T[P], AggregateProduct_review[P]>
  }




  export type Product_reviewGroupByArgs = {
    where?: product_reviewWhereInput
    orderBy?: Enumerable<product_reviewOrderByWithAggregationInput>
    by: Product_reviewScalarFieldEnum[]
    having?: product_reviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_reviewCountAggregateInputType | true
    _avg?: Product_reviewAvgAggregateInputType
    _sum?: Product_reviewSumAggregateInputType
    _min?: Product_reviewMinAggregateInputType
    _max?: Product_reviewMaxAggregateInputType
  }


  export type Product_reviewGroupByOutputType = {
    review_id: number
    rate: number | null
    comment: string | null
    product_id: number | null
    user_id: number | null
    _count: Product_reviewCountAggregateOutputType | null
    _avg: Product_reviewAvgAggregateOutputType | null
    _sum: Product_reviewSumAggregateOutputType | null
    _min: Product_reviewMinAggregateOutputType | null
    _max: Product_reviewMaxAggregateOutputType | null
  }

  type GetProduct_reviewGroupByPayload<T extends Product_reviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Product_reviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_reviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_reviewGroupByOutputType[P]>
            : GetScalarType<T[P], Product_reviewGroupByOutputType[P]>
        }
      >
    >


  export type product_reviewSelect = {
    review_id?: boolean
    rate?: boolean
    comment?: boolean
    product_id?: boolean
    user_id?: boolean
    product_data?: boolean | product_dataArgs
    user_data?: boolean | user_dataArgs
  }


  export type product_reviewInclude = {
    product_data?: boolean | product_dataArgs
    user_data?: boolean | user_dataArgs
  }

  export type product_reviewGetPayload<S extends boolean | null | undefined | product_reviewArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? product_review :
    S extends undefined ? never :
    S extends { include: any } & (product_reviewArgs | product_reviewFindManyArgs)
    ? product_review  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'product_data' ? product_dataGetPayload<S['include'][P]> | null :
        P extends 'user_data' ? user_dataGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (product_reviewArgs | product_reviewFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'product_data' ? product_dataGetPayload<S['select'][P]> | null :
        P extends 'user_data' ? user_dataGetPayload<S['select'][P]> | null :  P extends keyof product_review ? product_review[P] : never
  } 
      : product_review


  type product_reviewCountArgs = 
    Omit<product_reviewFindManyArgs, 'select' | 'include'> & {
      select?: Product_reviewCountAggregateInputType | true
    }

  export interface product_reviewDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Product_review that matches the filter.
     * @param {product_reviewFindUniqueArgs} args - Arguments to find a Product_review
     * @example
     * // Get one Product_review
     * const product_review = await prisma.product_review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends product_reviewFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, product_reviewFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'product_review'> extends True ? Prisma__product_reviewClient<product_reviewGetPayload<T>> : Prisma__product_reviewClient<product_reviewGetPayload<T> | null, null>

    /**
     * Find one Product_review that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {product_reviewFindUniqueOrThrowArgs} args - Arguments to find a Product_review
     * @example
     * // Get one Product_review
     * const product_review = await prisma.product_review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends product_reviewFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, product_reviewFindUniqueOrThrowArgs>
    ): Prisma__product_reviewClient<product_reviewGetPayload<T>>

    /**
     * Find the first Product_review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_reviewFindFirstArgs} args - Arguments to find a Product_review
     * @example
     * // Get one Product_review
     * const product_review = await prisma.product_review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends product_reviewFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, product_reviewFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'product_review'> extends True ? Prisma__product_reviewClient<product_reviewGetPayload<T>> : Prisma__product_reviewClient<product_reviewGetPayload<T> | null, null>

    /**
     * Find the first Product_review that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_reviewFindFirstOrThrowArgs} args - Arguments to find a Product_review
     * @example
     * // Get one Product_review
     * const product_review = await prisma.product_review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends product_reviewFindFirstOrThrowArgs>(
      args?: SelectSubset<T, product_reviewFindFirstOrThrowArgs>
    ): Prisma__product_reviewClient<product_reviewGetPayload<T>>

    /**
     * Find zero or more Product_reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_reviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_reviews
     * const product_reviews = await prisma.product_review.findMany()
     * 
     * // Get first 10 Product_reviews
     * const product_reviews = await prisma.product_review.findMany({ take: 10 })
     * 
     * // Only select the `review_id`
     * const product_reviewWithReview_idOnly = await prisma.product_review.findMany({ select: { review_id: true } })
     * 
    **/
    findMany<T extends product_reviewFindManyArgs>(
      args?: SelectSubset<T, product_reviewFindManyArgs>
    ): Prisma.PrismaPromise<Array<product_reviewGetPayload<T>>>

    /**
     * Create a Product_review.
     * @param {product_reviewCreateArgs} args - Arguments to create a Product_review.
     * @example
     * // Create one Product_review
     * const Product_review = await prisma.product_review.create({
     *   data: {
     *     // ... data to create a Product_review
     *   }
     * })
     * 
    **/
    create<T extends product_reviewCreateArgs>(
      args: SelectSubset<T, product_reviewCreateArgs>
    ): Prisma__product_reviewClient<product_reviewGetPayload<T>>

    /**
     * Create many Product_reviews.
     *     @param {product_reviewCreateManyArgs} args - Arguments to create many Product_reviews.
     *     @example
     *     // Create many Product_reviews
     *     const product_review = await prisma.product_review.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends product_reviewCreateManyArgs>(
      args?: SelectSubset<T, product_reviewCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product_review.
     * @param {product_reviewDeleteArgs} args - Arguments to delete one Product_review.
     * @example
     * // Delete one Product_review
     * const Product_review = await prisma.product_review.delete({
     *   where: {
     *     // ... filter to delete one Product_review
     *   }
     * })
     * 
    **/
    delete<T extends product_reviewDeleteArgs>(
      args: SelectSubset<T, product_reviewDeleteArgs>
    ): Prisma__product_reviewClient<product_reviewGetPayload<T>>

    /**
     * Update one Product_review.
     * @param {product_reviewUpdateArgs} args - Arguments to update one Product_review.
     * @example
     * // Update one Product_review
     * const product_review = await prisma.product_review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends product_reviewUpdateArgs>(
      args: SelectSubset<T, product_reviewUpdateArgs>
    ): Prisma__product_reviewClient<product_reviewGetPayload<T>>

    /**
     * Delete zero or more Product_reviews.
     * @param {product_reviewDeleteManyArgs} args - Arguments to filter Product_reviews to delete.
     * @example
     * // Delete a few Product_reviews
     * const { count } = await prisma.product_review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends product_reviewDeleteManyArgs>(
      args?: SelectSubset<T, product_reviewDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_reviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_reviews
     * const product_review = await prisma.product_review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends product_reviewUpdateManyArgs>(
      args: SelectSubset<T, product_reviewUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_review.
     * @param {product_reviewUpsertArgs} args - Arguments to update or create a Product_review.
     * @example
     * // Update or create a Product_review
     * const product_review = await prisma.product_review.upsert({
     *   create: {
     *     // ... data to create a Product_review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_review we want to update
     *   }
     * })
    **/
    upsert<T extends product_reviewUpsertArgs>(
      args: SelectSubset<T, product_reviewUpsertArgs>
    ): Prisma__product_reviewClient<product_reviewGetPayload<T>>

    /**
     * Count the number of Product_reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_reviewCountArgs} args - Arguments to filter Product_reviews to count.
     * @example
     * // Count the number of Product_reviews
     * const count = await prisma.product_review.count({
     *   where: {
     *     // ... the filter for the Product_reviews we want to count
     *   }
     * })
    **/
    count<T extends product_reviewCountArgs>(
      args?: Subset<T, product_reviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_reviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_reviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_reviewAggregateArgs>(args: Subset<T, Product_reviewAggregateArgs>): Prisma.PrismaPromise<GetProduct_reviewAggregateType<T>>

    /**
     * Group by Product_review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_reviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Product_reviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Product_reviewGroupByArgs['orderBy'] }
        : { orderBy?: Product_reviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Product_reviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_reviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for product_review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__product_reviewClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product_data<T extends product_dataArgs= {}>(args?: Subset<T, product_dataArgs>): Prisma__product_dataClient<product_dataGetPayload<T> | Null>;

    user_data<T extends user_dataArgs= {}>(args?: Subset<T, user_dataArgs>): Prisma__user_dataClient<user_dataGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * product_review base type for findUnique actions
   */
  export type product_reviewFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the product_review
     */
    select?: product_reviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_reviewInclude | null
    /**
     * Filter, which product_review to fetch.
     */
    where: product_reviewWhereUniqueInput
  }

  /**
   * product_review findUnique
   */
  export interface product_reviewFindUniqueArgs extends product_reviewFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * product_review findUniqueOrThrow
   */
  export type product_reviewFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the product_review
     */
    select?: product_reviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_reviewInclude | null
    /**
     * Filter, which product_review to fetch.
     */
    where: product_reviewWhereUniqueInput
  }


  /**
   * product_review base type for findFirst actions
   */
  export type product_reviewFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the product_review
     */
    select?: product_reviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_reviewInclude | null
    /**
     * Filter, which product_review to fetch.
     */
    where?: product_reviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_reviews to fetch.
     */
    orderBy?: Enumerable<product_reviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_reviews.
     */
    cursor?: product_reviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_reviews.
     */
    distinct?: Enumerable<Product_reviewScalarFieldEnum>
  }

  /**
   * product_review findFirst
   */
  export interface product_reviewFindFirstArgs extends product_reviewFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * product_review findFirstOrThrow
   */
  export type product_reviewFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the product_review
     */
    select?: product_reviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_reviewInclude | null
    /**
     * Filter, which product_review to fetch.
     */
    where?: product_reviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_reviews to fetch.
     */
    orderBy?: Enumerable<product_reviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_reviews.
     */
    cursor?: product_reviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_reviews.
     */
    distinct?: Enumerable<Product_reviewScalarFieldEnum>
  }


  /**
   * product_review findMany
   */
  export type product_reviewFindManyArgs = {
    /**
     * Select specific fields to fetch from the product_review
     */
    select?: product_reviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_reviewInclude | null
    /**
     * Filter, which product_reviews to fetch.
     */
    where?: product_reviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_reviews to fetch.
     */
    orderBy?: Enumerable<product_reviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_reviews.
     */
    cursor?: product_reviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_reviews.
     */
    skip?: number
    distinct?: Enumerable<Product_reviewScalarFieldEnum>
  }


  /**
   * product_review create
   */
  export type product_reviewCreateArgs = {
    /**
     * Select specific fields to fetch from the product_review
     */
    select?: product_reviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_reviewInclude | null
    /**
     * The data needed to create a product_review.
     */
    data: XOR<product_reviewCreateInput, product_reviewUncheckedCreateInput>
  }


  /**
   * product_review createMany
   */
  export type product_reviewCreateManyArgs = {
    /**
     * The data used to create many product_reviews.
     */
    data: Enumerable<product_reviewCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * product_review update
   */
  export type product_reviewUpdateArgs = {
    /**
     * Select specific fields to fetch from the product_review
     */
    select?: product_reviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_reviewInclude | null
    /**
     * The data needed to update a product_review.
     */
    data: XOR<product_reviewUpdateInput, product_reviewUncheckedUpdateInput>
    /**
     * Choose, which product_review to update.
     */
    where: product_reviewWhereUniqueInput
  }


  /**
   * product_review updateMany
   */
  export type product_reviewUpdateManyArgs = {
    /**
     * The data used to update product_reviews.
     */
    data: XOR<product_reviewUpdateManyMutationInput, product_reviewUncheckedUpdateManyInput>
    /**
     * Filter which product_reviews to update
     */
    where?: product_reviewWhereInput
  }


  /**
   * product_review upsert
   */
  export type product_reviewUpsertArgs = {
    /**
     * Select specific fields to fetch from the product_review
     */
    select?: product_reviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_reviewInclude | null
    /**
     * The filter to search for the product_review to update in case it exists.
     */
    where: product_reviewWhereUniqueInput
    /**
     * In case the product_review found by the `where` argument doesn't exist, create a new product_review with this data.
     */
    create: XOR<product_reviewCreateInput, product_reviewUncheckedCreateInput>
    /**
     * In case the product_review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<product_reviewUpdateInput, product_reviewUncheckedUpdateInput>
  }


  /**
   * product_review delete
   */
  export type product_reviewDeleteArgs = {
    /**
     * Select specific fields to fetch from the product_review
     */
    select?: product_reviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_reviewInclude | null
    /**
     * Filter which product_review to delete.
     */
    where: product_reviewWhereUniqueInput
  }


  /**
   * product_review deleteMany
   */
  export type product_reviewDeleteManyArgs = {
    /**
     * Filter which product_reviews to delete
     */
    where?: product_reviewWhereInput
  }


  /**
   * product_review without action
   */
  export type product_reviewArgs = {
    /**
     * Select specific fields to fetch from the product_review
     */
    select?: product_reviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_reviewInclude | null
  }



  /**
   * Model seller_data
   */


  export type AggregateSeller_data = {
    _count: Seller_dataCountAggregateOutputType | null
    _avg: Seller_dataAvgAggregateOutputType | null
    _sum: Seller_dataSumAggregateOutputType | null
    _min: Seller_dataMinAggregateOutputType | null
    _max: Seller_dataMaxAggregateOutputType | null
  }

  export type Seller_dataAvgAggregateOutputType = {
    brand_id: number | null
  }

  export type Seller_dataSumAggregateOutputType = {
    brand_id: number | null
  }

  export type Seller_dataMinAggregateOutputType = {
    brand_id: number | null
    product_brand: string | null
    access_name: string | null
    access_pass: string | null
  }

  export type Seller_dataMaxAggregateOutputType = {
    brand_id: number | null
    product_brand: string | null
    access_name: string | null
    access_pass: string | null
  }

  export type Seller_dataCountAggregateOutputType = {
    brand_id: number
    product_brand: number
    access_name: number
    access_pass: number
    _all: number
  }


  export type Seller_dataAvgAggregateInputType = {
    brand_id?: true
  }

  export type Seller_dataSumAggregateInputType = {
    brand_id?: true
  }

  export type Seller_dataMinAggregateInputType = {
    brand_id?: true
    product_brand?: true
    access_name?: true
    access_pass?: true
  }

  export type Seller_dataMaxAggregateInputType = {
    brand_id?: true
    product_brand?: true
    access_name?: true
    access_pass?: true
  }

  export type Seller_dataCountAggregateInputType = {
    brand_id?: true
    product_brand?: true
    access_name?: true
    access_pass?: true
    _all?: true
  }

  export type Seller_dataAggregateArgs = {
    /**
     * Filter which seller_data to aggregate.
     */
    where?: seller_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seller_data to fetch.
     */
    orderBy?: Enumerable<seller_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: seller_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seller_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seller_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned seller_data
    **/
    _count?: true | Seller_dataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Seller_dataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Seller_dataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Seller_dataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Seller_dataMaxAggregateInputType
  }

  export type GetSeller_dataAggregateType<T extends Seller_dataAggregateArgs> = {
        [P in keyof T & keyof AggregateSeller_data]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeller_data[P]>
      : GetScalarType<T[P], AggregateSeller_data[P]>
  }




  export type Seller_dataGroupByArgs = {
    where?: seller_dataWhereInput
    orderBy?: Enumerable<seller_dataOrderByWithAggregationInput>
    by: Seller_dataScalarFieldEnum[]
    having?: seller_dataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Seller_dataCountAggregateInputType | true
    _avg?: Seller_dataAvgAggregateInputType
    _sum?: Seller_dataSumAggregateInputType
    _min?: Seller_dataMinAggregateInputType
    _max?: Seller_dataMaxAggregateInputType
  }


  export type Seller_dataGroupByOutputType = {
    brand_id: number
    product_brand: string | null
    access_name: string | null
    access_pass: string | null
    _count: Seller_dataCountAggregateOutputType | null
    _avg: Seller_dataAvgAggregateOutputType | null
    _sum: Seller_dataSumAggregateOutputType | null
    _min: Seller_dataMinAggregateOutputType | null
    _max: Seller_dataMaxAggregateOutputType | null
  }

  type GetSeller_dataGroupByPayload<T extends Seller_dataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Seller_dataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Seller_dataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Seller_dataGroupByOutputType[P]>
            : GetScalarType<T[P], Seller_dataGroupByOutputType[P]>
        }
      >
    >


  export type seller_dataSelect = {
    brand_id?: boolean
    product_brand?: boolean
    access_name?: boolean
    access_pass?: boolean
    order_data?: boolean | seller_data$order_dataArgs
    _count?: boolean | Seller_dataCountOutputTypeArgs
  }


  export type seller_dataInclude = {
    order_data?: boolean | seller_data$order_dataArgs
    _count?: boolean | Seller_dataCountOutputTypeArgs
  }

  export type seller_dataGetPayload<S extends boolean | null | undefined | seller_dataArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? seller_data :
    S extends undefined ? never :
    S extends { include: any } & (seller_dataArgs | seller_dataFindManyArgs)
    ? seller_data  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'order_data' ? Array < order_dataGetPayload<S['include'][P]>>  :
        P extends '_count' ? Seller_dataCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (seller_dataArgs | seller_dataFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'order_data' ? Array < order_dataGetPayload<S['select'][P]>>  :
        P extends '_count' ? Seller_dataCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof seller_data ? seller_data[P] : never
  } 
      : seller_data


  type seller_dataCountArgs = 
    Omit<seller_dataFindManyArgs, 'select' | 'include'> & {
      select?: Seller_dataCountAggregateInputType | true
    }

  export interface seller_dataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Seller_data that matches the filter.
     * @param {seller_dataFindUniqueArgs} args - Arguments to find a Seller_data
     * @example
     * // Get one Seller_data
     * const seller_data = await prisma.seller_data.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends seller_dataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, seller_dataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'seller_data'> extends True ? Prisma__seller_dataClient<seller_dataGetPayload<T>> : Prisma__seller_dataClient<seller_dataGetPayload<T> | null, null>

    /**
     * Find one Seller_data that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {seller_dataFindUniqueOrThrowArgs} args - Arguments to find a Seller_data
     * @example
     * // Get one Seller_data
     * const seller_data = await prisma.seller_data.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends seller_dataFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, seller_dataFindUniqueOrThrowArgs>
    ): Prisma__seller_dataClient<seller_dataGetPayload<T>>

    /**
     * Find the first Seller_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seller_dataFindFirstArgs} args - Arguments to find a Seller_data
     * @example
     * // Get one Seller_data
     * const seller_data = await prisma.seller_data.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends seller_dataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, seller_dataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'seller_data'> extends True ? Prisma__seller_dataClient<seller_dataGetPayload<T>> : Prisma__seller_dataClient<seller_dataGetPayload<T> | null, null>

    /**
     * Find the first Seller_data that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seller_dataFindFirstOrThrowArgs} args - Arguments to find a Seller_data
     * @example
     * // Get one Seller_data
     * const seller_data = await prisma.seller_data.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends seller_dataFindFirstOrThrowArgs>(
      args?: SelectSubset<T, seller_dataFindFirstOrThrowArgs>
    ): Prisma__seller_dataClient<seller_dataGetPayload<T>>

    /**
     * Find zero or more Seller_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seller_dataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seller_data
     * const seller_data = await prisma.seller_data.findMany()
     * 
     * // Get first 10 Seller_data
     * const seller_data = await prisma.seller_data.findMany({ take: 10 })
     * 
     * // Only select the `brand_id`
     * const seller_dataWithBrand_idOnly = await prisma.seller_data.findMany({ select: { brand_id: true } })
     * 
    **/
    findMany<T extends seller_dataFindManyArgs>(
      args?: SelectSubset<T, seller_dataFindManyArgs>
    ): Prisma.PrismaPromise<Array<seller_dataGetPayload<T>>>

    /**
     * Create a Seller_data.
     * @param {seller_dataCreateArgs} args - Arguments to create a Seller_data.
     * @example
     * // Create one Seller_data
     * const Seller_data = await prisma.seller_data.create({
     *   data: {
     *     // ... data to create a Seller_data
     *   }
     * })
     * 
    **/
    create<T extends seller_dataCreateArgs>(
      args: SelectSubset<T, seller_dataCreateArgs>
    ): Prisma__seller_dataClient<seller_dataGetPayload<T>>

    /**
     * Create many Seller_data.
     *     @param {seller_dataCreateManyArgs} args - Arguments to create many Seller_data.
     *     @example
     *     // Create many Seller_data
     *     const seller_data = await prisma.seller_data.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends seller_dataCreateManyArgs>(
      args?: SelectSubset<T, seller_dataCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Seller_data.
     * @param {seller_dataDeleteArgs} args - Arguments to delete one Seller_data.
     * @example
     * // Delete one Seller_data
     * const Seller_data = await prisma.seller_data.delete({
     *   where: {
     *     // ... filter to delete one Seller_data
     *   }
     * })
     * 
    **/
    delete<T extends seller_dataDeleteArgs>(
      args: SelectSubset<T, seller_dataDeleteArgs>
    ): Prisma__seller_dataClient<seller_dataGetPayload<T>>

    /**
     * Update one Seller_data.
     * @param {seller_dataUpdateArgs} args - Arguments to update one Seller_data.
     * @example
     * // Update one Seller_data
     * const seller_data = await prisma.seller_data.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends seller_dataUpdateArgs>(
      args: SelectSubset<T, seller_dataUpdateArgs>
    ): Prisma__seller_dataClient<seller_dataGetPayload<T>>

    /**
     * Delete zero or more Seller_data.
     * @param {seller_dataDeleteManyArgs} args - Arguments to filter Seller_data to delete.
     * @example
     * // Delete a few Seller_data
     * const { count } = await prisma.seller_data.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends seller_dataDeleteManyArgs>(
      args?: SelectSubset<T, seller_dataDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seller_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seller_dataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seller_data
     * const seller_data = await prisma.seller_data.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends seller_dataUpdateManyArgs>(
      args: SelectSubset<T, seller_dataUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Seller_data.
     * @param {seller_dataUpsertArgs} args - Arguments to update or create a Seller_data.
     * @example
     * // Update or create a Seller_data
     * const seller_data = await prisma.seller_data.upsert({
     *   create: {
     *     // ... data to create a Seller_data
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seller_data we want to update
     *   }
     * })
    **/
    upsert<T extends seller_dataUpsertArgs>(
      args: SelectSubset<T, seller_dataUpsertArgs>
    ): Prisma__seller_dataClient<seller_dataGetPayload<T>>

    /**
     * Count the number of Seller_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seller_dataCountArgs} args - Arguments to filter Seller_data to count.
     * @example
     * // Count the number of Seller_data
     * const count = await prisma.seller_data.count({
     *   where: {
     *     // ... the filter for the Seller_data we want to count
     *   }
     * })
    **/
    count<T extends seller_dataCountArgs>(
      args?: Subset<T, seller_dataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Seller_dataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seller_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Seller_dataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Seller_dataAggregateArgs>(args: Subset<T, Seller_dataAggregateArgs>): Prisma.PrismaPromise<GetSeller_dataAggregateType<T>>

    /**
     * Group by Seller_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Seller_dataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Seller_dataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Seller_dataGroupByArgs['orderBy'] }
        : { orderBy?: Seller_dataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Seller_dataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeller_dataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for seller_data.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__seller_dataClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    order_data<T extends seller_data$order_dataArgs= {}>(args?: Subset<T, seller_data$order_dataArgs>): Prisma.PrismaPromise<Array<order_dataGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * seller_data base type for findUnique actions
   */
  export type seller_dataFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the seller_data
     */
    select?: seller_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seller_dataInclude | null
    /**
     * Filter, which seller_data to fetch.
     */
    where: seller_dataWhereUniqueInput
  }

  /**
   * seller_data findUnique
   */
  export interface seller_dataFindUniqueArgs extends seller_dataFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * seller_data findUniqueOrThrow
   */
  export type seller_dataFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the seller_data
     */
    select?: seller_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seller_dataInclude | null
    /**
     * Filter, which seller_data to fetch.
     */
    where: seller_dataWhereUniqueInput
  }


  /**
   * seller_data base type for findFirst actions
   */
  export type seller_dataFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the seller_data
     */
    select?: seller_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seller_dataInclude | null
    /**
     * Filter, which seller_data to fetch.
     */
    where?: seller_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seller_data to fetch.
     */
    orderBy?: Enumerable<seller_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for seller_data.
     */
    cursor?: seller_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seller_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seller_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of seller_data.
     */
    distinct?: Enumerable<Seller_dataScalarFieldEnum>
  }

  /**
   * seller_data findFirst
   */
  export interface seller_dataFindFirstArgs extends seller_dataFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * seller_data findFirstOrThrow
   */
  export type seller_dataFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the seller_data
     */
    select?: seller_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seller_dataInclude | null
    /**
     * Filter, which seller_data to fetch.
     */
    where?: seller_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seller_data to fetch.
     */
    orderBy?: Enumerable<seller_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for seller_data.
     */
    cursor?: seller_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seller_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seller_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of seller_data.
     */
    distinct?: Enumerable<Seller_dataScalarFieldEnum>
  }


  /**
   * seller_data findMany
   */
  export type seller_dataFindManyArgs = {
    /**
     * Select specific fields to fetch from the seller_data
     */
    select?: seller_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seller_dataInclude | null
    /**
     * Filter, which seller_data to fetch.
     */
    where?: seller_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seller_data to fetch.
     */
    orderBy?: Enumerable<seller_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing seller_data.
     */
    cursor?: seller_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seller_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seller_data.
     */
    skip?: number
    distinct?: Enumerable<Seller_dataScalarFieldEnum>
  }


  /**
   * seller_data create
   */
  export type seller_dataCreateArgs = {
    /**
     * Select specific fields to fetch from the seller_data
     */
    select?: seller_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seller_dataInclude | null
    /**
     * The data needed to create a seller_data.
     */
    data: XOR<seller_dataCreateInput, seller_dataUncheckedCreateInput>
  }


  /**
   * seller_data createMany
   */
  export type seller_dataCreateManyArgs = {
    /**
     * The data used to create many seller_data.
     */
    data: Enumerable<seller_dataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * seller_data update
   */
  export type seller_dataUpdateArgs = {
    /**
     * Select specific fields to fetch from the seller_data
     */
    select?: seller_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seller_dataInclude | null
    /**
     * The data needed to update a seller_data.
     */
    data: XOR<seller_dataUpdateInput, seller_dataUncheckedUpdateInput>
    /**
     * Choose, which seller_data to update.
     */
    where: seller_dataWhereUniqueInput
  }


  /**
   * seller_data updateMany
   */
  export type seller_dataUpdateManyArgs = {
    /**
     * The data used to update seller_data.
     */
    data: XOR<seller_dataUpdateManyMutationInput, seller_dataUncheckedUpdateManyInput>
    /**
     * Filter which seller_data to update
     */
    where?: seller_dataWhereInput
  }


  /**
   * seller_data upsert
   */
  export type seller_dataUpsertArgs = {
    /**
     * Select specific fields to fetch from the seller_data
     */
    select?: seller_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seller_dataInclude | null
    /**
     * The filter to search for the seller_data to update in case it exists.
     */
    where: seller_dataWhereUniqueInput
    /**
     * In case the seller_data found by the `where` argument doesn't exist, create a new seller_data with this data.
     */
    create: XOR<seller_dataCreateInput, seller_dataUncheckedCreateInput>
    /**
     * In case the seller_data was found with the provided `where` argument, update it with this data.
     */
    update: XOR<seller_dataUpdateInput, seller_dataUncheckedUpdateInput>
  }


  /**
   * seller_data delete
   */
  export type seller_dataDeleteArgs = {
    /**
     * Select specific fields to fetch from the seller_data
     */
    select?: seller_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seller_dataInclude | null
    /**
     * Filter which seller_data to delete.
     */
    where: seller_dataWhereUniqueInput
  }


  /**
   * seller_data deleteMany
   */
  export type seller_dataDeleteManyArgs = {
    /**
     * Filter which seller_data to delete
     */
    where?: seller_dataWhereInput
  }


  /**
   * seller_data.order_data
   */
  export type seller_data$order_dataArgs = {
    /**
     * Select specific fields to fetch from the order_data
     */
    select?: order_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: order_dataInclude | null
    where?: order_dataWhereInput
    orderBy?: Enumerable<order_dataOrderByWithRelationInput>
    cursor?: order_dataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Order_dataScalarFieldEnum>
  }


  /**
   * seller_data without action
   */
  export type seller_dataArgs = {
    /**
     * Select specific fields to fetch from the seller_data
     */
    select?: seller_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seller_dataInclude | null
  }



  /**
   * Model shipper_data
   */


  export type AggregateShipper_data = {
    _count: Shipper_dataCountAggregateOutputType | null
    _avg: Shipper_dataAvgAggregateOutputType | null
    _sum: Shipper_dataSumAggregateOutputType | null
    _min: Shipper_dataMinAggregateOutputType | null
    _max: Shipper_dataMaxAggregateOutputType | null
  }

  export type Shipper_dataAvgAggregateOutputType = {
    shipper_id: number | null
  }

  export type Shipper_dataSumAggregateOutputType = {
    shipper_id: number | null
  }

  export type Shipper_dataMinAggregateOutputType = {
    shipper_id: number | null
    shipper_company: string | null
    service_type: string | null
  }

  export type Shipper_dataMaxAggregateOutputType = {
    shipper_id: number | null
    shipper_company: string | null
    service_type: string | null
  }

  export type Shipper_dataCountAggregateOutputType = {
    shipper_id: number
    shipper_company: number
    service_type: number
    _all: number
  }


  export type Shipper_dataAvgAggregateInputType = {
    shipper_id?: true
  }

  export type Shipper_dataSumAggregateInputType = {
    shipper_id?: true
  }

  export type Shipper_dataMinAggregateInputType = {
    shipper_id?: true
    shipper_company?: true
    service_type?: true
  }

  export type Shipper_dataMaxAggregateInputType = {
    shipper_id?: true
    shipper_company?: true
    service_type?: true
  }

  export type Shipper_dataCountAggregateInputType = {
    shipper_id?: true
    shipper_company?: true
    service_type?: true
    _all?: true
  }

  export type Shipper_dataAggregateArgs = {
    /**
     * Filter which shipper_data to aggregate.
     */
    where?: shipper_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shipper_data to fetch.
     */
    orderBy?: Enumerable<shipper_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: shipper_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shipper_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shipper_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned shipper_data
    **/
    _count?: true | Shipper_dataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Shipper_dataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Shipper_dataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Shipper_dataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Shipper_dataMaxAggregateInputType
  }

  export type GetShipper_dataAggregateType<T extends Shipper_dataAggregateArgs> = {
        [P in keyof T & keyof AggregateShipper_data]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShipper_data[P]>
      : GetScalarType<T[P], AggregateShipper_data[P]>
  }




  export type Shipper_dataGroupByArgs = {
    where?: shipper_dataWhereInput
    orderBy?: Enumerable<shipper_dataOrderByWithAggregationInput>
    by: Shipper_dataScalarFieldEnum[]
    having?: shipper_dataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Shipper_dataCountAggregateInputType | true
    _avg?: Shipper_dataAvgAggregateInputType
    _sum?: Shipper_dataSumAggregateInputType
    _min?: Shipper_dataMinAggregateInputType
    _max?: Shipper_dataMaxAggregateInputType
  }


  export type Shipper_dataGroupByOutputType = {
    shipper_id: number
    shipper_company: string | null
    service_type: string | null
    _count: Shipper_dataCountAggregateOutputType | null
    _avg: Shipper_dataAvgAggregateOutputType | null
    _sum: Shipper_dataSumAggregateOutputType | null
    _min: Shipper_dataMinAggregateOutputType | null
    _max: Shipper_dataMaxAggregateOutputType | null
  }

  type GetShipper_dataGroupByPayload<T extends Shipper_dataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Shipper_dataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Shipper_dataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Shipper_dataGroupByOutputType[P]>
            : GetScalarType<T[P], Shipper_dataGroupByOutputType[P]>
        }
      >
    >


  export type shipper_dataSelect = {
    shipper_id?: boolean
    shipper_company?: boolean
    service_type?: boolean
    order_data?: boolean | shipper_data$order_dataArgs
    _count?: boolean | Shipper_dataCountOutputTypeArgs
  }


  export type shipper_dataInclude = {
    order_data?: boolean | shipper_data$order_dataArgs
    _count?: boolean | Shipper_dataCountOutputTypeArgs
  }

  export type shipper_dataGetPayload<S extends boolean | null | undefined | shipper_dataArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? shipper_data :
    S extends undefined ? never :
    S extends { include: any } & (shipper_dataArgs | shipper_dataFindManyArgs)
    ? shipper_data  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'order_data' ? Array < order_dataGetPayload<S['include'][P]>>  :
        P extends '_count' ? Shipper_dataCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (shipper_dataArgs | shipper_dataFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'order_data' ? Array < order_dataGetPayload<S['select'][P]>>  :
        P extends '_count' ? Shipper_dataCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof shipper_data ? shipper_data[P] : never
  } 
      : shipper_data


  type shipper_dataCountArgs = 
    Omit<shipper_dataFindManyArgs, 'select' | 'include'> & {
      select?: Shipper_dataCountAggregateInputType | true
    }

  export interface shipper_dataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Shipper_data that matches the filter.
     * @param {shipper_dataFindUniqueArgs} args - Arguments to find a Shipper_data
     * @example
     * // Get one Shipper_data
     * const shipper_data = await prisma.shipper_data.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends shipper_dataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, shipper_dataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'shipper_data'> extends True ? Prisma__shipper_dataClient<shipper_dataGetPayload<T>> : Prisma__shipper_dataClient<shipper_dataGetPayload<T> | null, null>

    /**
     * Find one Shipper_data that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {shipper_dataFindUniqueOrThrowArgs} args - Arguments to find a Shipper_data
     * @example
     * // Get one Shipper_data
     * const shipper_data = await prisma.shipper_data.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends shipper_dataFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, shipper_dataFindUniqueOrThrowArgs>
    ): Prisma__shipper_dataClient<shipper_dataGetPayload<T>>

    /**
     * Find the first Shipper_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shipper_dataFindFirstArgs} args - Arguments to find a Shipper_data
     * @example
     * // Get one Shipper_data
     * const shipper_data = await prisma.shipper_data.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends shipper_dataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, shipper_dataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'shipper_data'> extends True ? Prisma__shipper_dataClient<shipper_dataGetPayload<T>> : Prisma__shipper_dataClient<shipper_dataGetPayload<T> | null, null>

    /**
     * Find the first Shipper_data that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shipper_dataFindFirstOrThrowArgs} args - Arguments to find a Shipper_data
     * @example
     * // Get one Shipper_data
     * const shipper_data = await prisma.shipper_data.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends shipper_dataFindFirstOrThrowArgs>(
      args?: SelectSubset<T, shipper_dataFindFirstOrThrowArgs>
    ): Prisma__shipper_dataClient<shipper_dataGetPayload<T>>

    /**
     * Find zero or more Shipper_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shipper_dataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shipper_data
     * const shipper_data = await prisma.shipper_data.findMany()
     * 
     * // Get first 10 Shipper_data
     * const shipper_data = await prisma.shipper_data.findMany({ take: 10 })
     * 
     * // Only select the `shipper_id`
     * const shipper_dataWithShipper_idOnly = await prisma.shipper_data.findMany({ select: { shipper_id: true } })
     * 
    **/
    findMany<T extends shipper_dataFindManyArgs>(
      args?: SelectSubset<T, shipper_dataFindManyArgs>
    ): Prisma.PrismaPromise<Array<shipper_dataGetPayload<T>>>

    /**
     * Create a Shipper_data.
     * @param {shipper_dataCreateArgs} args - Arguments to create a Shipper_data.
     * @example
     * // Create one Shipper_data
     * const Shipper_data = await prisma.shipper_data.create({
     *   data: {
     *     // ... data to create a Shipper_data
     *   }
     * })
     * 
    **/
    create<T extends shipper_dataCreateArgs>(
      args: SelectSubset<T, shipper_dataCreateArgs>
    ): Prisma__shipper_dataClient<shipper_dataGetPayload<T>>

    /**
     * Create many Shipper_data.
     *     @param {shipper_dataCreateManyArgs} args - Arguments to create many Shipper_data.
     *     @example
     *     // Create many Shipper_data
     *     const shipper_data = await prisma.shipper_data.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends shipper_dataCreateManyArgs>(
      args?: SelectSubset<T, shipper_dataCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Shipper_data.
     * @param {shipper_dataDeleteArgs} args - Arguments to delete one Shipper_data.
     * @example
     * // Delete one Shipper_data
     * const Shipper_data = await prisma.shipper_data.delete({
     *   where: {
     *     // ... filter to delete one Shipper_data
     *   }
     * })
     * 
    **/
    delete<T extends shipper_dataDeleteArgs>(
      args: SelectSubset<T, shipper_dataDeleteArgs>
    ): Prisma__shipper_dataClient<shipper_dataGetPayload<T>>

    /**
     * Update one Shipper_data.
     * @param {shipper_dataUpdateArgs} args - Arguments to update one Shipper_data.
     * @example
     * // Update one Shipper_data
     * const shipper_data = await prisma.shipper_data.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends shipper_dataUpdateArgs>(
      args: SelectSubset<T, shipper_dataUpdateArgs>
    ): Prisma__shipper_dataClient<shipper_dataGetPayload<T>>

    /**
     * Delete zero or more Shipper_data.
     * @param {shipper_dataDeleteManyArgs} args - Arguments to filter Shipper_data to delete.
     * @example
     * // Delete a few Shipper_data
     * const { count } = await prisma.shipper_data.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends shipper_dataDeleteManyArgs>(
      args?: SelectSubset<T, shipper_dataDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shipper_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shipper_dataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shipper_data
     * const shipper_data = await prisma.shipper_data.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends shipper_dataUpdateManyArgs>(
      args: SelectSubset<T, shipper_dataUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Shipper_data.
     * @param {shipper_dataUpsertArgs} args - Arguments to update or create a Shipper_data.
     * @example
     * // Update or create a Shipper_data
     * const shipper_data = await prisma.shipper_data.upsert({
     *   create: {
     *     // ... data to create a Shipper_data
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shipper_data we want to update
     *   }
     * })
    **/
    upsert<T extends shipper_dataUpsertArgs>(
      args: SelectSubset<T, shipper_dataUpsertArgs>
    ): Prisma__shipper_dataClient<shipper_dataGetPayload<T>>

    /**
     * Count the number of Shipper_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shipper_dataCountArgs} args - Arguments to filter Shipper_data to count.
     * @example
     * // Count the number of Shipper_data
     * const count = await prisma.shipper_data.count({
     *   where: {
     *     // ... the filter for the Shipper_data we want to count
     *   }
     * })
    **/
    count<T extends shipper_dataCountArgs>(
      args?: Subset<T, shipper_dataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Shipper_dataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shipper_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shipper_dataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Shipper_dataAggregateArgs>(args: Subset<T, Shipper_dataAggregateArgs>): Prisma.PrismaPromise<GetShipper_dataAggregateType<T>>

    /**
     * Group by Shipper_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shipper_dataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Shipper_dataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Shipper_dataGroupByArgs['orderBy'] }
        : { orderBy?: Shipper_dataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Shipper_dataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShipper_dataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for shipper_data.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__shipper_dataClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    order_data<T extends shipper_data$order_dataArgs= {}>(args?: Subset<T, shipper_data$order_dataArgs>): Prisma.PrismaPromise<Array<order_dataGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * shipper_data base type for findUnique actions
   */
  export type shipper_dataFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the shipper_data
     */
    select?: shipper_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shipper_dataInclude | null
    /**
     * Filter, which shipper_data to fetch.
     */
    where: shipper_dataWhereUniqueInput
  }

  /**
   * shipper_data findUnique
   */
  export interface shipper_dataFindUniqueArgs extends shipper_dataFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * shipper_data findUniqueOrThrow
   */
  export type shipper_dataFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the shipper_data
     */
    select?: shipper_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shipper_dataInclude | null
    /**
     * Filter, which shipper_data to fetch.
     */
    where: shipper_dataWhereUniqueInput
  }


  /**
   * shipper_data base type for findFirst actions
   */
  export type shipper_dataFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the shipper_data
     */
    select?: shipper_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shipper_dataInclude | null
    /**
     * Filter, which shipper_data to fetch.
     */
    where?: shipper_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shipper_data to fetch.
     */
    orderBy?: Enumerable<shipper_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for shipper_data.
     */
    cursor?: shipper_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shipper_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shipper_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of shipper_data.
     */
    distinct?: Enumerable<Shipper_dataScalarFieldEnum>
  }

  /**
   * shipper_data findFirst
   */
  export interface shipper_dataFindFirstArgs extends shipper_dataFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * shipper_data findFirstOrThrow
   */
  export type shipper_dataFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the shipper_data
     */
    select?: shipper_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shipper_dataInclude | null
    /**
     * Filter, which shipper_data to fetch.
     */
    where?: shipper_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shipper_data to fetch.
     */
    orderBy?: Enumerable<shipper_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for shipper_data.
     */
    cursor?: shipper_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shipper_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shipper_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of shipper_data.
     */
    distinct?: Enumerable<Shipper_dataScalarFieldEnum>
  }


  /**
   * shipper_data findMany
   */
  export type shipper_dataFindManyArgs = {
    /**
     * Select specific fields to fetch from the shipper_data
     */
    select?: shipper_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shipper_dataInclude | null
    /**
     * Filter, which shipper_data to fetch.
     */
    where?: shipper_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shipper_data to fetch.
     */
    orderBy?: Enumerable<shipper_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing shipper_data.
     */
    cursor?: shipper_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shipper_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shipper_data.
     */
    skip?: number
    distinct?: Enumerable<Shipper_dataScalarFieldEnum>
  }


  /**
   * shipper_data create
   */
  export type shipper_dataCreateArgs = {
    /**
     * Select specific fields to fetch from the shipper_data
     */
    select?: shipper_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shipper_dataInclude | null
    /**
     * The data needed to create a shipper_data.
     */
    data: XOR<shipper_dataCreateInput, shipper_dataUncheckedCreateInput>
  }


  /**
   * shipper_data createMany
   */
  export type shipper_dataCreateManyArgs = {
    /**
     * The data used to create many shipper_data.
     */
    data: Enumerable<shipper_dataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * shipper_data update
   */
  export type shipper_dataUpdateArgs = {
    /**
     * Select specific fields to fetch from the shipper_data
     */
    select?: shipper_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shipper_dataInclude | null
    /**
     * The data needed to update a shipper_data.
     */
    data: XOR<shipper_dataUpdateInput, shipper_dataUncheckedUpdateInput>
    /**
     * Choose, which shipper_data to update.
     */
    where: shipper_dataWhereUniqueInput
  }


  /**
   * shipper_data updateMany
   */
  export type shipper_dataUpdateManyArgs = {
    /**
     * The data used to update shipper_data.
     */
    data: XOR<shipper_dataUpdateManyMutationInput, shipper_dataUncheckedUpdateManyInput>
    /**
     * Filter which shipper_data to update
     */
    where?: shipper_dataWhereInput
  }


  /**
   * shipper_data upsert
   */
  export type shipper_dataUpsertArgs = {
    /**
     * Select specific fields to fetch from the shipper_data
     */
    select?: shipper_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shipper_dataInclude | null
    /**
     * The filter to search for the shipper_data to update in case it exists.
     */
    where: shipper_dataWhereUniqueInput
    /**
     * In case the shipper_data found by the `where` argument doesn't exist, create a new shipper_data with this data.
     */
    create: XOR<shipper_dataCreateInput, shipper_dataUncheckedCreateInput>
    /**
     * In case the shipper_data was found with the provided `where` argument, update it with this data.
     */
    update: XOR<shipper_dataUpdateInput, shipper_dataUncheckedUpdateInput>
  }


  /**
   * shipper_data delete
   */
  export type shipper_dataDeleteArgs = {
    /**
     * Select specific fields to fetch from the shipper_data
     */
    select?: shipper_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shipper_dataInclude | null
    /**
     * Filter which shipper_data to delete.
     */
    where: shipper_dataWhereUniqueInput
  }


  /**
   * shipper_data deleteMany
   */
  export type shipper_dataDeleteManyArgs = {
    /**
     * Filter which shipper_data to delete
     */
    where?: shipper_dataWhereInput
  }


  /**
   * shipper_data.order_data
   */
  export type shipper_data$order_dataArgs = {
    /**
     * Select specific fields to fetch from the order_data
     */
    select?: order_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: order_dataInclude | null
    where?: order_dataWhereInput
    orderBy?: Enumerable<order_dataOrderByWithRelationInput>
    cursor?: order_dataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Order_dataScalarFieldEnum>
  }


  /**
   * shipper_data without action
   */
  export type shipper_dataArgs = {
    /**
     * Select specific fields to fetch from the shipper_data
     */
    select?: shipper_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shipper_dataInclude | null
  }



  /**
   * Model user_address
   */


  export type AggregateUser_address = {
    _count: User_addressCountAggregateOutputType | null
    _avg: User_addressAvgAggregateOutputType | null
    _sum: User_addressSumAggregateOutputType | null
    _min: User_addressMinAggregateOutputType | null
    _max: User_addressMaxAggregateOutputType | null
  }

  export type User_addressAvgAggregateOutputType = {
    user_id: number | null
  }

  export type User_addressSumAggregateOutputType = {
    user_id: number | null
  }

  export type User_addressMinAggregateOutputType = {
    user_id: number | null
    recipient_firstName: string | null
    recipient_lastName: string | null
    recipient_phone: string | null
    recipient_address: string | null
    recipient_postal: string | null
    recipient_country: string | null
  }

  export type User_addressMaxAggregateOutputType = {
    user_id: number | null
    recipient_firstName: string | null
    recipient_lastName: string | null
    recipient_phone: string | null
    recipient_address: string | null
    recipient_postal: string | null
    recipient_country: string | null
  }

  export type User_addressCountAggregateOutputType = {
    user_id: number
    recipient_firstName: number
    recipient_lastName: number
    recipient_phone: number
    recipient_address: number
    recipient_postal: number
    recipient_country: number
    _all: number
  }


  export type User_addressAvgAggregateInputType = {
    user_id?: true
  }

  export type User_addressSumAggregateInputType = {
    user_id?: true
  }

  export type User_addressMinAggregateInputType = {
    user_id?: true
    recipient_firstName?: true
    recipient_lastName?: true
    recipient_phone?: true
    recipient_address?: true
    recipient_postal?: true
    recipient_country?: true
  }

  export type User_addressMaxAggregateInputType = {
    user_id?: true
    recipient_firstName?: true
    recipient_lastName?: true
    recipient_phone?: true
    recipient_address?: true
    recipient_postal?: true
    recipient_country?: true
  }

  export type User_addressCountAggregateInputType = {
    user_id?: true
    recipient_firstName?: true
    recipient_lastName?: true
    recipient_phone?: true
    recipient_address?: true
    recipient_postal?: true
    recipient_country?: true
    _all?: true
  }

  export type User_addressAggregateArgs = {
    /**
     * Filter which user_address to aggregate.
     */
    where?: user_addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_addresses to fetch.
     */
    orderBy?: Enumerable<user_addressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_addresses
    **/
    _count?: true | User_addressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_addressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_addressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_addressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_addressMaxAggregateInputType
  }

  export type GetUser_addressAggregateType<T extends User_addressAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_address]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_address[P]>
      : GetScalarType<T[P], AggregateUser_address[P]>
  }




  export type User_addressGroupByArgs = {
    where?: user_addressWhereInput
    orderBy?: Enumerable<user_addressOrderByWithAggregationInput>
    by: User_addressScalarFieldEnum[]
    having?: user_addressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_addressCountAggregateInputType | true
    _avg?: User_addressAvgAggregateInputType
    _sum?: User_addressSumAggregateInputType
    _min?: User_addressMinAggregateInputType
    _max?: User_addressMaxAggregateInputType
  }


  export type User_addressGroupByOutputType = {
    user_id: number
    recipient_firstName: string | null
    recipient_lastName: string | null
    recipient_phone: string | null
    recipient_address: string | null
    recipient_postal: string | null
    recipient_country: string | null
    _count: User_addressCountAggregateOutputType | null
    _avg: User_addressAvgAggregateOutputType | null
    _sum: User_addressSumAggregateOutputType | null
    _min: User_addressMinAggregateOutputType | null
    _max: User_addressMaxAggregateOutputType | null
  }

  type GetUser_addressGroupByPayload<T extends User_addressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<User_addressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_addressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_addressGroupByOutputType[P]>
            : GetScalarType<T[P], User_addressGroupByOutputType[P]>
        }
      >
    >


  export type user_addressSelect = {
    user_id?: boolean
    recipient_firstName?: boolean
    recipient_lastName?: boolean
    recipient_phone?: boolean
    recipient_address?: boolean
    recipient_postal?: boolean
    recipient_country?: boolean
    user_data?: boolean | user_dataArgs
  }


  export type user_addressInclude = {
    user_data?: boolean | user_dataArgs
  }

  export type user_addressGetPayload<S extends boolean | null | undefined | user_addressArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? user_address :
    S extends undefined ? never :
    S extends { include: any } & (user_addressArgs | user_addressFindManyArgs)
    ? user_address  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user_data' ? user_dataGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (user_addressArgs | user_addressFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user_data' ? user_dataGetPayload<S['select'][P]> :  P extends keyof user_address ? user_address[P] : never
  } 
      : user_address


  type user_addressCountArgs = 
    Omit<user_addressFindManyArgs, 'select' | 'include'> & {
      select?: User_addressCountAggregateInputType | true
    }

  export interface user_addressDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User_address that matches the filter.
     * @param {user_addressFindUniqueArgs} args - Arguments to find a User_address
     * @example
     * // Get one User_address
     * const user_address = await prisma.user_address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_addressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, user_addressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user_address'> extends True ? Prisma__user_addressClient<user_addressGetPayload<T>> : Prisma__user_addressClient<user_addressGetPayload<T> | null, null>

    /**
     * Find one User_address that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {user_addressFindUniqueOrThrowArgs} args - Arguments to find a User_address
     * @example
     * // Get one User_address
     * const user_address = await prisma.user_address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_addressFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, user_addressFindUniqueOrThrowArgs>
    ): Prisma__user_addressClient<user_addressGetPayload<T>>

    /**
     * Find the first User_address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_addressFindFirstArgs} args - Arguments to find a User_address
     * @example
     * // Get one User_address
     * const user_address = await prisma.user_address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_addressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, user_addressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user_address'> extends True ? Prisma__user_addressClient<user_addressGetPayload<T>> : Prisma__user_addressClient<user_addressGetPayload<T> | null, null>

    /**
     * Find the first User_address that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_addressFindFirstOrThrowArgs} args - Arguments to find a User_address
     * @example
     * // Get one User_address
     * const user_address = await prisma.user_address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_addressFindFirstOrThrowArgs>(
      args?: SelectSubset<T, user_addressFindFirstOrThrowArgs>
    ): Prisma__user_addressClient<user_addressGetPayload<T>>

    /**
     * Find zero or more User_addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_addressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_addresses
     * const user_addresses = await prisma.user_address.findMany()
     * 
     * // Get first 10 User_addresses
     * const user_addresses = await prisma.user_address.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const user_addressWithUser_idOnly = await prisma.user_address.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends user_addressFindManyArgs>(
      args?: SelectSubset<T, user_addressFindManyArgs>
    ): Prisma.PrismaPromise<Array<user_addressGetPayload<T>>>

    /**
     * Create a User_address.
     * @param {user_addressCreateArgs} args - Arguments to create a User_address.
     * @example
     * // Create one User_address
     * const User_address = await prisma.user_address.create({
     *   data: {
     *     // ... data to create a User_address
     *   }
     * })
     * 
    **/
    create<T extends user_addressCreateArgs>(
      args: SelectSubset<T, user_addressCreateArgs>
    ): Prisma__user_addressClient<user_addressGetPayload<T>>

    /**
     * Create many User_addresses.
     *     @param {user_addressCreateManyArgs} args - Arguments to create many User_addresses.
     *     @example
     *     // Create many User_addresses
     *     const user_address = await prisma.user_address.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_addressCreateManyArgs>(
      args?: SelectSubset<T, user_addressCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User_address.
     * @param {user_addressDeleteArgs} args - Arguments to delete one User_address.
     * @example
     * // Delete one User_address
     * const User_address = await prisma.user_address.delete({
     *   where: {
     *     // ... filter to delete one User_address
     *   }
     * })
     * 
    **/
    delete<T extends user_addressDeleteArgs>(
      args: SelectSubset<T, user_addressDeleteArgs>
    ): Prisma__user_addressClient<user_addressGetPayload<T>>

    /**
     * Update one User_address.
     * @param {user_addressUpdateArgs} args - Arguments to update one User_address.
     * @example
     * // Update one User_address
     * const user_address = await prisma.user_address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_addressUpdateArgs>(
      args: SelectSubset<T, user_addressUpdateArgs>
    ): Prisma__user_addressClient<user_addressGetPayload<T>>

    /**
     * Delete zero or more User_addresses.
     * @param {user_addressDeleteManyArgs} args - Arguments to filter User_addresses to delete.
     * @example
     * // Delete a few User_addresses
     * const { count } = await prisma.user_address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_addressDeleteManyArgs>(
      args?: SelectSubset<T, user_addressDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_addressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_addresses
     * const user_address = await prisma.user_address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_addressUpdateManyArgs>(
      args: SelectSubset<T, user_addressUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_address.
     * @param {user_addressUpsertArgs} args - Arguments to update or create a User_address.
     * @example
     * // Update or create a User_address
     * const user_address = await prisma.user_address.upsert({
     *   create: {
     *     // ... data to create a User_address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_address we want to update
     *   }
     * })
    **/
    upsert<T extends user_addressUpsertArgs>(
      args: SelectSubset<T, user_addressUpsertArgs>
    ): Prisma__user_addressClient<user_addressGetPayload<T>>

    /**
     * Count the number of User_addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_addressCountArgs} args - Arguments to filter User_addresses to count.
     * @example
     * // Count the number of User_addresses
     * const count = await prisma.user_address.count({
     *   where: {
     *     // ... the filter for the User_addresses we want to count
     *   }
     * })
    **/
    count<T extends user_addressCountArgs>(
      args?: Subset<T, user_addressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_addressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_addressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_addressAggregateArgs>(args: Subset<T, User_addressAggregateArgs>): Prisma.PrismaPromise<GetUser_addressAggregateType<T>>

    /**
     * Group by User_address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_addressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_addressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_addressGroupByArgs['orderBy'] }
        : { orderBy?: User_addressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_addressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_addressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user_address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_addressClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user_data<T extends user_dataArgs= {}>(args?: Subset<T, user_dataArgs>): Prisma__user_dataClient<user_dataGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user_address base type for findUnique actions
   */
  export type user_addressFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user_address
     */
    select?: user_addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_addressInclude | null
    /**
     * Filter, which user_address to fetch.
     */
    where: user_addressWhereUniqueInput
  }

  /**
   * user_address findUnique
   */
  export interface user_addressFindUniqueArgs extends user_addressFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_address findUniqueOrThrow
   */
  export type user_addressFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the user_address
     */
    select?: user_addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_addressInclude | null
    /**
     * Filter, which user_address to fetch.
     */
    where: user_addressWhereUniqueInput
  }


  /**
   * user_address base type for findFirst actions
   */
  export type user_addressFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user_address
     */
    select?: user_addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_addressInclude | null
    /**
     * Filter, which user_address to fetch.
     */
    where?: user_addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_addresses to fetch.
     */
    orderBy?: Enumerable<user_addressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_addresses.
     */
    cursor?: user_addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_addresses.
     */
    distinct?: Enumerable<User_addressScalarFieldEnum>
  }

  /**
   * user_address findFirst
   */
  export interface user_addressFindFirstArgs extends user_addressFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_address findFirstOrThrow
   */
  export type user_addressFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the user_address
     */
    select?: user_addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_addressInclude | null
    /**
     * Filter, which user_address to fetch.
     */
    where?: user_addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_addresses to fetch.
     */
    orderBy?: Enumerable<user_addressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_addresses.
     */
    cursor?: user_addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_addresses.
     */
    distinct?: Enumerable<User_addressScalarFieldEnum>
  }


  /**
   * user_address findMany
   */
  export type user_addressFindManyArgs = {
    /**
     * Select specific fields to fetch from the user_address
     */
    select?: user_addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_addressInclude | null
    /**
     * Filter, which user_addresses to fetch.
     */
    where?: user_addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_addresses to fetch.
     */
    orderBy?: Enumerable<user_addressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_addresses.
     */
    cursor?: user_addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_addresses.
     */
    skip?: number
    distinct?: Enumerable<User_addressScalarFieldEnum>
  }


  /**
   * user_address create
   */
  export type user_addressCreateArgs = {
    /**
     * Select specific fields to fetch from the user_address
     */
    select?: user_addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_addressInclude | null
    /**
     * The data needed to create a user_address.
     */
    data: XOR<user_addressCreateInput, user_addressUncheckedCreateInput>
  }


  /**
   * user_address createMany
   */
  export type user_addressCreateManyArgs = {
    /**
     * The data used to create many user_addresses.
     */
    data: Enumerable<user_addressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user_address update
   */
  export type user_addressUpdateArgs = {
    /**
     * Select specific fields to fetch from the user_address
     */
    select?: user_addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_addressInclude | null
    /**
     * The data needed to update a user_address.
     */
    data: XOR<user_addressUpdateInput, user_addressUncheckedUpdateInput>
    /**
     * Choose, which user_address to update.
     */
    where: user_addressWhereUniqueInput
  }


  /**
   * user_address updateMany
   */
  export type user_addressUpdateManyArgs = {
    /**
     * The data used to update user_addresses.
     */
    data: XOR<user_addressUpdateManyMutationInput, user_addressUncheckedUpdateManyInput>
    /**
     * Filter which user_addresses to update
     */
    where?: user_addressWhereInput
  }


  /**
   * user_address upsert
   */
  export type user_addressUpsertArgs = {
    /**
     * Select specific fields to fetch from the user_address
     */
    select?: user_addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_addressInclude | null
    /**
     * The filter to search for the user_address to update in case it exists.
     */
    where: user_addressWhereUniqueInput
    /**
     * In case the user_address found by the `where` argument doesn't exist, create a new user_address with this data.
     */
    create: XOR<user_addressCreateInput, user_addressUncheckedCreateInput>
    /**
     * In case the user_address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_addressUpdateInput, user_addressUncheckedUpdateInput>
  }


  /**
   * user_address delete
   */
  export type user_addressDeleteArgs = {
    /**
     * Select specific fields to fetch from the user_address
     */
    select?: user_addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_addressInclude | null
    /**
     * Filter which user_address to delete.
     */
    where: user_addressWhereUniqueInput
  }


  /**
   * user_address deleteMany
   */
  export type user_addressDeleteManyArgs = {
    /**
     * Filter which user_addresses to delete
     */
    where?: user_addressWhereInput
  }


  /**
   * user_address without action
   */
  export type user_addressArgs = {
    /**
     * Select specific fields to fetch from the user_address
     */
    select?: user_addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_addressInclude | null
  }



  /**
   * Model user_data
   */


  export type AggregateUser_data = {
    _count: User_dataCountAggregateOutputType | null
    _avg: User_dataAvgAggregateOutputType | null
    _sum: User_dataSumAggregateOutputType | null
    _min: User_dataMinAggregateOutputType | null
    _max: User_dataMaxAggregateOutputType | null
  }

  export type User_dataAvgAggregateOutputType = {
    user_id: number | null
  }

  export type User_dataSumAggregateOutputType = {
    user_id: number | null
  }

  export type User_dataMinAggregateOutputType = {
    user_id: number | null
    user_firstName: string | null
    user_email: string | null
    user_pass: string | null
    user_lastName: string | null
  }

  export type User_dataMaxAggregateOutputType = {
    user_id: number | null
    user_firstName: string | null
    user_email: string | null
    user_pass: string | null
    user_lastName: string | null
  }

  export type User_dataCountAggregateOutputType = {
    user_id: number
    user_firstName: number
    user_email: number
    user_pass: number
    user_lastName: number
    _all: number
  }


  export type User_dataAvgAggregateInputType = {
    user_id?: true
  }

  export type User_dataSumAggregateInputType = {
    user_id?: true
  }

  export type User_dataMinAggregateInputType = {
    user_id?: true
    user_firstName?: true
    user_email?: true
    user_pass?: true
    user_lastName?: true
  }

  export type User_dataMaxAggregateInputType = {
    user_id?: true
    user_firstName?: true
    user_email?: true
    user_pass?: true
    user_lastName?: true
  }

  export type User_dataCountAggregateInputType = {
    user_id?: true
    user_firstName?: true
    user_email?: true
    user_pass?: true
    user_lastName?: true
    _all?: true
  }

  export type User_dataAggregateArgs = {
    /**
     * Filter which user_data to aggregate.
     */
    where?: user_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_data to fetch.
     */
    orderBy?: Enumerable<user_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_data
    **/
    _count?: true | User_dataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_dataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_dataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_dataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_dataMaxAggregateInputType
  }

  export type GetUser_dataAggregateType<T extends User_dataAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_data]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_data[P]>
      : GetScalarType<T[P], AggregateUser_data[P]>
  }




  export type User_dataGroupByArgs = {
    where?: user_dataWhereInput
    orderBy?: Enumerable<user_dataOrderByWithAggregationInput>
    by: User_dataScalarFieldEnum[]
    having?: user_dataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_dataCountAggregateInputType | true
    _avg?: User_dataAvgAggregateInputType
    _sum?: User_dataSumAggregateInputType
    _min?: User_dataMinAggregateInputType
    _max?: User_dataMaxAggregateInputType
  }


  export type User_dataGroupByOutputType = {
    user_id: number
    user_firstName: string | null
    user_email: string | null
    user_pass: string | null
    user_lastName: string | null
    _count: User_dataCountAggregateOutputType | null
    _avg: User_dataAvgAggregateOutputType | null
    _sum: User_dataSumAggregateOutputType | null
    _min: User_dataMinAggregateOutputType | null
    _max: User_dataMaxAggregateOutputType | null
  }

  type GetUser_dataGroupByPayload<T extends User_dataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<User_dataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_dataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_dataGroupByOutputType[P]>
            : GetScalarType<T[P], User_dataGroupByOutputType[P]>
        }
      >
    >


  export type user_dataSelect = {
    user_id?: boolean
    user_firstName?: boolean
    user_email?: boolean
    user_pass?: boolean
    user_lastName?: boolean
    order_data?: boolean | user_data$order_dataArgs
    product_review?: boolean | user_data$product_reviewArgs
    user_address?: boolean | user_addressArgs
    _count?: boolean | User_dataCountOutputTypeArgs
  }


  export type user_dataInclude = {
    order_data?: boolean | user_data$order_dataArgs
    product_review?: boolean | user_data$product_reviewArgs
    user_address?: boolean | user_addressArgs
    _count?: boolean | User_dataCountOutputTypeArgs
  }

  export type user_dataGetPayload<S extends boolean | null | undefined | user_dataArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? user_data :
    S extends undefined ? never :
    S extends { include: any } & (user_dataArgs | user_dataFindManyArgs)
    ? user_data  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'order_data' ? Array < order_dataGetPayload<S['include'][P]>>  :
        P extends 'product_review' ? Array < product_reviewGetPayload<S['include'][P]>>  :
        P extends 'user_address' ? user_addressGetPayload<S['include'][P]> | null :
        P extends '_count' ? User_dataCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (user_dataArgs | user_dataFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'order_data' ? Array < order_dataGetPayload<S['select'][P]>>  :
        P extends 'product_review' ? Array < product_reviewGetPayload<S['select'][P]>>  :
        P extends 'user_address' ? user_addressGetPayload<S['select'][P]> | null :
        P extends '_count' ? User_dataCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof user_data ? user_data[P] : never
  } 
      : user_data


  type user_dataCountArgs = 
    Omit<user_dataFindManyArgs, 'select' | 'include'> & {
      select?: User_dataCountAggregateInputType | true
    }

  export interface user_dataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User_data that matches the filter.
     * @param {user_dataFindUniqueArgs} args - Arguments to find a User_data
     * @example
     * // Get one User_data
     * const user_data = await prisma.user_data.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_dataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, user_dataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user_data'> extends True ? Prisma__user_dataClient<user_dataGetPayload<T>> : Prisma__user_dataClient<user_dataGetPayload<T> | null, null>

    /**
     * Find one User_data that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {user_dataFindUniqueOrThrowArgs} args - Arguments to find a User_data
     * @example
     * // Get one User_data
     * const user_data = await prisma.user_data.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_dataFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, user_dataFindUniqueOrThrowArgs>
    ): Prisma__user_dataClient<user_dataGetPayload<T>>

    /**
     * Find the first User_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_dataFindFirstArgs} args - Arguments to find a User_data
     * @example
     * // Get one User_data
     * const user_data = await prisma.user_data.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_dataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, user_dataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user_data'> extends True ? Prisma__user_dataClient<user_dataGetPayload<T>> : Prisma__user_dataClient<user_dataGetPayload<T> | null, null>

    /**
     * Find the first User_data that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_dataFindFirstOrThrowArgs} args - Arguments to find a User_data
     * @example
     * // Get one User_data
     * const user_data = await prisma.user_data.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_dataFindFirstOrThrowArgs>(
      args?: SelectSubset<T, user_dataFindFirstOrThrowArgs>
    ): Prisma__user_dataClient<user_dataGetPayload<T>>

    /**
     * Find zero or more User_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_dataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_data
     * const user_data = await prisma.user_data.findMany()
     * 
     * // Get first 10 User_data
     * const user_data = await prisma.user_data.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const user_dataWithUser_idOnly = await prisma.user_data.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends user_dataFindManyArgs>(
      args?: SelectSubset<T, user_dataFindManyArgs>
    ): Prisma.PrismaPromise<Array<user_dataGetPayload<T>>>

    /**
     * Create a User_data.
     * @param {user_dataCreateArgs} args - Arguments to create a User_data.
     * @example
     * // Create one User_data
     * const User_data = await prisma.user_data.create({
     *   data: {
     *     // ... data to create a User_data
     *   }
     * })
     * 
    **/
    create<T extends user_dataCreateArgs>(
      args: SelectSubset<T, user_dataCreateArgs>
    ): Prisma__user_dataClient<user_dataGetPayload<T>>

    /**
     * Create many User_data.
     *     @param {user_dataCreateManyArgs} args - Arguments to create many User_data.
     *     @example
     *     // Create many User_data
     *     const user_data = await prisma.user_data.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_dataCreateManyArgs>(
      args?: SelectSubset<T, user_dataCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User_data.
     * @param {user_dataDeleteArgs} args - Arguments to delete one User_data.
     * @example
     * // Delete one User_data
     * const User_data = await prisma.user_data.delete({
     *   where: {
     *     // ... filter to delete one User_data
     *   }
     * })
     * 
    **/
    delete<T extends user_dataDeleteArgs>(
      args: SelectSubset<T, user_dataDeleteArgs>
    ): Prisma__user_dataClient<user_dataGetPayload<T>>

    /**
     * Update one User_data.
     * @param {user_dataUpdateArgs} args - Arguments to update one User_data.
     * @example
     * // Update one User_data
     * const user_data = await prisma.user_data.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_dataUpdateArgs>(
      args: SelectSubset<T, user_dataUpdateArgs>
    ): Prisma__user_dataClient<user_dataGetPayload<T>>

    /**
     * Delete zero or more User_data.
     * @param {user_dataDeleteManyArgs} args - Arguments to filter User_data to delete.
     * @example
     * // Delete a few User_data
     * const { count } = await prisma.user_data.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_dataDeleteManyArgs>(
      args?: SelectSubset<T, user_dataDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_dataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_data
     * const user_data = await prisma.user_data.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_dataUpdateManyArgs>(
      args: SelectSubset<T, user_dataUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_data.
     * @param {user_dataUpsertArgs} args - Arguments to update or create a User_data.
     * @example
     * // Update or create a User_data
     * const user_data = await prisma.user_data.upsert({
     *   create: {
     *     // ... data to create a User_data
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_data we want to update
     *   }
     * })
    **/
    upsert<T extends user_dataUpsertArgs>(
      args: SelectSubset<T, user_dataUpsertArgs>
    ): Prisma__user_dataClient<user_dataGetPayload<T>>

    /**
     * Count the number of User_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_dataCountArgs} args - Arguments to filter User_data to count.
     * @example
     * // Count the number of User_data
     * const count = await prisma.user_data.count({
     *   where: {
     *     // ... the filter for the User_data we want to count
     *   }
     * })
    **/
    count<T extends user_dataCountArgs>(
      args?: Subset<T, user_dataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_dataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_dataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_dataAggregateArgs>(args: Subset<T, User_dataAggregateArgs>): Prisma.PrismaPromise<GetUser_dataAggregateType<T>>

    /**
     * Group by User_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_dataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_dataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_dataGroupByArgs['orderBy'] }
        : { orderBy?: User_dataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_dataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_dataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user_data.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_dataClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    order_data<T extends user_data$order_dataArgs= {}>(args?: Subset<T, user_data$order_dataArgs>): Prisma.PrismaPromise<Array<order_dataGetPayload<T>>| Null>;

    product_review<T extends user_data$product_reviewArgs= {}>(args?: Subset<T, user_data$product_reviewArgs>): Prisma.PrismaPromise<Array<product_reviewGetPayload<T>>| Null>;

    user_address<T extends user_addressArgs= {}>(args?: Subset<T, user_addressArgs>): Prisma__user_addressClient<user_addressGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user_data base type for findUnique actions
   */
  export type user_dataFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user_data
     */
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_dataInclude | null
    /**
     * Filter, which user_data to fetch.
     */
    where: user_dataWhereUniqueInput
  }

  /**
   * user_data findUnique
   */
  export interface user_dataFindUniqueArgs extends user_dataFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_data findUniqueOrThrow
   */
  export type user_dataFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the user_data
     */
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_dataInclude | null
    /**
     * Filter, which user_data to fetch.
     */
    where: user_dataWhereUniqueInput
  }


  /**
   * user_data base type for findFirst actions
   */
  export type user_dataFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user_data
     */
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_dataInclude | null
    /**
     * Filter, which user_data to fetch.
     */
    where?: user_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_data to fetch.
     */
    orderBy?: Enumerable<user_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_data.
     */
    cursor?: user_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_data.
     */
    distinct?: Enumerable<User_dataScalarFieldEnum>
  }

  /**
   * user_data findFirst
   */
  export interface user_dataFindFirstArgs extends user_dataFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_data findFirstOrThrow
   */
  export type user_dataFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the user_data
     */
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_dataInclude | null
    /**
     * Filter, which user_data to fetch.
     */
    where?: user_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_data to fetch.
     */
    orderBy?: Enumerable<user_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_data.
     */
    cursor?: user_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_data.
     */
    distinct?: Enumerable<User_dataScalarFieldEnum>
  }


  /**
   * user_data findMany
   */
  export type user_dataFindManyArgs = {
    /**
     * Select specific fields to fetch from the user_data
     */
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_dataInclude | null
    /**
     * Filter, which user_data to fetch.
     */
    where?: user_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_data to fetch.
     */
    orderBy?: Enumerable<user_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_data.
     */
    cursor?: user_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_data.
     */
    skip?: number
    distinct?: Enumerable<User_dataScalarFieldEnum>
  }


  /**
   * user_data create
   */
  export type user_dataCreateArgs = {
    /**
     * Select specific fields to fetch from the user_data
     */
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_dataInclude | null
    /**
     * The data needed to create a user_data.
     */
    data: XOR<user_dataCreateInput, user_dataUncheckedCreateInput>
  }


  /**
   * user_data createMany
   */
  export type user_dataCreateManyArgs = {
    /**
     * The data used to create many user_data.
     */
    data: Enumerable<user_dataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user_data update
   */
  export type user_dataUpdateArgs = {
    /**
     * Select specific fields to fetch from the user_data
     */
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_dataInclude | null
    /**
     * The data needed to update a user_data.
     */
    data: XOR<user_dataUpdateInput, user_dataUncheckedUpdateInput>
    /**
     * Choose, which user_data to update.
     */
    where: user_dataWhereUniqueInput
  }


  /**
   * user_data updateMany
   */
  export type user_dataUpdateManyArgs = {
    /**
     * The data used to update user_data.
     */
    data: XOR<user_dataUpdateManyMutationInput, user_dataUncheckedUpdateManyInput>
    /**
     * Filter which user_data to update
     */
    where?: user_dataWhereInput
  }


  /**
   * user_data upsert
   */
  export type user_dataUpsertArgs = {
    /**
     * Select specific fields to fetch from the user_data
     */
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_dataInclude | null
    /**
     * The filter to search for the user_data to update in case it exists.
     */
    where: user_dataWhereUniqueInput
    /**
     * In case the user_data found by the `where` argument doesn't exist, create a new user_data with this data.
     */
    create: XOR<user_dataCreateInput, user_dataUncheckedCreateInput>
    /**
     * In case the user_data was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_dataUpdateInput, user_dataUncheckedUpdateInput>
  }


  /**
   * user_data delete
   */
  export type user_dataDeleteArgs = {
    /**
     * Select specific fields to fetch from the user_data
     */
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_dataInclude | null
    /**
     * Filter which user_data to delete.
     */
    where: user_dataWhereUniqueInput
  }


  /**
   * user_data deleteMany
   */
  export type user_dataDeleteManyArgs = {
    /**
     * Filter which user_data to delete
     */
    where?: user_dataWhereInput
  }


  /**
   * user_data.order_data
   */
  export type user_data$order_dataArgs = {
    /**
     * Select specific fields to fetch from the order_data
     */
    select?: order_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: order_dataInclude | null
    where?: order_dataWhereInput
    orderBy?: Enumerable<order_dataOrderByWithRelationInput>
    cursor?: order_dataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Order_dataScalarFieldEnum>
  }


  /**
   * user_data.product_review
   */
  export type user_data$product_reviewArgs = {
    /**
     * Select specific fields to fetch from the product_review
     */
    select?: product_reviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: product_reviewInclude | null
    where?: product_reviewWhereInput
    orderBy?: Enumerable<product_reviewOrderByWithRelationInput>
    cursor?: product_reviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Product_reviewScalarFieldEnum>
  }


  /**
   * user_data without action
   */
  export type user_dataArgs = {
    /**
     * Select specific fields to fetch from the user_data
     */
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_dataInclude | null
  }



  /**
   * Enums
   */

  export const Order_dataScalarFieldEnum: {
    order_id: 'order_id',
    order_date: 'order_date',
    transaction_status: 'transaction_status',
    quantity: 'quantity',
    total_price: 'total_price',
    product_id: 'product_id',
    shipper_id: 'shipper_id',
    seller_id: 'seller_id',
    user_id: 'user_id'
  };

  export type Order_dataScalarFieldEnum = (typeof Order_dataScalarFieldEnum)[keyof typeof Order_dataScalarFieldEnum]


  export const Product_dataScalarFieldEnum: {
    product_id: 'product_id',
    name: 'name',
    price: 'price',
    discount: 'discount',
    quantityAvailable: 'quantityAvailable',
    category: 'category',
    currentPrice: 'currentPrice',
    size: 'size',
    productColor: 'productColor'
  };

  export type Product_dataScalarFieldEnum = (typeof Product_dataScalarFieldEnum)[keyof typeof Product_dataScalarFieldEnum]


  export const Product_imageScalarFieldEnum: {
    product_id: 'product_id',
    image_id: 'image_id',
    url: 'url'
  };

  export type Product_imageScalarFieldEnum = (typeof Product_imageScalarFieldEnum)[keyof typeof Product_imageScalarFieldEnum]


  export const Product_reviewScalarFieldEnum: {
    review_id: 'review_id',
    rate: 'rate',
    comment: 'comment',
    product_id: 'product_id',
    user_id: 'user_id'
  };

  export type Product_reviewScalarFieldEnum = (typeof Product_reviewScalarFieldEnum)[keyof typeof Product_reviewScalarFieldEnum]


  export const Seller_dataScalarFieldEnum: {
    brand_id: 'brand_id',
    product_brand: 'product_brand',
    access_name: 'access_name',
    access_pass: 'access_pass'
  };

  export type Seller_dataScalarFieldEnum = (typeof Seller_dataScalarFieldEnum)[keyof typeof Seller_dataScalarFieldEnum]


  export const Shipper_dataScalarFieldEnum: {
    shipper_id: 'shipper_id',
    shipper_company: 'shipper_company',
    service_type: 'service_type'
  };

  export type Shipper_dataScalarFieldEnum = (typeof Shipper_dataScalarFieldEnum)[keyof typeof Shipper_dataScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const User_addressScalarFieldEnum: {
    user_id: 'user_id',
    recipient_firstName: 'recipient_firstName',
    recipient_lastName: 'recipient_lastName',
    recipient_phone: 'recipient_phone',
    recipient_address: 'recipient_address',
    recipient_postal: 'recipient_postal',
    recipient_country: 'recipient_country'
  };

  export type User_addressScalarFieldEnum = (typeof User_addressScalarFieldEnum)[keyof typeof User_addressScalarFieldEnum]


  export const User_dataScalarFieldEnum: {
    user_id: 'user_id',
    user_firstName: 'user_firstName',
    user_email: 'user_email',
    user_pass: 'user_pass',
    user_lastName: 'user_lastName'
  };

  export type User_dataScalarFieldEnum = (typeof User_dataScalarFieldEnum)[keyof typeof User_dataScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type order_dataWhereInput = {
    AND?: Enumerable<order_dataWhereInput>
    OR?: Enumerable<order_dataWhereInput>
    NOT?: Enumerable<order_dataWhereInput>
    order_id?: IntFilter | number
    order_date?: DateTimeNullableFilter | Date | string | null
    transaction_status?: StringNullableFilter | string | null
    quantity?: IntNullableFilter | number | null
    total_price?: FloatNullableFilter | number | null
    product_id?: IntNullableFilter | number | null
    shipper_id?: IntNullableFilter | number | null
    seller_id?: IntNullableFilter | number | null
    user_id?: IntNullableFilter | number | null
    product_data?: XOR<Product_dataRelationFilter, product_dataWhereInput> | null
    shipper_data?: XOR<Shipper_dataRelationFilter, shipper_dataWhereInput> | null
    seller_data?: XOR<Seller_dataRelationFilter, seller_dataWhereInput> | null
    user_data?: XOR<User_dataRelationFilter, user_dataWhereInput> | null
  }

  export type order_dataOrderByWithRelationInput = {
    order_id?: SortOrder
    order_date?: SortOrder
    transaction_status?: SortOrder
    quantity?: SortOrder
    total_price?: SortOrder
    product_id?: SortOrder
    shipper_id?: SortOrder
    seller_id?: SortOrder
    user_id?: SortOrder
    product_data?: product_dataOrderByWithRelationInput
    shipper_data?: shipper_dataOrderByWithRelationInput
    seller_data?: seller_dataOrderByWithRelationInput
    user_data?: user_dataOrderByWithRelationInput
  }

  export type order_dataWhereUniqueInput = {
    order_id?: number
  }

  export type order_dataOrderByWithAggregationInput = {
    order_id?: SortOrder
    order_date?: SortOrder
    transaction_status?: SortOrder
    quantity?: SortOrder
    total_price?: SortOrder
    product_id?: SortOrder
    shipper_id?: SortOrder
    seller_id?: SortOrder
    user_id?: SortOrder
    _count?: order_dataCountOrderByAggregateInput
    _avg?: order_dataAvgOrderByAggregateInput
    _max?: order_dataMaxOrderByAggregateInput
    _min?: order_dataMinOrderByAggregateInput
    _sum?: order_dataSumOrderByAggregateInput
  }

  export type order_dataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<order_dataScalarWhereWithAggregatesInput>
    OR?: Enumerable<order_dataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<order_dataScalarWhereWithAggregatesInput>
    order_id?: IntWithAggregatesFilter | number
    order_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    transaction_status?: StringNullableWithAggregatesFilter | string | null
    quantity?: IntNullableWithAggregatesFilter | number | null
    total_price?: FloatNullableWithAggregatesFilter | number | null
    product_id?: IntNullableWithAggregatesFilter | number | null
    shipper_id?: IntNullableWithAggregatesFilter | number | null
    seller_id?: IntNullableWithAggregatesFilter | number | null
    user_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type product_dataWhereInput = {
    AND?: Enumerable<product_dataWhereInput>
    OR?: Enumerable<product_dataWhereInput>
    NOT?: Enumerable<product_dataWhereInput>
    product_id?: IntFilter | number
    name?: StringNullableFilter | string | null
    price?: FloatNullableFilter | number | null
    discount?: FloatNullableFilter | number | null
    quantityAvailable?: IntNullableFilter | number | null
    category?: StringNullableFilter | string | null
    currentPrice?: FloatNullableFilter | number | null
    size?: Enumproduct_data_sizeNullableFilter | product_data_size | null
    productColor?: Enumproduct_data_productColorNullableFilter | product_data_productColor | null
    order_data?: Order_dataListRelationFilter
    product_image?: XOR<Product_imageRelationFilter, product_imageWhereInput> | null
    product_review?: Product_reviewListRelationFilter
  }

  export type product_dataOrderByWithRelationInput = {
    product_id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    discount?: SortOrder
    quantityAvailable?: SortOrder
    category?: SortOrder
    currentPrice?: SortOrder
    size?: SortOrder
    productColor?: SortOrder
    order_data?: order_dataOrderByRelationAggregateInput
    product_image?: product_imageOrderByWithRelationInput
    product_review?: product_reviewOrderByRelationAggregateInput
  }

  export type product_dataWhereUniqueInput = {
    product_id?: number
    name?: string
  }

  export type product_dataOrderByWithAggregationInput = {
    product_id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    discount?: SortOrder
    quantityAvailable?: SortOrder
    category?: SortOrder
    currentPrice?: SortOrder
    size?: SortOrder
    productColor?: SortOrder
    _count?: product_dataCountOrderByAggregateInput
    _avg?: product_dataAvgOrderByAggregateInput
    _max?: product_dataMaxOrderByAggregateInput
    _min?: product_dataMinOrderByAggregateInput
    _sum?: product_dataSumOrderByAggregateInput
  }

  export type product_dataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<product_dataScalarWhereWithAggregatesInput>
    OR?: Enumerable<product_dataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<product_dataScalarWhereWithAggregatesInput>
    product_id?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
    price?: FloatNullableWithAggregatesFilter | number | null
    discount?: FloatNullableWithAggregatesFilter | number | null
    quantityAvailable?: IntNullableWithAggregatesFilter | number | null
    category?: StringNullableWithAggregatesFilter | string | null
    currentPrice?: FloatNullableWithAggregatesFilter | number | null
    size?: Enumproduct_data_sizeNullableWithAggregatesFilter | product_data_size | null
    productColor?: Enumproduct_data_productColorNullableWithAggregatesFilter | product_data_productColor | null
  }

  export type product_imageWhereInput = {
    AND?: Enumerable<product_imageWhereInput>
    OR?: Enumerable<product_imageWhereInput>
    NOT?: Enumerable<product_imageWhereInput>
    product_id?: IntFilter | number
    image_id?: IntNullableFilter | number | null
    url?: StringNullableFilter | string | null
    product_data?: XOR<Product_dataRelationFilter, product_dataWhereInput>
  }

  export type product_imageOrderByWithRelationInput = {
    product_id?: SortOrder
    image_id?: SortOrder
    url?: SortOrder
    product_data?: product_dataOrderByWithRelationInput
  }

  export type product_imageWhereUniqueInput = {
    product_id?: number
    image_id?: number
  }

  export type product_imageOrderByWithAggregationInput = {
    product_id?: SortOrder
    image_id?: SortOrder
    url?: SortOrder
    _count?: product_imageCountOrderByAggregateInput
    _avg?: product_imageAvgOrderByAggregateInput
    _max?: product_imageMaxOrderByAggregateInput
    _min?: product_imageMinOrderByAggregateInput
    _sum?: product_imageSumOrderByAggregateInput
  }

  export type product_imageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<product_imageScalarWhereWithAggregatesInput>
    OR?: Enumerable<product_imageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<product_imageScalarWhereWithAggregatesInput>
    product_id?: IntWithAggregatesFilter | number
    image_id?: IntNullableWithAggregatesFilter | number | null
    url?: StringNullableWithAggregatesFilter | string | null
  }

  export type product_reviewWhereInput = {
    AND?: Enumerable<product_reviewWhereInput>
    OR?: Enumerable<product_reviewWhereInput>
    NOT?: Enumerable<product_reviewWhereInput>
    review_id?: IntFilter | number
    rate?: FloatNullableFilter | number | null
    comment?: StringNullableFilter | string | null
    product_id?: IntNullableFilter | number | null
    user_id?: IntNullableFilter | number | null
    product_data?: XOR<Product_dataRelationFilter, product_dataWhereInput> | null
    user_data?: XOR<User_dataRelationFilter, user_dataWhereInput> | null
  }

  export type product_reviewOrderByWithRelationInput = {
    review_id?: SortOrder
    rate?: SortOrder
    comment?: SortOrder
    product_id?: SortOrder
    user_id?: SortOrder
    product_data?: product_dataOrderByWithRelationInput
    user_data?: user_dataOrderByWithRelationInput
  }

  export type product_reviewWhereUniqueInput = {
    review_id?: number
  }

  export type product_reviewOrderByWithAggregationInput = {
    review_id?: SortOrder
    rate?: SortOrder
    comment?: SortOrder
    product_id?: SortOrder
    user_id?: SortOrder
    _count?: product_reviewCountOrderByAggregateInput
    _avg?: product_reviewAvgOrderByAggregateInput
    _max?: product_reviewMaxOrderByAggregateInput
    _min?: product_reviewMinOrderByAggregateInput
    _sum?: product_reviewSumOrderByAggregateInput
  }

  export type product_reviewScalarWhereWithAggregatesInput = {
    AND?: Enumerable<product_reviewScalarWhereWithAggregatesInput>
    OR?: Enumerable<product_reviewScalarWhereWithAggregatesInput>
    NOT?: Enumerable<product_reviewScalarWhereWithAggregatesInput>
    review_id?: IntWithAggregatesFilter | number
    rate?: FloatNullableWithAggregatesFilter | number | null
    comment?: StringNullableWithAggregatesFilter | string | null
    product_id?: IntNullableWithAggregatesFilter | number | null
    user_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type seller_dataWhereInput = {
    AND?: Enumerable<seller_dataWhereInput>
    OR?: Enumerable<seller_dataWhereInput>
    NOT?: Enumerable<seller_dataWhereInput>
    brand_id?: IntFilter | number
    product_brand?: StringNullableFilter | string | null
    access_name?: StringNullableFilter | string | null
    access_pass?: StringNullableFilter | string | null
    order_data?: Order_dataListRelationFilter
  }

  export type seller_dataOrderByWithRelationInput = {
    brand_id?: SortOrder
    product_brand?: SortOrder
    access_name?: SortOrder
    access_pass?: SortOrder
    order_data?: order_dataOrderByRelationAggregateInput
  }

  export type seller_dataWhereUniqueInput = {
    brand_id?: number
  }

  export type seller_dataOrderByWithAggregationInput = {
    brand_id?: SortOrder
    product_brand?: SortOrder
    access_name?: SortOrder
    access_pass?: SortOrder
    _count?: seller_dataCountOrderByAggregateInput
    _avg?: seller_dataAvgOrderByAggregateInput
    _max?: seller_dataMaxOrderByAggregateInput
    _min?: seller_dataMinOrderByAggregateInput
    _sum?: seller_dataSumOrderByAggregateInput
  }

  export type seller_dataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<seller_dataScalarWhereWithAggregatesInput>
    OR?: Enumerable<seller_dataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<seller_dataScalarWhereWithAggregatesInput>
    brand_id?: IntWithAggregatesFilter | number
    product_brand?: StringNullableWithAggregatesFilter | string | null
    access_name?: StringNullableWithAggregatesFilter | string | null
    access_pass?: StringNullableWithAggregatesFilter | string | null
  }

  export type shipper_dataWhereInput = {
    AND?: Enumerable<shipper_dataWhereInput>
    OR?: Enumerable<shipper_dataWhereInput>
    NOT?: Enumerable<shipper_dataWhereInput>
    shipper_id?: IntFilter | number
    shipper_company?: StringNullableFilter | string | null
    service_type?: StringNullableFilter | string | null
    order_data?: Order_dataListRelationFilter
  }

  export type shipper_dataOrderByWithRelationInput = {
    shipper_id?: SortOrder
    shipper_company?: SortOrder
    service_type?: SortOrder
    order_data?: order_dataOrderByRelationAggregateInput
  }

  export type shipper_dataWhereUniqueInput = {
    shipper_id?: number
  }

  export type shipper_dataOrderByWithAggregationInput = {
    shipper_id?: SortOrder
    shipper_company?: SortOrder
    service_type?: SortOrder
    _count?: shipper_dataCountOrderByAggregateInput
    _avg?: shipper_dataAvgOrderByAggregateInput
    _max?: shipper_dataMaxOrderByAggregateInput
    _min?: shipper_dataMinOrderByAggregateInput
    _sum?: shipper_dataSumOrderByAggregateInput
  }

  export type shipper_dataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<shipper_dataScalarWhereWithAggregatesInput>
    OR?: Enumerable<shipper_dataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<shipper_dataScalarWhereWithAggregatesInput>
    shipper_id?: IntWithAggregatesFilter | number
    shipper_company?: StringNullableWithAggregatesFilter | string | null
    service_type?: StringNullableWithAggregatesFilter | string | null
  }

  export type user_addressWhereInput = {
    AND?: Enumerable<user_addressWhereInput>
    OR?: Enumerable<user_addressWhereInput>
    NOT?: Enumerable<user_addressWhereInput>
    user_id?: IntFilter | number
    recipient_firstName?: StringNullableFilter | string | null
    recipient_lastName?: StringNullableFilter | string | null
    recipient_phone?: StringNullableFilter | string | null
    recipient_address?: StringNullableFilter | string | null
    recipient_postal?: StringNullableFilter | string | null
    recipient_country?: StringNullableFilter | string | null
    user_data?: XOR<User_dataRelationFilter, user_dataWhereInput>
  }

  export type user_addressOrderByWithRelationInput = {
    user_id?: SortOrder
    recipient_firstName?: SortOrder
    recipient_lastName?: SortOrder
    recipient_phone?: SortOrder
    recipient_address?: SortOrder
    recipient_postal?: SortOrder
    recipient_country?: SortOrder
    user_data?: user_dataOrderByWithRelationInput
  }

  export type user_addressWhereUniqueInput = {
    user_id?: number
  }

  export type user_addressOrderByWithAggregationInput = {
    user_id?: SortOrder
    recipient_firstName?: SortOrder
    recipient_lastName?: SortOrder
    recipient_phone?: SortOrder
    recipient_address?: SortOrder
    recipient_postal?: SortOrder
    recipient_country?: SortOrder
    _count?: user_addressCountOrderByAggregateInput
    _avg?: user_addressAvgOrderByAggregateInput
    _max?: user_addressMaxOrderByAggregateInput
    _min?: user_addressMinOrderByAggregateInput
    _sum?: user_addressSumOrderByAggregateInput
  }

  export type user_addressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<user_addressScalarWhereWithAggregatesInput>
    OR?: Enumerable<user_addressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<user_addressScalarWhereWithAggregatesInput>
    user_id?: IntWithAggregatesFilter | number
    recipient_firstName?: StringNullableWithAggregatesFilter | string | null
    recipient_lastName?: StringNullableWithAggregatesFilter | string | null
    recipient_phone?: StringNullableWithAggregatesFilter | string | null
    recipient_address?: StringNullableWithAggregatesFilter | string | null
    recipient_postal?: StringNullableWithAggregatesFilter | string | null
    recipient_country?: StringNullableWithAggregatesFilter | string | null
  }

  export type user_dataWhereInput = {
    AND?: Enumerable<user_dataWhereInput>
    OR?: Enumerable<user_dataWhereInput>
    NOT?: Enumerable<user_dataWhereInput>
    user_id?: IntFilter | number
    user_firstName?: StringNullableFilter | string | null
    user_email?: StringNullableFilter | string | null
    user_pass?: StringNullableFilter | string | null
    user_lastName?: StringNullableFilter | string | null
    order_data?: Order_dataListRelationFilter
    product_review?: Product_reviewListRelationFilter
    user_address?: XOR<User_addressRelationFilter, user_addressWhereInput> | null
  }

  export type user_dataOrderByWithRelationInput = {
    user_id?: SortOrder
    user_firstName?: SortOrder
    user_email?: SortOrder
    user_pass?: SortOrder
    user_lastName?: SortOrder
    order_data?: order_dataOrderByRelationAggregateInput
    product_review?: product_reviewOrderByRelationAggregateInput
    user_address?: user_addressOrderByWithRelationInput
  }

  export type user_dataWhereUniqueInput = {
    user_id?: number
    user_email?: string
  }

  export type user_dataOrderByWithAggregationInput = {
    user_id?: SortOrder
    user_firstName?: SortOrder
    user_email?: SortOrder
    user_pass?: SortOrder
    user_lastName?: SortOrder
    _count?: user_dataCountOrderByAggregateInput
    _avg?: user_dataAvgOrderByAggregateInput
    _max?: user_dataMaxOrderByAggregateInput
    _min?: user_dataMinOrderByAggregateInput
    _sum?: user_dataSumOrderByAggregateInput
  }

  export type user_dataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<user_dataScalarWhereWithAggregatesInput>
    OR?: Enumerable<user_dataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<user_dataScalarWhereWithAggregatesInput>
    user_id?: IntWithAggregatesFilter | number
    user_firstName?: StringNullableWithAggregatesFilter | string | null
    user_email?: StringNullableWithAggregatesFilter | string | null
    user_pass?: StringNullableWithAggregatesFilter | string | null
    user_lastName?: StringNullableWithAggregatesFilter | string | null
  }

  export type order_dataCreateInput = {
    order_id: number
    order_date?: Date | string | null
    transaction_status?: string | null
    quantity?: number | null
    total_price?: number | null
    product_data?: product_dataCreateNestedOneWithoutOrder_dataInput
    shipper_data?: shipper_dataCreateNestedOneWithoutOrder_dataInput
    seller_data?: seller_dataCreateNestedOneWithoutOrder_dataInput
    user_data?: user_dataCreateNestedOneWithoutOrder_dataInput
  }

  export type order_dataUncheckedCreateInput = {
    order_id: number
    order_date?: Date | string | null
    transaction_status?: string | null
    quantity?: number | null
    total_price?: number | null
    product_id?: number | null
    shipper_id?: number | null
    seller_id?: number | null
    user_id?: number | null
  }

  export type order_dataUpdateInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_status?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    product_data?: product_dataUpdateOneWithoutOrder_dataNestedInput
    shipper_data?: shipper_dataUpdateOneWithoutOrder_dataNestedInput
    seller_data?: seller_dataUpdateOneWithoutOrder_dataNestedInput
    user_data?: user_dataUpdateOneWithoutOrder_dataNestedInput
  }

  export type order_dataUncheckedUpdateInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_status?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    product_id?: NullableIntFieldUpdateOperationsInput | number | null
    shipper_id?: NullableIntFieldUpdateOperationsInput | number | null
    seller_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type order_dataCreateManyInput = {
    order_id: number
    order_date?: Date | string | null
    transaction_status?: string | null
    quantity?: number | null
    total_price?: number | null
    product_id?: number | null
    shipper_id?: number | null
    seller_id?: number | null
    user_id?: number | null
  }

  export type order_dataUpdateManyMutationInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_status?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type order_dataUncheckedUpdateManyInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_status?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    product_id?: NullableIntFieldUpdateOperationsInput | number | null
    shipper_id?: NullableIntFieldUpdateOperationsInput | number | null
    seller_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type product_dataCreateInput = {
    name?: string | null
    price?: number | null
    discount?: number | null
    quantityAvailable?: number | null
    category?: string | null
    currentPrice?: number | null
    size?: product_data_size | null
    productColor?: product_data_productColor | null
    order_data?: order_dataCreateNestedManyWithoutProduct_dataInput
    product_image?: product_imageCreateNestedOneWithoutProduct_dataInput
    product_review?: product_reviewCreateNestedManyWithoutProduct_dataInput
  }

  export type product_dataUncheckedCreateInput = {
    product_id?: number
    name?: string | null
    price?: number | null
    discount?: number | null
    quantityAvailable?: number | null
    category?: string | null
    currentPrice?: number | null
    size?: product_data_size | null
    productColor?: product_data_productColor | null
    order_data?: order_dataUncheckedCreateNestedManyWithoutProduct_dataInput
    product_image?: product_imageUncheckedCreateNestedOneWithoutProduct_dataInput
    product_review?: product_reviewUncheckedCreateNestedManyWithoutProduct_dataInput
  }

  export type product_dataUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    quantityAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    size?: NullableEnumproduct_data_sizeFieldUpdateOperationsInput | product_data_size | null
    productColor?: NullableEnumproduct_data_productColorFieldUpdateOperationsInput | product_data_productColor | null
    order_data?: order_dataUpdateManyWithoutProduct_dataNestedInput
    product_image?: product_imageUpdateOneWithoutProduct_dataNestedInput
    product_review?: product_reviewUpdateManyWithoutProduct_dataNestedInput
  }

  export type product_dataUncheckedUpdateInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    quantityAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    size?: NullableEnumproduct_data_sizeFieldUpdateOperationsInput | product_data_size | null
    productColor?: NullableEnumproduct_data_productColorFieldUpdateOperationsInput | product_data_productColor | null
    order_data?: order_dataUncheckedUpdateManyWithoutProduct_dataNestedInput
    product_image?: product_imageUncheckedUpdateOneWithoutProduct_dataNestedInput
    product_review?: product_reviewUncheckedUpdateManyWithoutProduct_dataNestedInput
  }

  export type product_dataCreateManyInput = {
    product_id?: number
    name?: string | null
    price?: number | null
    discount?: number | null
    quantityAvailable?: number | null
    category?: string | null
    currentPrice?: number | null
    size?: product_data_size | null
    productColor?: product_data_productColor | null
  }

  export type product_dataUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    quantityAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    size?: NullableEnumproduct_data_sizeFieldUpdateOperationsInput | product_data_size | null
    productColor?: NullableEnumproduct_data_productColorFieldUpdateOperationsInput | product_data_productColor | null
  }

  export type product_dataUncheckedUpdateManyInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    quantityAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    size?: NullableEnumproduct_data_sizeFieldUpdateOperationsInput | product_data_size | null
    productColor?: NullableEnumproduct_data_productColorFieldUpdateOperationsInput | product_data_productColor | null
  }

  export type product_imageCreateInput = {
    image_id?: number | null
    url?: string | null
    product_data: product_dataCreateNestedOneWithoutProduct_imageInput
  }

  export type product_imageUncheckedCreateInput = {
    product_id: number
    image_id?: number | null
    url?: string | null
  }

  export type product_imageUpdateInput = {
    image_id?: NullableIntFieldUpdateOperationsInput | number | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    product_data?: product_dataUpdateOneRequiredWithoutProduct_imageNestedInput
  }

  export type product_imageUncheckedUpdateInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    image_id?: NullableIntFieldUpdateOperationsInput | number | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type product_imageCreateManyInput = {
    product_id: number
    image_id?: number | null
    url?: string | null
  }

  export type product_imageUpdateManyMutationInput = {
    image_id?: NullableIntFieldUpdateOperationsInput | number | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type product_imageUncheckedUpdateManyInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    image_id?: NullableIntFieldUpdateOperationsInput | number | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type product_reviewCreateInput = {
    rate?: number | null
    comment?: string | null
    product_data?: product_dataCreateNestedOneWithoutProduct_reviewInput
    user_data?: user_dataCreateNestedOneWithoutProduct_reviewInput
  }

  export type product_reviewUncheckedCreateInput = {
    review_id?: number
    rate?: number | null
    comment?: string | null
    product_id?: number | null
    user_id?: number | null
  }

  export type product_reviewUpdateInput = {
    rate?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    product_data?: product_dataUpdateOneWithoutProduct_reviewNestedInput
    user_data?: user_dataUpdateOneWithoutProduct_reviewNestedInput
  }

  export type product_reviewUncheckedUpdateInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    rate?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    product_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type product_reviewCreateManyInput = {
    review_id?: number
    rate?: number | null
    comment?: string | null
    product_id?: number | null
    user_id?: number | null
  }

  export type product_reviewUpdateManyMutationInput = {
    rate?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type product_reviewUncheckedUpdateManyInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    rate?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    product_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type seller_dataCreateInput = {
    product_brand?: string | null
    access_name?: string | null
    access_pass?: string | null
    order_data?: order_dataCreateNestedManyWithoutSeller_dataInput
  }

  export type seller_dataUncheckedCreateInput = {
    brand_id?: number
    product_brand?: string | null
    access_name?: string | null
    access_pass?: string | null
    order_data?: order_dataUncheckedCreateNestedManyWithoutSeller_dataInput
  }

  export type seller_dataUpdateInput = {
    product_brand?: NullableStringFieldUpdateOperationsInput | string | null
    access_name?: NullableStringFieldUpdateOperationsInput | string | null
    access_pass?: NullableStringFieldUpdateOperationsInput | string | null
    order_data?: order_dataUpdateManyWithoutSeller_dataNestedInput
  }

  export type seller_dataUncheckedUpdateInput = {
    brand_id?: IntFieldUpdateOperationsInput | number
    product_brand?: NullableStringFieldUpdateOperationsInput | string | null
    access_name?: NullableStringFieldUpdateOperationsInput | string | null
    access_pass?: NullableStringFieldUpdateOperationsInput | string | null
    order_data?: order_dataUncheckedUpdateManyWithoutSeller_dataNestedInput
  }

  export type seller_dataCreateManyInput = {
    brand_id?: number
    product_brand?: string | null
    access_name?: string | null
    access_pass?: string | null
  }

  export type seller_dataUpdateManyMutationInput = {
    product_brand?: NullableStringFieldUpdateOperationsInput | string | null
    access_name?: NullableStringFieldUpdateOperationsInput | string | null
    access_pass?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type seller_dataUncheckedUpdateManyInput = {
    brand_id?: IntFieldUpdateOperationsInput | number
    product_brand?: NullableStringFieldUpdateOperationsInput | string | null
    access_name?: NullableStringFieldUpdateOperationsInput | string | null
    access_pass?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type shipper_dataCreateInput = {
    shipper_company?: string | null
    service_type?: string | null
    order_data?: order_dataCreateNestedManyWithoutShipper_dataInput
  }

  export type shipper_dataUncheckedCreateInput = {
    shipper_id?: number
    shipper_company?: string | null
    service_type?: string | null
    order_data?: order_dataUncheckedCreateNestedManyWithoutShipper_dataInput
  }

  export type shipper_dataUpdateInput = {
    shipper_company?: NullableStringFieldUpdateOperationsInput | string | null
    service_type?: NullableStringFieldUpdateOperationsInput | string | null
    order_data?: order_dataUpdateManyWithoutShipper_dataNestedInput
  }

  export type shipper_dataUncheckedUpdateInput = {
    shipper_id?: IntFieldUpdateOperationsInput | number
    shipper_company?: NullableStringFieldUpdateOperationsInput | string | null
    service_type?: NullableStringFieldUpdateOperationsInput | string | null
    order_data?: order_dataUncheckedUpdateManyWithoutShipper_dataNestedInput
  }

  export type shipper_dataCreateManyInput = {
    shipper_id?: number
    shipper_company?: string | null
    service_type?: string | null
  }

  export type shipper_dataUpdateManyMutationInput = {
    shipper_company?: NullableStringFieldUpdateOperationsInput | string | null
    service_type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type shipper_dataUncheckedUpdateManyInput = {
    shipper_id?: IntFieldUpdateOperationsInput | number
    shipper_company?: NullableStringFieldUpdateOperationsInput | string | null
    service_type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_addressCreateInput = {
    recipient_firstName?: string | null
    recipient_lastName?: string | null
    recipient_phone?: string | null
    recipient_address?: string | null
    recipient_postal?: string | null
    recipient_country?: string | null
    user_data: user_dataCreateNestedOneWithoutUser_addressInput
  }

  export type user_addressUncheckedCreateInput = {
    user_id: number
    recipient_firstName?: string | null
    recipient_lastName?: string | null
    recipient_phone?: string | null
    recipient_address?: string | null
    recipient_postal?: string | null
    recipient_country?: string | null
  }

  export type user_addressUpdateInput = {
    recipient_firstName?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_lastName?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_phone?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_address?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_postal?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_country?: NullableStringFieldUpdateOperationsInput | string | null
    user_data?: user_dataUpdateOneRequiredWithoutUser_addressNestedInput
  }

  export type user_addressUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    recipient_firstName?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_lastName?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_phone?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_address?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_postal?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_addressCreateManyInput = {
    user_id: number
    recipient_firstName?: string | null
    recipient_lastName?: string | null
    recipient_phone?: string | null
    recipient_address?: string | null
    recipient_postal?: string | null
    recipient_country?: string | null
  }

  export type user_addressUpdateManyMutationInput = {
    recipient_firstName?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_lastName?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_phone?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_address?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_postal?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_addressUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    recipient_firstName?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_lastName?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_phone?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_address?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_postal?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_dataCreateInput = {
    user_firstName?: string | null
    user_email?: string | null
    user_pass?: string | null
    user_lastName?: string | null
    order_data?: order_dataCreateNestedManyWithoutUser_dataInput
    product_review?: product_reviewCreateNestedManyWithoutUser_dataInput
    user_address?: user_addressCreateNestedOneWithoutUser_dataInput
  }

  export type user_dataUncheckedCreateInput = {
    user_id?: number
    user_firstName?: string | null
    user_email?: string | null
    user_pass?: string | null
    user_lastName?: string | null
    order_data?: order_dataUncheckedCreateNestedManyWithoutUser_dataInput
    product_review?: product_reviewUncheckedCreateNestedManyWithoutUser_dataInput
    user_address?: user_addressUncheckedCreateNestedOneWithoutUser_dataInput
  }

  export type user_dataUpdateInput = {
    user_firstName?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    user_pass?: NullableStringFieldUpdateOperationsInput | string | null
    user_lastName?: NullableStringFieldUpdateOperationsInput | string | null
    order_data?: order_dataUpdateManyWithoutUser_dataNestedInput
    product_review?: product_reviewUpdateManyWithoutUser_dataNestedInput
    user_address?: user_addressUpdateOneWithoutUser_dataNestedInput
  }

  export type user_dataUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_firstName?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    user_pass?: NullableStringFieldUpdateOperationsInput | string | null
    user_lastName?: NullableStringFieldUpdateOperationsInput | string | null
    order_data?: order_dataUncheckedUpdateManyWithoutUser_dataNestedInput
    product_review?: product_reviewUncheckedUpdateManyWithoutUser_dataNestedInput
    user_address?: user_addressUncheckedUpdateOneWithoutUser_dataNestedInput
  }

  export type user_dataCreateManyInput = {
    user_id?: number
    user_firstName?: string | null
    user_email?: string | null
    user_pass?: string | null
    user_lastName?: string | null
  }

  export type user_dataUpdateManyMutationInput = {
    user_firstName?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    user_pass?: NullableStringFieldUpdateOperationsInput | string | null
    user_lastName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_dataUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_firstName?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    user_pass?: NullableStringFieldUpdateOperationsInput | string | null
    user_lastName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type Product_dataRelationFilter = {
    is?: product_dataWhereInput
    isNot?: product_dataWhereInput
  }

  export type Shipper_dataRelationFilter = {
    is?: shipper_dataWhereInput | null
    isNot?: shipper_dataWhereInput | null
  }

  export type Seller_dataRelationFilter = {
    is?: seller_dataWhereInput | null
    isNot?: seller_dataWhereInput | null
  }

  export type User_dataRelationFilter = {
    is?: user_dataWhereInput
    isNot?: user_dataWhereInput
  }

  export type order_dataCountOrderByAggregateInput = {
    order_id?: SortOrder
    order_date?: SortOrder
    transaction_status?: SortOrder
    quantity?: SortOrder
    total_price?: SortOrder
    product_id?: SortOrder
    shipper_id?: SortOrder
    seller_id?: SortOrder
    user_id?: SortOrder
  }

  export type order_dataAvgOrderByAggregateInput = {
    order_id?: SortOrder
    quantity?: SortOrder
    total_price?: SortOrder
    product_id?: SortOrder
    shipper_id?: SortOrder
    seller_id?: SortOrder
    user_id?: SortOrder
  }

  export type order_dataMaxOrderByAggregateInput = {
    order_id?: SortOrder
    order_date?: SortOrder
    transaction_status?: SortOrder
    quantity?: SortOrder
    total_price?: SortOrder
    product_id?: SortOrder
    shipper_id?: SortOrder
    seller_id?: SortOrder
    user_id?: SortOrder
  }

  export type order_dataMinOrderByAggregateInput = {
    order_id?: SortOrder
    order_date?: SortOrder
    transaction_status?: SortOrder
    quantity?: SortOrder
    total_price?: SortOrder
    product_id?: SortOrder
    shipper_id?: SortOrder
    seller_id?: SortOrder
    user_id?: SortOrder
  }

  export type order_dataSumOrderByAggregateInput = {
    order_id?: SortOrder
    quantity?: SortOrder
    total_price?: SortOrder
    product_id?: SortOrder
    shipper_id?: SortOrder
    seller_id?: SortOrder
    user_id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type Enumproduct_data_sizeNullableFilter = {
    equals?: product_data_size | null
    in?: Enumerable<product_data_size> | null
    notIn?: Enumerable<product_data_size> | null
    not?: NestedEnumproduct_data_sizeNullableFilter | product_data_size | null
  }

  export type Enumproduct_data_productColorNullableFilter = {
    equals?: product_data_productColor | null
    in?: Enumerable<product_data_productColor> | null
    notIn?: Enumerable<product_data_productColor> | null
    not?: NestedEnumproduct_data_productColorNullableFilter | product_data_productColor | null
  }

  export type Order_dataListRelationFilter = {
    every?: order_dataWhereInput
    some?: order_dataWhereInput
    none?: order_dataWhereInput
  }

  export type Product_imageRelationFilter = {
    is?: product_imageWhereInput | null
    isNot?: product_imageWhereInput | null
  }

  export type Product_reviewListRelationFilter = {
    every?: product_reviewWhereInput
    some?: product_reviewWhereInput
    none?: product_reviewWhereInput
  }

  export type order_dataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type product_reviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type product_dataCountOrderByAggregateInput = {
    product_id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    discount?: SortOrder
    quantityAvailable?: SortOrder
    category?: SortOrder
    currentPrice?: SortOrder
    size?: SortOrder
    productColor?: SortOrder
  }

  export type product_dataAvgOrderByAggregateInput = {
    product_id?: SortOrder
    price?: SortOrder
    discount?: SortOrder
    quantityAvailable?: SortOrder
    currentPrice?: SortOrder
  }

  export type product_dataMaxOrderByAggregateInput = {
    product_id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    discount?: SortOrder
    quantityAvailable?: SortOrder
    category?: SortOrder
    currentPrice?: SortOrder
    size?: SortOrder
    productColor?: SortOrder
  }

  export type product_dataMinOrderByAggregateInput = {
    product_id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    discount?: SortOrder
    quantityAvailable?: SortOrder
    category?: SortOrder
    currentPrice?: SortOrder
    size?: SortOrder
    productColor?: SortOrder
  }

  export type product_dataSumOrderByAggregateInput = {
    product_id?: SortOrder
    price?: SortOrder
    discount?: SortOrder
    quantityAvailable?: SortOrder
    currentPrice?: SortOrder
  }

  export type Enumproduct_data_sizeNullableWithAggregatesFilter = {
    equals?: product_data_size | null
    in?: Enumerable<product_data_size> | null
    notIn?: Enumerable<product_data_size> | null
    not?: NestedEnumproduct_data_sizeNullableWithAggregatesFilter | product_data_size | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumproduct_data_sizeNullableFilter
    _max?: NestedEnumproduct_data_sizeNullableFilter
  }

  export type Enumproduct_data_productColorNullableWithAggregatesFilter = {
    equals?: product_data_productColor | null
    in?: Enumerable<product_data_productColor> | null
    notIn?: Enumerable<product_data_productColor> | null
    not?: NestedEnumproduct_data_productColorNullableWithAggregatesFilter | product_data_productColor | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumproduct_data_productColorNullableFilter
    _max?: NestedEnumproduct_data_productColorNullableFilter
  }

  export type product_imageCountOrderByAggregateInput = {
    product_id?: SortOrder
    image_id?: SortOrder
    url?: SortOrder
  }

  export type product_imageAvgOrderByAggregateInput = {
    product_id?: SortOrder
    image_id?: SortOrder
  }

  export type product_imageMaxOrderByAggregateInput = {
    product_id?: SortOrder
    image_id?: SortOrder
    url?: SortOrder
  }

  export type product_imageMinOrderByAggregateInput = {
    product_id?: SortOrder
    image_id?: SortOrder
    url?: SortOrder
  }

  export type product_imageSumOrderByAggregateInput = {
    product_id?: SortOrder
    image_id?: SortOrder
  }

  export type product_reviewCountOrderByAggregateInput = {
    review_id?: SortOrder
    rate?: SortOrder
    comment?: SortOrder
    product_id?: SortOrder
    user_id?: SortOrder
  }

  export type product_reviewAvgOrderByAggregateInput = {
    review_id?: SortOrder
    rate?: SortOrder
    product_id?: SortOrder
    user_id?: SortOrder
  }

  export type product_reviewMaxOrderByAggregateInput = {
    review_id?: SortOrder
    rate?: SortOrder
    comment?: SortOrder
    product_id?: SortOrder
    user_id?: SortOrder
  }

  export type product_reviewMinOrderByAggregateInput = {
    review_id?: SortOrder
    rate?: SortOrder
    comment?: SortOrder
    product_id?: SortOrder
    user_id?: SortOrder
  }

  export type product_reviewSumOrderByAggregateInput = {
    review_id?: SortOrder
    rate?: SortOrder
    product_id?: SortOrder
    user_id?: SortOrder
  }

  export type seller_dataCountOrderByAggregateInput = {
    brand_id?: SortOrder
    product_brand?: SortOrder
    access_name?: SortOrder
    access_pass?: SortOrder
  }

  export type seller_dataAvgOrderByAggregateInput = {
    brand_id?: SortOrder
  }

  export type seller_dataMaxOrderByAggregateInput = {
    brand_id?: SortOrder
    product_brand?: SortOrder
    access_name?: SortOrder
    access_pass?: SortOrder
  }

  export type seller_dataMinOrderByAggregateInput = {
    brand_id?: SortOrder
    product_brand?: SortOrder
    access_name?: SortOrder
    access_pass?: SortOrder
  }

  export type seller_dataSumOrderByAggregateInput = {
    brand_id?: SortOrder
  }

  export type shipper_dataCountOrderByAggregateInput = {
    shipper_id?: SortOrder
    shipper_company?: SortOrder
    service_type?: SortOrder
  }

  export type shipper_dataAvgOrderByAggregateInput = {
    shipper_id?: SortOrder
  }

  export type shipper_dataMaxOrderByAggregateInput = {
    shipper_id?: SortOrder
    shipper_company?: SortOrder
    service_type?: SortOrder
  }

  export type shipper_dataMinOrderByAggregateInput = {
    shipper_id?: SortOrder
    shipper_company?: SortOrder
    service_type?: SortOrder
  }

  export type shipper_dataSumOrderByAggregateInput = {
    shipper_id?: SortOrder
  }

  export type user_addressCountOrderByAggregateInput = {
    user_id?: SortOrder
    recipient_firstName?: SortOrder
    recipient_lastName?: SortOrder
    recipient_phone?: SortOrder
    recipient_address?: SortOrder
    recipient_postal?: SortOrder
    recipient_country?: SortOrder
  }

  export type user_addressAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type user_addressMaxOrderByAggregateInput = {
    user_id?: SortOrder
    recipient_firstName?: SortOrder
    recipient_lastName?: SortOrder
    recipient_phone?: SortOrder
    recipient_address?: SortOrder
    recipient_postal?: SortOrder
    recipient_country?: SortOrder
  }

  export type user_addressMinOrderByAggregateInput = {
    user_id?: SortOrder
    recipient_firstName?: SortOrder
    recipient_lastName?: SortOrder
    recipient_phone?: SortOrder
    recipient_address?: SortOrder
    recipient_postal?: SortOrder
    recipient_country?: SortOrder
  }

  export type user_addressSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type User_addressRelationFilter = {
    is?: user_addressWhereInput | null
    isNot?: user_addressWhereInput | null
  }

  export type user_dataCountOrderByAggregateInput = {
    user_id?: SortOrder
    user_firstName?: SortOrder
    user_email?: SortOrder
    user_pass?: SortOrder
    user_lastName?: SortOrder
  }

  export type user_dataAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type user_dataMaxOrderByAggregateInput = {
    user_id?: SortOrder
    user_firstName?: SortOrder
    user_email?: SortOrder
    user_pass?: SortOrder
    user_lastName?: SortOrder
  }

  export type user_dataMinOrderByAggregateInput = {
    user_id?: SortOrder
    user_firstName?: SortOrder
    user_email?: SortOrder
    user_pass?: SortOrder
    user_lastName?: SortOrder
  }

  export type user_dataSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type product_dataCreateNestedOneWithoutOrder_dataInput = {
    create?: XOR<product_dataCreateWithoutOrder_dataInput, product_dataUncheckedCreateWithoutOrder_dataInput>
    connectOrCreate?: product_dataCreateOrConnectWithoutOrder_dataInput
    connect?: product_dataWhereUniqueInput
  }

  export type shipper_dataCreateNestedOneWithoutOrder_dataInput = {
    create?: XOR<shipper_dataCreateWithoutOrder_dataInput, shipper_dataUncheckedCreateWithoutOrder_dataInput>
    connectOrCreate?: shipper_dataCreateOrConnectWithoutOrder_dataInput
    connect?: shipper_dataWhereUniqueInput
  }

  export type seller_dataCreateNestedOneWithoutOrder_dataInput = {
    create?: XOR<seller_dataCreateWithoutOrder_dataInput, seller_dataUncheckedCreateWithoutOrder_dataInput>
    connectOrCreate?: seller_dataCreateOrConnectWithoutOrder_dataInput
    connect?: seller_dataWhereUniqueInput
  }

  export type user_dataCreateNestedOneWithoutOrder_dataInput = {
    create?: XOR<user_dataCreateWithoutOrder_dataInput, user_dataUncheckedCreateWithoutOrder_dataInput>
    connectOrCreate?: user_dataCreateOrConnectWithoutOrder_dataInput
    connect?: user_dataWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type product_dataUpdateOneWithoutOrder_dataNestedInput = {
    create?: XOR<product_dataCreateWithoutOrder_dataInput, product_dataUncheckedCreateWithoutOrder_dataInput>
    connectOrCreate?: product_dataCreateOrConnectWithoutOrder_dataInput
    upsert?: product_dataUpsertWithoutOrder_dataInput
    disconnect?: boolean
    delete?: boolean
    connect?: product_dataWhereUniqueInput
    update?: XOR<product_dataUpdateWithoutOrder_dataInput, product_dataUncheckedUpdateWithoutOrder_dataInput>
  }

  export type shipper_dataUpdateOneWithoutOrder_dataNestedInput = {
    create?: XOR<shipper_dataCreateWithoutOrder_dataInput, shipper_dataUncheckedCreateWithoutOrder_dataInput>
    connectOrCreate?: shipper_dataCreateOrConnectWithoutOrder_dataInput
    upsert?: shipper_dataUpsertWithoutOrder_dataInput
    disconnect?: boolean
    delete?: boolean
    connect?: shipper_dataWhereUniqueInput
    update?: XOR<shipper_dataUpdateWithoutOrder_dataInput, shipper_dataUncheckedUpdateWithoutOrder_dataInput>
  }

  export type seller_dataUpdateOneWithoutOrder_dataNestedInput = {
    create?: XOR<seller_dataCreateWithoutOrder_dataInput, seller_dataUncheckedCreateWithoutOrder_dataInput>
    connectOrCreate?: seller_dataCreateOrConnectWithoutOrder_dataInput
    upsert?: seller_dataUpsertWithoutOrder_dataInput
    disconnect?: boolean
    delete?: boolean
    connect?: seller_dataWhereUniqueInput
    update?: XOR<seller_dataUpdateWithoutOrder_dataInput, seller_dataUncheckedUpdateWithoutOrder_dataInput>
  }

  export type user_dataUpdateOneWithoutOrder_dataNestedInput = {
    create?: XOR<user_dataCreateWithoutOrder_dataInput, user_dataUncheckedCreateWithoutOrder_dataInput>
    connectOrCreate?: user_dataCreateOrConnectWithoutOrder_dataInput
    upsert?: user_dataUpsertWithoutOrder_dataInput
    disconnect?: boolean
    delete?: boolean
    connect?: user_dataWhereUniqueInput
    update?: XOR<user_dataUpdateWithoutOrder_dataInput, user_dataUncheckedUpdateWithoutOrder_dataInput>
  }

  export type order_dataCreateNestedManyWithoutProduct_dataInput = {
    create?: XOR<Enumerable<order_dataCreateWithoutProduct_dataInput>, Enumerable<order_dataUncheckedCreateWithoutProduct_dataInput>>
    connectOrCreate?: Enumerable<order_dataCreateOrConnectWithoutProduct_dataInput>
    createMany?: order_dataCreateManyProduct_dataInputEnvelope
    connect?: Enumerable<order_dataWhereUniqueInput>
  }

  export type product_imageCreateNestedOneWithoutProduct_dataInput = {
    create?: XOR<product_imageCreateWithoutProduct_dataInput, product_imageUncheckedCreateWithoutProduct_dataInput>
    connectOrCreate?: product_imageCreateOrConnectWithoutProduct_dataInput
    connect?: product_imageWhereUniqueInput
  }

  export type product_reviewCreateNestedManyWithoutProduct_dataInput = {
    create?: XOR<Enumerable<product_reviewCreateWithoutProduct_dataInput>, Enumerable<product_reviewUncheckedCreateWithoutProduct_dataInput>>
    connectOrCreate?: Enumerable<product_reviewCreateOrConnectWithoutProduct_dataInput>
    createMany?: product_reviewCreateManyProduct_dataInputEnvelope
    connect?: Enumerable<product_reviewWhereUniqueInput>
  }

  export type order_dataUncheckedCreateNestedManyWithoutProduct_dataInput = {
    create?: XOR<Enumerable<order_dataCreateWithoutProduct_dataInput>, Enumerable<order_dataUncheckedCreateWithoutProduct_dataInput>>
    connectOrCreate?: Enumerable<order_dataCreateOrConnectWithoutProduct_dataInput>
    createMany?: order_dataCreateManyProduct_dataInputEnvelope
    connect?: Enumerable<order_dataWhereUniqueInput>
  }

  export type product_imageUncheckedCreateNestedOneWithoutProduct_dataInput = {
    create?: XOR<product_imageCreateWithoutProduct_dataInput, product_imageUncheckedCreateWithoutProduct_dataInput>
    connectOrCreate?: product_imageCreateOrConnectWithoutProduct_dataInput
    connect?: product_imageWhereUniqueInput
  }

  export type product_reviewUncheckedCreateNestedManyWithoutProduct_dataInput = {
    create?: XOR<Enumerable<product_reviewCreateWithoutProduct_dataInput>, Enumerable<product_reviewUncheckedCreateWithoutProduct_dataInput>>
    connectOrCreate?: Enumerable<product_reviewCreateOrConnectWithoutProduct_dataInput>
    createMany?: product_reviewCreateManyProduct_dataInputEnvelope
    connect?: Enumerable<product_reviewWhereUniqueInput>
  }

  export type NullableEnumproduct_data_sizeFieldUpdateOperationsInput = {
    set?: product_data_size | null
  }

  export type NullableEnumproduct_data_productColorFieldUpdateOperationsInput = {
    set?: product_data_productColor | null
  }

  export type order_dataUpdateManyWithoutProduct_dataNestedInput = {
    create?: XOR<Enumerable<order_dataCreateWithoutProduct_dataInput>, Enumerable<order_dataUncheckedCreateWithoutProduct_dataInput>>
    connectOrCreate?: Enumerable<order_dataCreateOrConnectWithoutProduct_dataInput>
    upsert?: Enumerable<order_dataUpsertWithWhereUniqueWithoutProduct_dataInput>
    createMany?: order_dataCreateManyProduct_dataInputEnvelope
    set?: Enumerable<order_dataWhereUniqueInput>
    disconnect?: Enumerable<order_dataWhereUniqueInput>
    delete?: Enumerable<order_dataWhereUniqueInput>
    connect?: Enumerable<order_dataWhereUniqueInput>
    update?: Enumerable<order_dataUpdateWithWhereUniqueWithoutProduct_dataInput>
    updateMany?: Enumerable<order_dataUpdateManyWithWhereWithoutProduct_dataInput>
    deleteMany?: Enumerable<order_dataScalarWhereInput>
  }

  export type product_imageUpdateOneWithoutProduct_dataNestedInput = {
    create?: XOR<product_imageCreateWithoutProduct_dataInput, product_imageUncheckedCreateWithoutProduct_dataInput>
    connectOrCreate?: product_imageCreateOrConnectWithoutProduct_dataInput
    upsert?: product_imageUpsertWithoutProduct_dataInput
    disconnect?: boolean
    delete?: boolean
    connect?: product_imageWhereUniqueInput
    update?: XOR<product_imageUpdateWithoutProduct_dataInput, product_imageUncheckedUpdateWithoutProduct_dataInput>
  }

  export type product_reviewUpdateManyWithoutProduct_dataNestedInput = {
    create?: XOR<Enumerable<product_reviewCreateWithoutProduct_dataInput>, Enumerable<product_reviewUncheckedCreateWithoutProduct_dataInput>>
    connectOrCreate?: Enumerable<product_reviewCreateOrConnectWithoutProduct_dataInput>
    upsert?: Enumerable<product_reviewUpsertWithWhereUniqueWithoutProduct_dataInput>
    createMany?: product_reviewCreateManyProduct_dataInputEnvelope
    set?: Enumerable<product_reviewWhereUniqueInput>
    disconnect?: Enumerable<product_reviewWhereUniqueInput>
    delete?: Enumerable<product_reviewWhereUniqueInput>
    connect?: Enumerable<product_reviewWhereUniqueInput>
    update?: Enumerable<product_reviewUpdateWithWhereUniqueWithoutProduct_dataInput>
    updateMany?: Enumerable<product_reviewUpdateManyWithWhereWithoutProduct_dataInput>
    deleteMany?: Enumerable<product_reviewScalarWhereInput>
  }

  export type order_dataUncheckedUpdateManyWithoutProduct_dataNestedInput = {
    create?: XOR<Enumerable<order_dataCreateWithoutProduct_dataInput>, Enumerable<order_dataUncheckedCreateWithoutProduct_dataInput>>
    connectOrCreate?: Enumerable<order_dataCreateOrConnectWithoutProduct_dataInput>
    upsert?: Enumerable<order_dataUpsertWithWhereUniqueWithoutProduct_dataInput>
    createMany?: order_dataCreateManyProduct_dataInputEnvelope
    set?: Enumerable<order_dataWhereUniqueInput>
    disconnect?: Enumerable<order_dataWhereUniqueInput>
    delete?: Enumerable<order_dataWhereUniqueInput>
    connect?: Enumerable<order_dataWhereUniqueInput>
    update?: Enumerable<order_dataUpdateWithWhereUniqueWithoutProduct_dataInput>
    updateMany?: Enumerable<order_dataUpdateManyWithWhereWithoutProduct_dataInput>
    deleteMany?: Enumerable<order_dataScalarWhereInput>
  }

  export type product_imageUncheckedUpdateOneWithoutProduct_dataNestedInput = {
    create?: XOR<product_imageCreateWithoutProduct_dataInput, product_imageUncheckedCreateWithoutProduct_dataInput>
    connectOrCreate?: product_imageCreateOrConnectWithoutProduct_dataInput
    upsert?: product_imageUpsertWithoutProduct_dataInput
    disconnect?: boolean
    delete?: boolean
    connect?: product_imageWhereUniqueInput
    update?: XOR<product_imageUpdateWithoutProduct_dataInput, product_imageUncheckedUpdateWithoutProduct_dataInput>
  }

  export type product_reviewUncheckedUpdateManyWithoutProduct_dataNestedInput = {
    create?: XOR<Enumerable<product_reviewCreateWithoutProduct_dataInput>, Enumerable<product_reviewUncheckedCreateWithoutProduct_dataInput>>
    connectOrCreate?: Enumerable<product_reviewCreateOrConnectWithoutProduct_dataInput>
    upsert?: Enumerable<product_reviewUpsertWithWhereUniqueWithoutProduct_dataInput>
    createMany?: product_reviewCreateManyProduct_dataInputEnvelope
    set?: Enumerable<product_reviewWhereUniqueInput>
    disconnect?: Enumerable<product_reviewWhereUniqueInput>
    delete?: Enumerable<product_reviewWhereUniqueInput>
    connect?: Enumerable<product_reviewWhereUniqueInput>
    update?: Enumerable<product_reviewUpdateWithWhereUniqueWithoutProduct_dataInput>
    updateMany?: Enumerable<product_reviewUpdateManyWithWhereWithoutProduct_dataInput>
    deleteMany?: Enumerable<product_reviewScalarWhereInput>
  }

  export type product_dataCreateNestedOneWithoutProduct_imageInput = {
    create?: XOR<product_dataCreateWithoutProduct_imageInput, product_dataUncheckedCreateWithoutProduct_imageInput>
    connectOrCreate?: product_dataCreateOrConnectWithoutProduct_imageInput
    connect?: product_dataWhereUniqueInput
  }

  export type product_dataUpdateOneRequiredWithoutProduct_imageNestedInput = {
    create?: XOR<product_dataCreateWithoutProduct_imageInput, product_dataUncheckedCreateWithoutProduct_imageInput>
    connectOrCreate?: product_dataCreateOrConnectWithoutProduct_imageInput
    upsert?: product_dataUpsertWithoutProduct_imageInput
    connect?: product_dataWhereUniqueInput
    update?: XOR<product_dataUpdateWithoutProduct_imageInput, product_dataUncheckedUpdateWithoutProduct_imageInput>
  }

  export type product_dataCreateNestedOneWithoutProduct_reviewInput = {
    create?: XOR<product_dataCreateWithoutProduct_reviewInput, product_dataUncheckedCreateWithoutProduct_reviewInput>
    connectOrCreate?: product_dataCreateOrConnectWithoutProduct_reviewInput
    connect?: product_dataWhereUniqueInput
  }

  export type user_dataCreateNestedOneWithoutProduct_reviewInput = {
    create?: XOR<user_dataCreateWithoutProduct_reviewInput, user_dataUncheckedCreateWithoutProduct_reviewInput>
    connectOrCreate?: user_dataCreateOrConnectWithoutProduct_reviewInput
    connect?: user_dataWhereUniqueInput
  }

  export type product_dataUpdateOneWithoutProduct_reviewNestedInput = {
    create?: XOR<product_dataCreateWithoutProduct_reviewInput, product_dataUncheckedCreateWithoutProduct_reviewInput>
    connectOrCreate?: product_dataCreateOrConnectWithoutProduct_reviewInput
    upsert?: product_dataUpsertWithoutProduct_reviewInput
    disconnect?: boolean
    delete?: boolean
    connect?: product_dataWhereUniqueInput
    update?: XOR<product_dataUpdateWithoutProduct_reviewInput, product_dataUncheckedUpdateWithoutProduct_reviewInput>
  }

  export type user_dataUpdateOneWithoutProduct_reviewNestedInput = {
    create?: XOR<user_dataCreateWithoutProduct_reviewInput, user_dataUncheckedCreateWithoutProduct_reviewInput>
    connectOrCreate?: user_dataCreateOrConnectWithoutProduct_reviewInput
    upsert?: user_dataUpsertWithoutProduct_reviewInput
    disconnect?: boolean
    delete?: boolean
    connect?: user_dataWhereUniqueInput
    update?: XOR<user_dataUpdateWithoutProduct_reviewInput, user_dataUncheckedUpdateWithoutProduct_reviewInput>
  }

  export type order_dataCreateNestedManyWithoutSeller_dataInput = {
    create?: XOR<Enumerable<order_dataCreateWithoutSeller_dataInput>, Enumerable<order_dataUncheckedCreateWithoutSeller_dataInput>>
    connectOrCreate?: Enumerable<order_dataCreateOrConnectWithoutSeller_dataInput>
    createMany?: order_dataCreateManySeller_dataInputEnvelope
    connect?: Enumerable<order_dataWhereUniqueInput>
  }

  export type order_dataUncheckedCreateNestedManyWithoutSeller_dataInput = {
    create?: XOR<Enumerable<order_dataCreateWithoutSeller_dataInput>, Enumerable<order_dataUncheckedCreateWithoutSeller_dataInput>>
    connectOrCreate?: Enumerable<order_dataCreateOrConnectWithoutSeller_dataInput>
    createMany?: order_dataCreateManySeller_dataInputEnvelope
    connect?: Enumerable<order_dataWhereUniqueInput>
  }

  export type order_dataUpdateManyWithoutSeller_dataNestedInput = {
    create?: XOR<Enumerable<order_dataCreateWithoutSeller_dataInput>, Enumerable<order_dataUncheckedCreateWithoutSeller_dataInput>>
    connectOrCreate?: Enumerable<order_dataCreateOrConnectWithoutSeller_dataInput>
    upsert?: Enumerable<order_dataUpsertWithWhereUniqueWithoutSeller_dataInput>
    createMany?: order_dataCreateManySeller_dataInputEnvelope
    set?: Enumerable<order_dataWhereUniqueInput>
    disconnect?: Enumerable<order_dataWhereUniqueInput>
    delete?: Enumerable<order_dataWhereUniqueInput>
    connect?: Enumerable<order_dataWhereUniqueInput>
    update?: Enumerable<order_dataUpdateWithWhereUniqueWithoutSeller_dataInput>
    updateMany?: Enumerable<order_dataUpdateManyWithWhereWithoutSeller_dataInput>
    deleteMany?: Enumerable<order_dataScalarWhereInput>
  }

  export type order_dataUncheckedUpdateManyWithoutSeller_dataNestedInput = {
    create?: XOR<Enumerable<order_dataCreateWithoutSeller_dataInput>, Enumerable<order_dataUncheckedCreateWithoutSeller_dataInput>>
    connectOrCreate?: Enumerable<order_dataCreateOrConnectWithoutSeller_dataInput>
    upsert?: Enumerable<order_dataUpsertWithWhereUniqueWithoutSeller_dataInput>
    createMany?: order_dataCreateManySeller_dataInputEnvelope
    set?: Enumerable<order_dataWhereUniqueInput>
    disconnect?: Enumerable<order_dataWhereUniqueInput>
    delete?: Enumerable<order_dataWhereUniqueInput>
    connect?: Enumerable<order_dataWhereUniqueInput>
    update?: Enumerable<order_dataUpdateWithWhereUniqueWithoutSeller_dataInput>
    updateMany?: Enumerable<order_dataUpdateManyWithWhereWithoutSeller_dataInput>
    deleteMany?: Enumerable<order_dataScalarWhereInput>
  }

  export type order_dataCreateNestedManyWithoutShipper_dataInput = {
    create?: XOR<Enumerable<order_dataCreateWithoutShipper_dataInput>, Enumerable<order_dataUncheckedCreateWithoutShipper_dataInput>>
    connectOrCreate?: Enumerable<order_dataCreateOrConnectWithoutShipper_dataInput>
    createMany?: order_dataCreateManyShipper_dataInputEnvelope
    connect?: Enumerable<order_dataWhereUniqueInput>
  }

  export type order_dataUncheckedCreateNestedManyWithoutShipper_dataInput = {
    create?: XOR<Enumerable<order_dataCreateWithoutShipper_dataInput>, Enumerable<order_dataUncheckedCreateWithoutShipper_dataInput>>
    connectOrCreate?: Enumerable<order_dataCreateOrConnectWithoutShipper_dataInput>
    createMany?: order_dataCreateManyShipper_dataInputEnvelope
    connect?: Enumerable<order_dataWhereUniqueInput>
  }

  export type order_dataUpdateManyWithoutShipper_dataNestedInput = {
    create?: XOR<Enumerable<order_dataCreateWithoutShipper_dataInput>, Enumerable<order_dataUncheckedCreateWithoutShipper_dataInput>>
    connectOrCreate?: Enumerable<order_dataCreateOrConnectWithoutShipper_dataInput>
    upsert?: Enumerable<order_dataUpsertWithWhereUniqueWithoutShipper_dataInput>
    createMany?: order_dataCreateManyShipper_dataInputEnvelope
    set?: Enumerable<order_dataWhereUniqueInput>
    disconnect?: Enumerable<order_dataWhereUniqueInput>
    delete?: Enumerable<order_dataWhereUniqueInput>
    connect?: Enumerable<order_dataWhereUniqueInput>
    update?: Enumerable<order_dataUpdateWithWhereUniqueWithoutShipper_dataInput>
    updateMany?: Enumerable<order_dataUpdateManyWithWhereWithoutShipper_dataInput>
    deleteMany?: Enumerable<order_dataScalarWhereInput>
  }

  export type order_dataUncheckedUpdateManyWithoutShipper_dataNestedInput = {
    create?: XOR<Enumerable<order_dataCreateWithoutShipper_dataInput>, Enumerable<order_dataUncheckedCreateWithoutShipper_dataInput>>
    connectOrCreate?: Enumerable<order_dataCreateOrConnectWithoutShipper_dataInput>
    upsert?: Enumerable<order_dataUpsertWithWhereUniqueWithoutShipper_dataInput>
    createMany?: order_dataCreateManyShipper_dataInputEnvelope
    set?: Enumerable<order_dataWhereUniqueInput>
    disconnect?: Enumerable<order_dataWhereUniqueInput>
    delete?: Enumerable<order_dataWhereUniqueInput>
    connect?: Enumerable<order_dataWhereUniqueInput>
    update?: Enumerable<order_dataUpdateWithWhereUniqueWithoutShipper_dataInput>
    updateMany?: Enumerable<order_dataUpdateManyWithWhereWithoutShipper_dataInput>
    deleteMany?: Enumerable<order_dataScalarWhereInput>
  }

  export type user_dataCreateNestedOneWithoutUser_addressInput = {
    create?: XOR<user_dataCreateWithoutUser_addressInput, user_dataUncheckedCreateWithoutUser_addressInput>
    connectOrCreate?: user_dataCreateOrConnectWithoutUser_addressInput
    connect?: user_dataWhereUniqueInput
  }

  export type user_dataUpdateOneRequiredWithoutUser_addressNestedInput = {
    create?: XOR<user_dataCreateWithoutUser_addressInput, user_dataUncheckedCreateWithoutUser_addressInput>
    connectOrCreate?: user_dataCreateOrConnectWithoutUser_addressInput
    upsert?: user_dataUpsertWithoutUser_addressInput
    connect?: user_dataWhereUniqueInput
    update?: XOR<user_dataUpdateWithoutUser_addressInput, user_dataUncheckedUpdateWithoutUser_addressInput>
  }

  export type order_dataCreateNestedManyWithoutUser_dataInput = {
    create?: XOR<Enumerable<order_dataCreateWithoutUser_dataInput>, Enumerable<order_dataUncheckedCreateWithoutUser_dataInput>>
    connectOrCreate?: Enumerable<order_dataCreateOrConnectWithoutUser_dataInput>
    createMany?: order_dataCreateManyUser_dataInputEnvelope
    connect?: Enumerable<order_dataWhereUniqueInput>
  }

  export type product_reviewCreateNestedManyWithoutUser_dataInput = {
    create?: XOR<Enumerable<product_reviewCreateWithoutUser_dataInput>, Enumerable<product_reviewUncheckedCreateWithoutUser_dataInput>>
    connectOrCreate?: Enumerable<product_reviewCreateOrConnectWithoutUser_dataInput>
    createMany?: product_reviewCreateManyUser_dataInputEnvelope
    connect?: Enumerable<product_reviewWhereUniqueInput>
  }

  export type user_addressCreateNestedOneWithoutUser_dataInput = {
    create?: XOR<user_addressCreateWithoutUser_dataInput, user_addressUncheckedCreateWithoutUser_dataInput>
    connectOrCreate?: user_addressCreateOrConnectWithoutUser_dataInput
    connect?: user_addressWhereUniqueInput
  }

  export type order_dataUncheckedCreateNestedManyWithoutUser_dataInput = {
    create?: XOR<Enumerable<order_dataCreateWithoutUser_dataInput>, Enumerable<order_dataUncheckedCreateWithoutUser_dataInput>>
    connectOrCreate?: Enumerable<order_dataCreateOrConnectWithoutUser_dataInput>
    createMany?: order_dataCreateManyUser_dataInputEnvelope
    connect?: Enumerable<order_dataWhereUniqueInput>
  }

  export type product_reviewUncheckedCreateNestedManyWithoutUser_dataInput = {
    create?: XOR<Enumerable<product_reviewCreateWithoutUser_dataInput>, Enumerable<product_reviewUncheckedCreateWithoutUser_dataInput>>
    connectOrCreate?: Enumerable<product_reviewCreateOrConnectWithoutUser_dataInput>
    createMany?: product_reviewCreateManyUser_dataInputEnvelope
    connect?: Enumerable<product_reviewWhereUniqueInput>
  }

  export type user_addressUncheckedCreateNestedOneWithoutUser_dataInput = {
    create?: XOR<user_addressCreateWithoutUser_dataInput, user_addressUncheckedCreateWithoutUser_dataInput>
    connectOrCreate?: user_addressCreateOrConnectWithoutUser_dataInput
    connect?: user_addressWhereUniqueInput
  }

  export type order_dataUpdateManyWithoutUser_dataNestedInput = {
    create?: XOR<Enumerable<order_dataCreateWithoutUser_dataInput>, Enumerable<order_dataUncheckedCreateWithoutUser_dataInput>>
    connectOrCreate?: Enumerable<order_dataCreateOrConnectWithoutUser_dataInput>
    upsert?: Enumerable<order_dataUpsertWithWhereUniqueWithoutUser_dataInput>
    createMany?: order_dataCreateManyUser_dataInputEnvelope
    set?: Enumerable<order_dataWhereUniqueInput>
    disconnect?: Enumerable<order_dataWhereUniqueInput>
    delete?: Enumerable<order_dataWhereUniqueInput>
    connect?: Enumerable<order_dataWhereUniqueInput>
    update?: Enumerable<order_dataUpdateWithWhereUniqueWithoutUser_dataInput>
    updateMany?: Enumerable<order_dataUpdateManyWithWhereWithoutUser_dataInput>
    deleteMany?: Enumerable<order_dataScalarWhereInput>
  }

  export type product_reviewUpdateManyWithoutUser_dataNestedInput = {
    create?: XOR<Enumerable<product_reviewCreateWithoutUser_dataInput>, Enumerable<product_reviewUncheckedCreateWithoutUser_dataInput>>
    connectOrCreate?: Enumerable<product_reviewCreateOrConnectWithoutUser_dataInput>
    upsert?: Enumerable<product_reviewUpsertWithWhereUniqueWithoutUser_dataInput>
    createMany?: product_reviewCreateManyUser_dataInputEnvelope
    set?: Enumerable<product_reviewWhereUniqueInput>
    disconnect?: Enumerable<product_reviewWhereUniqueInput>
    delete?: Enumerable<product_reviewWhereUniqueInput>
    connect?: Enumerable<product_reviewWhereUniqueInput>
    update?: Enumerable<product_reviewUpdateWithWhereUniqueWithoutUser_dataInput>
    updateMany?: Enumerable<product_reviewUpdateManyWithWhereWithoutUser_dataInput>
    deleteMany?: Enumerable<product_reviewScalarWhereInput>
  }

  export type user_addressUpdateOneWithoutUser_dataNestedInput = {
    create?: XOR<user_addressCreateWithoutUser_dataInput, user_addressUncheckedCreateWithoutUser_dataInput>
    connectOrCreate?: user_addressCreateOrConnectWithoutUser_dataInput
    upsert?: user_addressUpsertWithoutUser_dataInput
    disconnect?: boolean
    delete?: boolean
    connect?: user_addressWhereUniqueInput
    update?: XOR<user_addressUpdateWithoutUser_dataInput, user_addressUncheckedUpdateWithoutUser_dataInput>
  }

  export type order_dataUncheckedUpdateManyWithoutUser_dataNestedInput = {
    create?: XOR<Enumerable<order_dataCreateWithoutUser_dataInput>, Enumerable<order_dataUncheckedCreateWithoutUser_dataInput>>
    connectOrCreate?: Enumerable<order_dataCreateOrConnectWithoutUser_dataInput>
    upsert?: Enumerable<order_dataUpsertWithWhereUniqueWithoutUser_dataInput>
    createMany?: order_dataCreateManyUser_dataInputEnvelope
    set?: Enumerable<order_dataWhereUniqueInput>
    disconnect?: Enumerable<order_dataWhereUniqueInput>
    delete?: Enumerable<order_dataWhereUniqueInput>
    connect?: Enumerable<order_dataWhereUniqueInput>
    update?: Enumerable<order_dataUpdateWithWhereUniqueWithoutUser_dataInput>
    updateMany?: Enumerable<order_dataUpdateManyWithWhereWithoutUser_dataInput>
    deleteMany?: Enumerable<order_dataScalarWhereInput>
  }

  export type product_reviewUncheckedUpdateManyWithoutUser_dataNestedInput = {
    create?: XOR<Enumerable<product_reviewCreateWithoutUser_dataInput>, Enumerable<product_reviewUncheckedCreateWithoutUser_dataInput>>
    connectOrCreate?: Enumerable<product_reviewCreateOrConnectWithoutUser_dataInput>
    upsert?: Enumerable<product_reviewUpsertWithWhereUniqueWithoutUser_dataInput>
    createMany?: product_reviewCreateManyUser_dataInputEnvelope
    set?: Enumerable<product_reviewWhereUniqueInput>
    disconnect?: Enumerable<product_reviewWhereUniqueInput>
    delete?: Enumerable<product_reviewWhereUniqueInput>
    connect?: Enumerable<product_reviewWhereUniqueInput>
    update?: Enumerable<product_reviewUpdateWithWhereUniqueWithoutUser_dataInput>
    updateMany?: Enumerable<product_reviewUpdateManyWithWhereWithoutUser_dataInput>
    deleteMany?: Enumerable<product_reviewScalarWhereInput>
  }

  export type user_addressUncheckedUpdateOneWithoutUser_dataNestedInput = {
    create?: XOR<user_addressCreateWithoutUser_dataInput, user_addressUncheckedCreateWithoutUser_dataInput>
    connectOrCreate?: user_addressCreateOrConnectWithoutUser_dataInput
    upsert?: user_addressUpsertWithoutUser_dataInput
    disconnect?: boolean
    delete?: boolean
    connect?: user_addressWhereUniqueInput
    update?: XOR<user_addressUpdateWithoutUser_dataInput, user_addressUncheckedUpdateWithoutUser_dataInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NestedEnumproduct_data_sizeNullableFilter = {
    equals?: product_data_size | null
    in?: Enumerable<product_data_size> | null
    notIn?: Enumerable<product_data_size> | null
    not?: NestedEnumproduct_data_sizeNullableFilter | product_data_size | null
  }

  export type NestedEnumproduct_data_productColorNullableFilter = {
    equals?: product_data_productColor | null
    in?: Enumerable<product_data_productColor> | null
    notIn?: Enumerable<product_data_productColor> | null
    not?: NestedEnumproduct_data_productColorNullableFilter | product_data_productColor | null
  }

  export type NestedEnumproduct_data_sizeNullableWithAggregatesFilter = {
    equals?: product_data_size | null
    in?: Enumerable<product_data_size> | null
    notIn?: Enumerable<product_data_size> | null
    not?: NestedEnumproduct_data_sizeNullableWithAggregatesFilter | product_data_size | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumproduct_data_sizeNullableFilter
    _max?: NestedEnumproduct_data_sizeNullableFilter
  }

  export type NestedEnumproduct_data_productColorNullableWithAggregatesFilter = {
    equals?: product_data_productColor | null
    in?: Enumerable<product_data_productColor> | null
    notIn?: Enumerable<product_data_productColor> | null
    not?: NestedEnumproduct_data_productColorNullableWithAggregatesFilter | product_data_productColor | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumproduct_data_productColorNullableFilter
    _max?: NestedEnumproduct_data_productColorNullableFilter
  }

  export type product_dataCreateWithoutOrder_dataInput = {
    name?: string | null
    price?: number | null
    discount?: number | null
    quantityAvailable?: number | null
    category?: string | null
    currentPrice?: number | null
    size?: product_data_size | null
    productColor?: product_data_productColor | null
    product_image?: product_imageCreateNestedOneWithoutProduct_dataInput
    product_review?: product_reviewCreateNestedManyWithoutProduct_dataInput
  }

  export type product_dataUncheckedCreateWithoutOrder_dataInput = {
    product_id?: number
    name?: string | null
    price?: number | null
    discount?: number | null
    quantityAvailable?: number | null
    category?: string | null
    currentPrice?: number | null
    size?: product_data_size | null
    productColor?: product_data_productColor | null
    product_image?: product_imageUncheckedCreateNestedOneWithoutProduct_dataInput
    product_review?: product_reviewUncheckedCreateNestedManyWithoutProduct_dataInput
  }

  export type product_dataCreateOrConnectWithoutOrder_dataInput = {
    where: product_dataWhereUniqueInput
    create: XOR<product_dataCreateWithoutOrder_dataInput, product_dataUncheckedCreateWithoutOrder_dataInput>
  }

  export type shipper_dataCreateWithoutOrder_dataInput = {
    shipper_company?: string | null
    service_type?: string | null
  }

  export type shipper_dataUncheckedCreateWithoutOrder_dataInput = {
    shipper_id?: number
    shipper_company?: string | null
    service_type?: string | null
  }

  export type shipper_dataCreateOrConnectWithoutOrder_dataInput = {
    where: shipper_dataWhereUniqueInput
    create: XOR<shipper_dataCreateWithoutOrder_dataInput, shipper_dataUncheckedCreateWithoutOrder_dataInput>
  }

  export type seller_dataCreateWithoutOrder_dataInput = {
    product_brand?: string | null
    access_name?: string | null
    access_pass?: string | null
  }

  export type seller_dataUncheckedCreateWithoutOrder_dataInput = {
    brand_id?: number
    product_brand?: string | null
    access_name?: string | null
    access_pass?: string | null
  }

  export type seller_dataCreateOrConnectWithoutOrder_dataInput = {
    where: seller_dataWhereUniqueInput
    create: XOR<seller_dataCreateWithoutOrder_dataInput, seller_dataUncheckedCreateWithoutOrder_dataInput>
  }

  export type user_dataCreateWithoutOrder_dataInput = {
    user_firstName?: string | null
    user_email?: string | null
    user_pass?: string | null
    user_lastName?: string | null
    product_review?: product_reviewCreateNestedManyWithoutUser_dataInput
    user_address?: user_addressCreateNestedOneWithoutUser_dataInput
  }

  export type user_dataUncheckedCreateWithoutOrder_dataInput = {
    user_id?: number
    user_firstName?: string | null
    user_email?: string | null
    user_pass?: string | null
    user_lastName?: string | null
    product_review?: product_reviewUncheckedCreateNestedManyWithoutUser_dataInput
    user_address?: user_addressUncheckedCreateNestedOneWithoutUser_dataInput
  }

  export type user_dataCreateOrConnectWithoutOrder_dataInput = {
    where: user_dataWhereUniqueInput
    create: XOR<user_dataCreateWithoutOrder_dataInput, user_dataUncheckedCreateWithoutOrder_dataInput>
  }

  export type product_dataUpsertWithoutOrder_dataInput = {
    update: XOR<product_dataUpdateWithoutOrder_dataInput, product_dataUncheckedUpdateWithoutOrder_dataInput>
    create: XOR<product_dataCreateWithoutOrder_dataInput, product_dataUncheckedCreateWithoutOrder_dataInput>
  }

  export type product_dataUpdateWithoutOrder_dataInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    quantityAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    size?: NullableEnumproduct_data_sizeFieldUpdateOperationsInput | product_data_size | null
    productColor?: NullableEnumproduct_data_productColorFieldUpdateOperationsInput | product_data_productColor | null
    product_image?: product_imageUpdateOneWithoutProduct_dataNestedInput
    product_review?: product_reviewUpdateManyWithoutProduct_dataNestedInput
  }

  export type product_dataUncheckedUpdateWithoutOrder_dataInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    quantityAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    size?: NullableEnumproduct_data_sizeFieldUpdateOperationsInput | product_data_size | null
    productColor?: NullableEnumproduct_data_productColorFieldUpdateOperationsInput | product_data_productColor | null
    product_image?: product_imageUncheckedUpdateOneWithoutProduct_dataNestedInput
    product_review?: product_reviewUncheckedUpdateManyWithoutProduct_dataNestedInput
  }

  export type shipper_dataUpsertWithoutOrder_dataInput = {
    update: XOR<shipper_dataUpdateWithoutOrder_dataInput, shipper_dataUncheckedUpdateWithoutOrder_dataInput>
    create: XOR<shipper_dataCreateWithoutOrder_dataInput, shipper_dataUncheckedCreateWithoutOrder_dataInput>
  }

  export type shipper_dataUpdateWithoutOrder_dataInput = {
    shipper_company?: NullableStringFieldUpdateOperationsInput | string | null
    service_type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type shipper_dataUncheckedUpdateWithoutOrder_dataInput = {
    shipper_id?: IntFieldUpdateOperationsInput | number
    shipper_company?: NullableStringFieldUpdateOperationsInput | string | null
    service_type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type seller_dataUpsertWithoutOrder_dataInput = {
    update: XOR<seller_dataUpdateWithoutOrder_dataInput, seller_dataUncheckedUpdateWithoutOrder_dataInput>
    create: XOR<seller_dataCreateWithoutOrder_dataInput, seller_dataUncheckedCreateWithoutOrder_dataInput>
  }

  export type seller_dataUpdateWithoutOrder_dataInput = {
    product_brand?: NullableStringFieldUpdateOperationsInput | string | null
    access_name?: NullableStringFieldUpdateOperationsInput | string | null
    access_pass?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type seller_dataUncheckedUpdateWithoutOrder_dataInput = {
    brand_id?: IntFieldUpdateOperationsInput | number
    product_brand?: NullableStringFieldUpdateOperationsInput | string | null
    access_name?: NullableStringFieldUpdateOperationsInput | string | null
    access_pass?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_dataUpsertWithoutOrder_dataInput = {
    update: XOR<user_dataUpdateWithoutOrder_dataInput, user_dataUncheckedUpdateWithoutOrder_dataInput>
    create: XOR<user_dataCreateWithoutOrder_dataInput, user_dataUncheckedCreateWithoutOrder_dataInput>
  }

  export type user_dataUpdateWithoutOrder_dataInput = {
    user_firstName?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    user_pass?: NullableStringFieldUpdateOperationsInput | string | null
    user_lastName?: NullableStringFieldUpdateOperationsInput | string | null
    product_review?: product_reviewUpdateManyWithoutUser_dataNestedInput
    user_address?: user_addressUpdateOneWithoutUser_dataNestedInput
  }

  export type user_dataUncheckedUpdateWithoutOrder_dataInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_firstName?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    user_pass?: NullableStringFieldUpdateOperationsInput | string | null
    user_lastName?: NullableStringFieldUpdateOperationsInput | string | null
    product_review?: product_reviewUncheckedUpdateManyWithoutUser_dataNestedInput
    user_address?: user_addressUncheckedUpdateOneWithoutUser_dataNestedInput
  }

  export type order_dataCreateWithoutProduct_dataInput = {
    order_id: number
    order_date?: Date | string | null
    transaction_status?: string | null
    quantity?: number | null
    total_price?: number | null
    shipper_data?: shipper_dataCreateNestedOneWithoutOrder_dataInput
    seller_data?: seller_dataCreateNestedOneWithoutOrder_dataInput
    user_data?: user_dataCreateNestedOneWithoutOrder_dataInput
  }

  export type order_dataUncheckedCreateWithoutProduct_dataInput = {
    order_id: number
    order_date?: Date | string | null
    transaction_status?: string | null
    quantity?: number | null
    total_price?: number | null
    shipper_id?: number | null
    seller_id?: number | null
    user_id?: number | null
  }

  export type order_dataCreateOrConnectWithoutProduct_dataInput = {
    where: order_dataWhereUniqueInput
    create: XOR<order_dataCreateWithoutProduct_dataInput, order_dataUncheckedCreateWithoutProduct_dataInput>
  }

  export type order_dataCreateManyProduct_dataInputEnvelope = {
    data: Enumerable<order_dataCreateManyProduct_dataInput>
    skipDuplicates?: boolean
  }

  export type product_imageCreateWithoutProduct_dataInput = {
    image_id?: number | null
    url?: string | null
  }

  export type product_imageUncheckedCreateWithoutProduct_dataInput = {
    image_id?: number | null
    url?: string | null
  }

  export type product_imageCreateOrConnectWithoutProduct_dataInput = {
    where: product_imageWhereUniqueInput
    create: XOR<product_imageCreateWithoutProduct_dataInput, product_imageUncheckedCreateWithoutProduct_dataInput>
  }

  export type product_reviewCreateWithoutProduct_dataInput = {
    rate?: number | null
    comment?: string | null
    user_data?: user_dataCreateNestedOneWithoutProduct_reviewInput
  }

  export type product_reviewUncheckedCreateWithoutProduct_dataInput = {
    review_id?: number
    rate?: number | null
    comment?: string | null
    user_id?: number | null
  }

  export type product_reviewCreateOrConnectWithoutProduct_dataInput = {
    where: product_reviewWhereUniqueInput
    create: XOR<product_reviewCreateWithoutProduct_dataInput, product_reviewUncheckedCreateWithoutProduct_dataInput>
  }

  export type product_reviewCreateManyProduct_dataInputEnvelope = {
    data: Enumerable<product_reviewCreateManyProduct_dataInput>
    skipDuplicates?: boolean
  }

  export type order_dataUpsertWithWhereUniqueWithoutProduct_dataInput = {
    where: order_dataWhereUniqueInput
    update: XOR<order_dataUpdateWithoutProduct_dataInput, order_dataUncheckedUpdateWithoutProduct_dataInput>
    create: XOR<order_dataCreateWithoutProduct_dataInput, order_dataUncheckedCreateWithoutProduct_dataInput>
  }

  export type order_dataUpdateWithWhereUniqueWithoutProduct_dataInput = {
    where: order_dataWhereUniqueInput
    data: XOR<order_dataUpdateWithoutProduct_dataInput, order_dataUncheckedUpdateWithoutProduct_dataInput>
  }

  export type order_dataUpdateManyWithWhereWithoutProduct_dataInput = {
    where: order_dataScalarWhereInput
    data: XOR<order_dataUpdateManyMutationInput, order_dataUncheckedUpdateManyWithoutOrder_dataInput>
  }

  export type order_dataScalarWhereInput = {
    AND?: Enumerable<order_dataScalarWhereInput>
    OR?: Enumerable<order_dataScalarWhereInput>
    NOT?: Enumerable<order_dataScalarWhereInput>
    order_id?: IntFilter | number
    order_date?: DateTimeNullableFilter | Date | string | null
    transaction_status?: StringNullableFilter | string | null
    quantity?: IntNullableFilter | number | null
    total_price?: FloatNullableFilter | number | null
    product_id?: IntNullableFilter | number | null
    shipper_id?: IntNullableFilter | number | null
    seller_id?: IntNullableFilter | number | null
    user_id?: IntNullableFilter | number | null
  }

  export type product_imageUpsertWithoutProduct_dataInput = {
    update: XOR<product_imageUpdateWithoutProduct_dataInput, product_imageUncheckedUpdateWithoutProduct_dataInput>
    create: XOR<product_imageCreateWithoutProduct_dataInput, product_imageUncheckedCreateWithoutProduct_dataInput>
  }

  export type product_imageUpdateWithoutProduct_dataInput = {
    image_id?: NullableIntFieldUpdateOperationsInput | number | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type product_imageUncheckedUpdateWithoutProduct_dataInput = {
    image_id?: NullableIntFieldUpdateOperationsInput | number | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type product_reviewUpsertWithWhereUniqueWithoutProduct_dataInput = {
    where: product_reviewWhereUniqueInput
    update: XOR<product_reviewUpdateWithoutProduct_dataInput, product_reviewUncheckedUpdateWithoutProduct_dataInput>
    create: XOR<product_reviewCreateWithoutProduct_dataInput, product_reviewUncheckedCreateWithoutProduct_dataInput>
  }

  export type product_reviewUpdateWithWhereUniqueWithoutProduct_dataInput = {
    where: product_reviewWhereUniqueInput
    data: XOR<product_reviewUpdateWithoutProduct_dataInput, product_reviewUncheckedUpdateWithoutProduct_dataInput>
  }

  export type product_reviewUpdateManyWithWhereWithoutProduct_dataInput = {
    where: product_reviewScalarWhereInput
    data: XOR<product_reviewUpdateManyMutationInput, product_reviewUncheckedUpdateManyWithoutProduct_reviewInput>
  }

  export type product_reviewScalarWhereInput = {
    AND?: Enumerable<product_reviewScalarWhereInput>
    OR?: Enumerable<product_reviewScalarWhereInput>
    NOT?: Enumerable<product_reviewScalarWhereInput>
    review_id?: IntFilter | number
    rate?: FloatNullableFilter | number | null
    comment?: StringNullableFilter | string | null
    product_id?: IntNullableFilter | number | null
    user_id?: IntNullableFilter | number | null
  }

  export type product_dataCreateWithoutProduct_imageInput = {
    name?: string | null
    price?: number | null
    discount?: number | null
    quantityAvailable?: number | null
    category?: string | null
    currentPrice?: number | null
    size?: product_data_size | null
    productColor?: product_data_productColor | null
    order_data?: order_dataCreateNestedManyWithoutProduct_dataInput
    product_review?: product_reviewCreateNestedManyWithoutProduct_dataInput
  }

  export type product_dataUncheckedCreateWithoutProduct_imageInput = {
    product_id?: number
    name?: string | null
    price?: number | null
    discount?: number | null
    quantityAvailable?: number | null
    category?: string | null
    currentPrice?: number | null
    size?: product_data_size | null
    productColor?: product_data_productColor | null
    order_data?: order_dataUncheckedCreateNestedManyWithoutProduct_dataInput
    product_review?: product_reviewUncheckedCreateNestedManyWithoutProduct_dataInput
  }

  export type product_dataCreateOrConnectWithoutProduct_imageInput = {
    where: product_dataWhereUniqueInput
    create: XOR<product_dataCreateWithoutProduct_imageInput, product_dataUncheckedCreateWithoutProduct_imageInput>
  }

  export type product_dataUpsertWithoutProduct_imageInput = {
    update: XOR<product_dataUpdateWithoutProduct_imageInput, product_dataUncheckedUpdateWithoutProduct_imageInput>
    create: XOR<product_dataCreateWithoutProduct_imageInput, product_dataUncheckedCreateWithoutProduct_imageInput>
  }

  export type product_dataUpdateWithoutProduct_imageInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    quantityAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    size?: NullableEnumproduct_data_sizeFieldUpdateOperationsInput | product_data_size | null
    productColor?: NullableEnumproduct_data_productColorFieldUpdateOperationsInput | product_data_productColor | null
    order_data?: order_dataUpdateManyWithoutProduct_dataNestedInput
    product_review?: product_reviewUpdateManyWithoutProduct_dataNestedInput
  }

  export type product_dataUncheckedUpdateWithoutProduct_imageInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    quantityAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    size?: NullableEnumproduct_data_sizeFieldUpdateOperationsInput | product_data_size | null
    productColor?: NullableEnumproduct_data_productColorFieldUpdateOperationsInput | product_data_productColor | null
    order_data?: order_dataUncheckedUpdateManyWithoutProduct_dataNestedInput
    product_review?: product_reviewUncheckedUpdateManyWithoutProduct_dataNestedInput
  }

  export type product_dataCreateWithoutProduct_reviewInput = {
    name?: string | null
    price?: number | null
    discount?: number | null
    quantityAvailable?: number | null
    category?: string | null
    currentPrice?: number | null
    size?: product_data_size | null
    productColor?: product_data_productColor | null
    order_data?: order_dataCreateNestedManyWithoutProduct_dataInput
    product_image?: product_imageCreateNestedOneWithoutProduct_dataInput
  }

  export type product_dataUncheckedCreateWithoutProduct_reviewInput = {
    product_id?: number
    name?: string | null
    price?: number | null
    discount?: number | null
    quantityAvailable?: number | null
    category?: string | null
    currentPrice?: number | null
    size?: product_data_size | null
    productColor?: product_data_productColor | null
    order_data?: order_dataUncheckedCreateNestedManyWithoutProduct_dataInput
    product_image?: product_imageUncheckedCreateNestedOneWithoutProduct_dataInput
  }

  export type product_dataCreateOrConnectWithoutProduct_reviewInput = {
    where: product_dataWhereUniqueInput
    create: XOR<product_dataCreateWithoutProduct_reviewInput, product_dataUncheckedCreateWithoutProduct_reviewInput>
  }

  export type user_dataCreateWithoutProduct_reviewInput = {
    user_firstName?: string | null
    user_email?: string | null
    user_pass?: string | null
    user_lastName?: string | null
    order_data?: order_dataCreateNestedManyWithoutUser_dataInput
    user_address?: user_addressCreateNestedOneWithoutUser_dataInput
  }

  export type user_dataUncheckedCreateWithoutProduct_reviewInput = {
    user_id?: number
    user_firstName?: string | null
    user_email?: string | null
    user_pass?: string | null
    user_lastName?: string | null
    order_data?: order_dataUncheckedCreateNestedManyWithoutUser_dataInput
    user_address?: user_addressUncheckedCreateNestedOneWithoutUser_dataInput
  }

  export type user_dataCreateOrConnectWithoutProduct_reviewInput = {
    where: user_dataWhereUniqueInput
    create: XOR<user_dataCreateWithoutProduct_reviewInput, user_dataUncheckedCreateWithoutProduct_reviewInput>
  }

  export type product_dataUpsertWithoutProduct_reviewInput = {
    update: XOR<product_dataUpdateWithoutProduct_reviewInput, product_dataUncheckedUpdateWithoutProduct_reviewInput>
    create: XOR<product_dataCreateWithoutProduct_reviewInput, product_dataUncheckedCreateWithoutProduct_reviewInput>
  }

  export type product_dataUpdateWithoutProduct_reviewInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    quantityAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    size?: NullableEnumproduct_data_sizeFieldUpdateOperationsInput | product_data_size | null
    productColor?: NullableEnumproduct_data_productColorFieldUpdateOperationsInput | product_data_productColor | null
    order_data?: order_dataUpdateManyWithoutProduct_dataNestedInput
    product_image?: product_imageUpdateOneWithoutProduct_dataNestedInput
  }

  export type product_dataUncheckedUpdateWithoutProduct_reviewInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    quantityAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    size?: NullableEnumproduct_data_sizeFieldUpdateOperationsInput | product_data_size | null
    productColor?: NullableEnumproduct_data_productColorFieldUpdateOperationsInput | product_data_productColor | null
    order_data?: order_dataUncheckedUpdateManyWithoutProduct_dataNestedInput
    product_image?: product_imageUncheckedUpdateOneWithoutProduct_dataNestedInput
  }

  export type user_dataUpsertWithoutProduct_reviewInput = {
    update: XOR<user_dataUpdateWithoutProduct_reviewInput, user_dataUncheckedUpdateWithoutProduct_reviewInput>
    create: XOR<user_dataCreateWithoutProduct_reviewInput, user_dataUncheckedCreateWithoutProduct_reviewInput>
  }

  export type user_dataUpdateWithoutProduct_reviewInput = {
    user_firstName?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    user_pass?: NullableStringFieldUpdateOperationsInput | string | null
    user_lastName?: NullableStringFieldUpdateOperationsInput | string | null
    order_data?: order_dataUpdateManyWithoutUser_dataNestedInput
    user_address?: user_addressUpdateOneWithoutUser_dataNestedInput
  }

  export type user_dataUncheckedUpdateWithoutProduct_reviewInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_firstName?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    user_pass?: NullableStringFieldUpdateOperationsInput | string | null
    user_lastName?: NullableStringFieldUpdateOperationsInput | string | null
    order_data?: order_dataUncheckedUpdateManyWithoutUser_dataNestedInput
    user_address?: user_addressUncheckedUpdateOneWithoutUser_dataNestedInput
  }

  export type order_dataCreateWithoutSeller_dataInput = {
    order_id: number
    order_date?: Date | string | null
    transaction_status?: string | null
    quantity?: number | null
    total_price?: number | null
    product_data?: product_dataCreateNestedOneWithoutOrder_dataInput
    shipper_data?: shipper_dataCreateNestedOneWithoutOrder_dataInput
    user_data?: user_dataCreateNestedOneWithoutOrder_dataInput
  }

  export type order_dataUncheckedCreateWithoutSeller_dataInput = {
    order_id: number
    order_date?: Date | string | null
    transaction_status?: string | null
    quantity?: number | null
    total_price?: number | null
    product_id?: number | null
    shipper_id?: number | null
    user_id?: number | null
  }

  export type order_dataCreateOrConnectWithoutSeller_dataInput = {
    where: order_dataWhereUniqueInput
    create: XOR<order_dataCreateWithoutSeller_dataInput, order_dataUncheckedCreateWithoutSeller_dataInput>
  }

  export type order_dataCreateManySeller_dataInputEnvelope = {
    data: Enumerable<order_dataCreateManySeller_dataInput>
    skipDuplicates?: boolean
  }

  export type order_dataUpsertWithWhereUniqueWithoutSeller_dataInput = {
    where: order_dataWhereUniqueInput
    update: XOR<order_dataUpdateWithoutSeller_dataInput, order_dataUncheckedUpdateWithoutSeller_dataInput>
    create: XOR<order_dataCreateWithoutSeller_dataInput, order_dataUncheckedCreateWithoutSeller_dataInput>
  }

  export type order_dataUpdateWithWhereUniqueWithoutSeller_dataInput = {
    where: order_dataWhereUniqueInput
    data: XOR<order_dataUpdateWithoutSeller_dataInput, order_dataUncheckedUpdateWithoutSeller_dataInput>
  }

  export type order_dataUpdateManyWithWhereWithoutSeller_dataInput = {
    where: order_dataScalarWhereInput
    data: XOR<order_dataUpdateManyMutationInput, order_dataUncheckedUpdateManyWithoutOrder_dataInput>
  }

  export type order_dataCreateWithoutShipper_dataInput = {
    order_id: number
    order_date?: Date | string | null
    transaction_status?: string | null
    quantity?: number | null
    total_price?: number | null
    product_data?: product_dataCreateNestedOneWithoutOrder_dataInput
    seller_data?: seller_dataCreateNestedOneWithoutOrder_dataInput
    user_data?: user_dataCreateNestedOneWithoutOrder_dataInput
  }

  export type order_dataUncheckedCreateWithoutShipper_dataInput = {
    order_id: number
    order_date?: Date | string | null
    transaction_status?: string | null
    quantity?: number | null
    total_price?: number | null
    product_id?: number | null
    seller_id?: number | null
    user_id?: number | null
  }

  export type order_dataCreateOrConnectWithoutShipper_dataInput = {
    where: order_dataWhereUniqueInput
    create: XOR<order_dataCreateWithoutShipper_dataInput, order_dataUncheckedCreateWithoutShipper_dataInput>
  }

  export type order_dataCreateManyShipper_dataInputEnvelope = {
    data: Enumerable<order_dataCreateManyShipper_dataInput>
    skipDuplicates?: boolean
  }

  export type order_dataUpsertWithWhereUniqueWithoutShipper_dataInput = {
    where: order_dataWhereUniqueInput
    update: XOR<order_dataUpdateWithoutShipper_dataInput, order_dataUncheckedUpdateWithoutShipper_dataInput>
    create: XOR<order_dataCreateWithoutShipper_dataInput, order_dataUncheckedCreateWithoutShipper_dataInput>
  }

  export type order_dataUpdateWithWhereUniqueWithoutShipper_dataInput = {
    where: order_dataWhereUniqueInput
    data: XOR<order_dataUpdateWithoutShipper_dataInput, order_dataUncheckedUpdateWithoutShipper_dataInput>
  }

  export type order_dataUpdateManyWithWhereWithoutShipper_dataInput = {
    where: order_dataScalarWhereInput
    data: XOR<order_dataUpdateManyMutationInput, order_dataUncheckedUpdateManyWithoutOrder_dataInput>
  }

  export type user_dataCreateWithoutUser_addressInput = {
    user_firstName?: string | null
    user_email?: string | null
    user_pass?: string | null
    user_lastName?: string | null
    order_data?: order_dataCreateNestedManyWithoutUser_dataInput
    product_review?: product_reviewCreateNestedManyWithoutUser_dataInput
  }

  export type user_dataUncheckedCreateWithoutUser_addressInput = {
    user_id?: number
    user_firstName?: string | null
    user_email?: string | null
    user_pass?: string | null
    user_lastName?: string | null
    order_data?: order_dataUncheckedCreateNestedManyWithoutUser_dataInput
    product_review?: product_reviewUncheckedCreateNestedManyWithoutUser_dataInput
  }

  export type user_dataCreateOrConnectWithoutUser_addressInput = {
    where: user_dataWhereUniqueInput
    create: XOR<user_dataCreateWithoutUser_addressInput, user_dataUncheckedCreateWithoutUser_addressInput>
  }

  export type user_dataUpsertWithoutUser_addressInput = {
    update: XOR<user_dataUpdateWithoutUser_addressInput, user_dataUncheckedUpdateWithoutUser_addressInput>
    create: XOR<user_dataCreateWithoutUser_addressInput, user_dataUncheckedCreateWithoutUser_addressInput>
  }

  export type user_dataUpdateWithoutUser_addressInput = {
    user_firstName?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    user_pass?: NullableStringFieldUpdateOperationsInput | string | null
    user_lastName?: NullableStringFieldUpdateOperationsInput | string | null
    order_data?: order_dataUpdateManyWithoutUser_dataNestedInput
    product_review?: product_reviewUpdateManyWithoutUser_dataNestedInput
  }

  export type user_dataUncheckedUpdateWithoutUser_addressInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_firstName?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    user_pass?: NullableStringFieldUpdateOperationsInput | string | null
    user_lastName?: NullableStringFieldUpdateOperationsInput | string | null
    order_data?: order_dataUncheckedUpdateManyWithoutUser_dataNestedInput
    product_review?: product_reviewUncheckedUpdateManyWithoutUser_dataNestedInput
  }

  export type order_dataCreateWithoutUser_dataInput = {
    order_id: number
    order_date?: Date | string | null
    transaction_status?: string | null
    quantity?: number | null
    total_price?: number | null
    product_data?: product_dataCreateNestedOneWithoutOrder_dataInput
    shipper_data?: shipper_dataCreateNestedOneWithoutOrder_dataInput
    seller_data?: seller_dataCreateNestedOneWithoutOrder_dataInput
  }

  export type order_dataUncheckedCreateWithoutUser_dataInput = {
    order_id: number
    order_date?: Date | string | null
    transaction_status?: string | null
    quantity?: number | null
    total_price?: number | null
    product_id?: number | null
    shipper_id?: number | null
    seller_id?: number | null
  }

  export type order_dataCreateOrConnectWithoutUser_dataInput = {
    where: order_dataWhereUniqueInput
    create: XOR<order_dataCreateWithoutUser_dataInput, order_dataUncheckedCreateWithoutUser_dataInput>
  }

  export type order_dataCreateManyUser_dataInputEnvelope = {
    data: Enumerable<order_dataCreateManyUser_dataInput>
    skipDuplicates?: boolean
  }

  export type product_reviewCreateWithoutUser_dataInput = {
    rate?: number | null
    comment?: string | null
    product_data?: product_dataCreateNestedOneWithoutProduct_reviewInput
  }

  export type product_reviewUncheckedCreateWithoutUser_dataInput = {
    review_id?: number
    rate?: number | null
    comment?: string | null
    product_id?: number | null
  }

  export type product_reviewCreateOrConnectWithoutUser_dataInput = {
    where: product_reviewWhereUniqueInput
    create: XOR<product_reviewCreateWithoutUser_dataInput, product_reviewUncheckedCreateWithoutUser_dataInput>
  }

  export type product_reviewCreateManyUser_dataInputEnvelope = {
    data: Enumerable<product_reviewCreateManyUser_dataInput>
    skipDuplicates?: boolean
  }

  export type user_addressCreateWithoutUser_dataInput = {
    recipient_firstName?: string | null
    recipient_lastName?: string | null
    recipient_phone?: string | null
    recipient_address?: string | null
    recipient_postal?: string | null
    recipient_country?: string | null
  }

  export type user_addressUncheckedCreateWithoutUser_dataInput = {
    recipient_firstName?: string | null
    recipient_lastName?: string | null
    recipient_phone?: string | null
    recipient_address?: string | null
    recipient_postal?: string | null
    recipient_country?: string | null
  }

  export type user_addressCreateOrConnectWithoutUser_dataInput = {
    where: user_addressWhereUniqueInput
    create: XOR<user_addressCreateWithoutUser_dataInput, user_addressUncheckedCreateWithoutUser_dataInput>
  }

  export type order_dataUpsertWithWhereUniqueWithoutUser_dataInput = {
    where: order_dataWhereUniqueInput
    update: XOR<order_dataUpdateWithoutUser_dataInput, order_dataUncheckedUpdateWithoutUser_dataInput>
    create: XOR<order_dataCreateWithoutUser_dataInput, order_dataUncheckedCreateWithoutUser_dataInput>
  }

  export type order_dataUpdateWithWhereUniqueWithoutUser_dataInput = {
    where: order_dataWhereUniqueInput
    data: XOR<order_dataUpdateWithoutUser_dataInput, order_dataUncheckedUpdateWithoutUser_dataInput>
  }

  export type order_dataUpdateManyWithWhereWithoutUser_dataInput = {
    where: order_dataScalarWhereInput
    data: XOR<order_dataUpdateManyMutationInput, order_dataUncheckedUpdateManyWithoutOrder_dataInput>
  }

  export type product_reviewUpsertWithWhereUniqueWithoutUser_dataInput = {
    where: product_reviewWhereUniqueInput
    update: XOR<product_reviewUpdateWithoutUser_dataInput, product_reviewUncheckedUpdateWithoutUser_dataInput>
    create: XOR<product_reviewCreateWithoutUser_dataInput, product_reviewUncheckedCreateWithoutUser_dataInput>
  }

  export type product_reviewUpdateWithWhereUniqueWithoutUser_dataInput = {
    where: product_reviewWhereUniqueInput
    data: XOR<product_reviewUpdateWithoutUser_dataInput, product_reviewUncheckedUpdateWithoutUser_dataInput>
  }

  export type product_reviewUpdateManyWithWhereWithoutUser_dataInput = {
    where: product_reviewScalarWhereInput
    data: XOR<product_reviewUpdateManyMutationInput, product_reviewUncheckedUpdateManyWithoutProduct_reviewInput>
  }

  export type user_addressUpsertWithoutUser_dataInput = {
    update: XOR<user_addressUpdateWithoutUser_dataInput, user_addressUncheckedUpdateWithoutUser_dataInput>
    create: XOR<user_addressCreateWithoutUser_dataInput, user_addressUncheckedCreateWithoutUser_dataInput>
  }

  export type user_addressUpdateWithoutUser_dataInput = {
    recipient_firstName?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_lastName?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_phone?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_address?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_postal?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_addressUncheckedUpdateWithoutUser_dataInput = {
    recipient_firstName?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_lastName?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_phone?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_address?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_postal?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type order_dataCreateManyProduct_dataInput = {
    order_id: number
    order_date?: Date | string | null
    transaction_status?: string | null
    quantity?: number | null
    total_price?: number | null
    shipper_id?: number | null
    seller_id?: number | null
    user_id?: number | null
  }

  export type product_reviewCreateManyProduct_dataInput = {
    review_id?: number
    rate?: number | null
    comment?: string | null
    user_id?: number | null
  }

  export type order_dataUpdateWithoutProduct_dataInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_status?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    shipper_data?: shipper_dataUpdateOneWithoutOrder_dataNestedInput
    seller_data?: seller_dataUpdateOneWithoutOrder_dataNestedInput
    user_data?: user_dataUpdateOneWithoutOrder_dataNestedInput
  }

  export type order_dataUncheckedUpdateWithoutProduct_dataInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_status?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    shipper_id?: NullableIntFieldUpdateOperationsInput | number | null
    seller_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type order_dataUncheckedUpdateManyWithoutOrder_dataInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_status?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    shipper_id?: NullableIntFieldUpdateOperationsInput | number | null
    seller_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type product_reviewUpdateWithoutProduct_dataInput = {
    rate?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    user_data?: user_dataUpdateOneWithoutProduct_reviewNestedInput
  }

  export type product_reviewUncheckedUpdateWithoutProduct_dataInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    rate?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type product_reviewUncheckedUpdateManyWithoutProduct_reviewInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    rate?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type order_dataCreateManySeller_dataInput = {
    order_id: number
    order_date?: Date | string | null
    transaction_status?: string | null
    quantity?: number | null
    total_price?: number | null
    product_id?: number | null
    shipper_id?: number | null
    user_id?: number | null
  }

  export type order_dataUpdateWithoutSeller_dataInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_status?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    product_data?: product_dataUpdateOneWithoutOrder_dataNestedInput
    shipper_data?: shipper_dataUpdateOneWithoutOrder_dataNestedInput
    user_data?: user_dataUpdateOneWithoutOrder_dataNestedInput
  }

  export type order_dataUncheckedUpdateWithoutSeller_dataInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_status?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    product_id?: NullableIntFieldUpdateOperationsInput | number | null
    shipper_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type order_dataCreateManyShipper_dataInput = {
    order_id: number
    order_date?: Date | string | null
    transaction_status?: string | null
    quantity?: number | null
    total_price?: number | null
    product_id?: number | null
    seller_id?: number | null
    user_id?: number | null
  }

  export type order_dataUpdateWithoutShipper_dataInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_status?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    product_data?: product_dataUpdateOneWithoutOrder_dataNestedInput
    seller_data?: seller_dataUpdateOneWithoutOrder_dataNestedInput
    user_data?: user_dataUpdateOneWithoutOrder_dataNestedInput
  }

  export type order_dataUncheckedUpdateWithoutShipper_dataInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_status?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    product_id?: NullableIntFieldUpdateOperationsInput | number | null
    seller_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type order_dataCreateManyUser_dataInput = {
    order_id: number
    order_date?: Date | string | null
    transaction_status?: string | null
    quantity?: number | null
    total_price?: number | null
    product_id?: number | null
    shipper_id?: number | null
    seller_id?: number | null
  }

  export type product_reviewCreateManyUser_dataInput = {
    review_id?: number
    rate?: number | null
    comment?: string | null
    product_id?: number | null
  }

  export type order_dataUpdateWithoutUser_dataInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_status?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    product_data?: product_dataUpdateOneWithoutOrder_dataNestedInput
    shipper_data?: shipper_dataUpdateOneWithoutOrder_dataNestedInput
    seller_data?: seller_dataUpdateOneWithoutOrder_dataNestedInput
  }

  export type order_dataUncheckedUpdateWithoutUser_dataInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_status?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    product_id?: NullableIntFieldUpdateOperationsInput | number | null
    shipper_id?: NullableIntFieldUpdateOperationsInput | number | null
    seller_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type product_reviewUpdateWithoutUser_dataInput = {
    rate?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    product_data?: product_dataUpdateOneWithoutProduct_reviewNestedInput
  }

  export type product_reviewUncheckedUpdateWithoutUser_dataInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    rate?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    product_id?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}